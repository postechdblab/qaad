Index.PACKAGES = {"org.apache.hadoop.hive.ql.io" : [], "org.apache.hadoop.hive.ql" : [], "org.apache.hadoop.hive.ql.io.orc" : [{"name" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader", "shortDescription" : "This is based on hive-exec-1.2.1org.apache.hadoop.hive.ql.io.orc.OrcNewInputFormat.OrcRecordReader.", "members_class" : [{"label" : "getObjectInspector", "tail" : "(): ObjectInspector", "member" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.getObjectInspector", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#getObjectInspector():org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector", "kind" : "def"}, {"label" : "nextKeyValue", "tail" : "(): Boolean", "member" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.nextKeyValue", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#nextKeyValue():Boolean", "kind" : "def"}, {"label" : "initialize", "tail" : "(split: InputSplit, context: TaskAttemptContext): Unit", "member" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.initialize", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#initialize(split:org.apache.hadoop.mapreduce.InputSplit,context:org.apache.hadoop.mapreduce.TaskAttemptContext):Unit", "kind" : "def"}, {"label" : "getProgress", "tail" : "(): Float", "member" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.getProgress", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#getProgress():Float", "kind" : "def"}, {"label" : "getCurrentValue", "tail" : "(): OrcStruct", "member" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.getCurrentValue", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#getCurrentValue():org.apache.hadoop.hive.ql.io.orc.OrcStruct", "kind" : "def"}, {"label" : "getCurrentKey", "tail" : "(): NullWritable", "member" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.getCurrentKey", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#getCurrentKey():org.apache.hadoop.io.NullWritable", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.close", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#close():Unit", "kind" : "def"}, {"member" : "org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/hadoop\/hive\/ql\/io\/orc\/SparkOrcNewRecordReader.html", "kind" : "class"}], "org.apache.spark.sql.hive.execution" : [{"name" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase", "members_trait" : [{"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.argString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "run", "tail" : "(sparkSession: SparkSession, child: SparkPlan): Seq[Row]", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.run", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#run(sparkSession:org.apache.spark.sql.SparkSession,child:org.apache.spark.sql.execution.SparkPlan):Seq[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "tableIdentifier", "tail" : ": TableIdentifier", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.tableIdentifier", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#tableIdentifier:org.apache.spark.sql.catalyst.TableIdentifier", "kind" : "val"}, {"label" : "basicWriteJobStatsTracker", "tail" : "(hadoopConf: Configuration): BasicWriteJobStatsTracker", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.basicWriteJobStatsTracker", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#basicWriteJobStatsTracker(hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.BasicWriteJobStatsTracker", "kind" : "def"}, {"label" : "metrics", "tail" : ": Map[String, SQLMetric]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.metrics", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#metrics:Map[String,org.apache.spark.sql.execution.metric.SQLMetric]", "kind" : "lazy val"}, {"label" : "outputColumns", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.outputColumns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#outputColumns:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "child", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.child", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "final def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (LogicalPlan) ⇒ LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.nodePatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "stats", "tail" : "(): Statistics", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.stats", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#stats:org.apache.spark.sql.catalyst.plans.logical.Statistics", "kind" : "def"}, {"label" : "producedAttributes", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.producedAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#producedAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "output", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.output", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "sameOutput", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.sameOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#sameOutput(other:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "outputOrdering", "tail" : "(): Seq[SortOrder]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.outputOrdering", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#outputOrdering:Seq[org.apache.spark.sql.catalyst.expressions.SortOrder]", "kind" : "def"}, {"label" : "refresh", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.refresh", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#refresh():Unit", "kind" : "def"}, {"label" : "resolveQuoted", "tail" : "(name: String, resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveQuoted", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveQuoted(name:String,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolve(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolveChildren", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveChildren(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(schema: StructType, resolver: Resolver): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolve(schema:org.apache.spark.sql.types.StructType,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.childrenResolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "statePrefix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.statePrefix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#statePrefix:String", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "maxRowsPerPartition", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRowsPerPartition", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#maxRowsPerPartition:Option[Long]", "kind" : "def"}, {"label" : "maxRows", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRows", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#maxRows:Option[Long]", "kind" : "def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "isStreaming", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.isStreaming", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#isStreaming:Boolean", "kind" : "def"}, {"label" : "metadataOutput", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.metadataOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#metadataOutput:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#logName:String", "kind" : "def"}, {"label" : "validConstraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.validConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#validConstraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.constraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constructIsNotNullConstraints", "tail" : "(constraints: ExpressionSet, output: Seq[Attribute]): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.constructIsNotNullConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#constructIsNotNullConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet,output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "inferAdditionalConstraints", "tail" : "(constraints: ExpressionSet): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.inferAdditionalConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#inferAdditionalConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "invalidateStatsCache", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.invalidateStatsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#invalidateStatsCache():Unit", "kind" : "final def"}, {"label" : "statsCache", "tail" : ": Option[Statistics]", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.statsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#statsCache:Option[org.apache.spark.sql.catalyst.plans.logical.Statistics]", "kind" : "val"}, {"label" : "clone", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#clone():org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformAllExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformAllExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformAllExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):AnalysisHelper.this.type", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "assertNotAnalysisRule", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.assertNotAnalysisRule", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#assertNotAnalysisRule():Unit", "kind" : "def"}, {"label" : "resolveExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveExpressions", "tail" : "(r: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveExpressions(r:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "updateOuterReferencesInSubquery", "tail" : "(plan: LogicalPlan, attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.updateOuterReferencesInSubquery", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#updateOuterReferencesInSubquery(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])], skipCond: (LogicalPlan) ⇒ Boolean, canGetOutput: (LogicalPlan) ⇒ Boolean): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])],skipCond:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean,canGetOutput:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveOperatorsUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveOperatorsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveOperatorsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveOperatorsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveOperatorsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveOperatorsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperators", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperators", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#resolveOperators(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "analyzed", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.analyzed", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#analyzed:Boolean", "kind" : "def"}, {"label" : "allAttributes", "tail" : ": AttributeSeq", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.allAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#allAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSeq", "kind" : "lazy val"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.semanticHash", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#semanticHash():Int", "kind" : "final def"}, {"label" : "sameResult", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.sameResult", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#sameResult(other:PlanType):Boolean", "kind" : "final def"}, {"label" : "doCanonicalize", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.doCanonicalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#doCanonicalize():PlanType", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.canonicalized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#canonicalized:PlanType", "kind" : "final lazy val"}, {"label" : "isCanonicalizedPlan", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.isCanonicalizedPlan", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#isCanonicalizedPlan:Boolean", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[QueryPlan[_]]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.innerChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#innerChildren:Seq[org.apache.spark.sql.catalyst.plans.QueryPlan[_]]", "kind" : "def"}, {"label" : "collectWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.collectWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#collectWithSubqueries[B](f:PartialFunction[PlanType,B]):Seq[B]", "kind" : "def"}, {"label" : "transformUpWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformUpWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformUpWithSubqueries(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "subqueriesAll", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueriesAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#subqueriesAll:Seq[PlanType]", "kind" : "def"}, {"label" : "subqueries", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#subqueries:Seq[PlanType]", "kind" : "def"}, {"label" : "formattedNodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.formattedNodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#formattedNodeName:String", "kind" : "def"}, {"label" : "verboseStringWithOperatorId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseStringWithOperatorId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#verboseStringWithOperatorId():String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#verboseString(maxFields:Int):String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "printSchema", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.printSchema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#printSchema():Unit", "kind" : "def"}, {"label" : "schemaString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schemaString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#schemaString:String", "kind" : "def"}, {"label" : "schema", "tail" : ": StructType", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#schema:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"label" : "rewriteAttrs", "tail" : "(attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.rewriteAttrs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#rewriteAttrs(attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):PlanType", "kind" : "def"}, {"label" : "expressions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.expressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "final def"}, {"label" : "transformAllExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformAllExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformAllExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "mapExpressions", "tail" : "(f: (Expression) ⇒ Expression): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#mapExpressions(f:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformExpressionsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUp", "tail" : "(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformExpressionsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformExpressionsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDown", "tail" : "(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformExpressionsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectBase.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "missingInput", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.missingInput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#missingInput:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "final def"}, {"label" : "references", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.references", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "inputSet", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.inputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#inputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.treePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "outputSet", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.outputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#outputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#treeString:String", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#toString():String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#nodeName:String", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (LogicalPlan) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(LogicalPlan, LogicalPlan), LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (LogicalPlan) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (LogicalPlan) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (LogicalPlan) ⇒ Boolean): Option[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: LogicalPlan): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "writingCommandClassName", "tail" : "(): String", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.writingCommandClassName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#writingCommandClassName:String", "kind" : "abstract def"}, {"label" : "getWritingCommand", "tail" : "(catalog: SessionCatalog, tableDesc: CatalogTable, tableExists: Boolean): DataWritingCommand", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.getWritingCommand", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#getWritingCommand(catalog:org.apache.spark.sql.catalyst.catalog.SessionCatalog,tableDesc:org.apache.spark.sql.catalyst.catalog.CatalogTable,tableExists:Boolean):org.apache.spark.sql.execution.command.DataWritingCommand", "kind" : "abstract def"}, {"label" : "mode", "tail" : ": SaveMode", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.mode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#mode:org.apache.spark.sql.SaveMode", "kind" : "abstract val"}, {"label" : "outputColumnNames", "tail" : ": Seq[String]", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.outputColumnNames", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#outputColumnNames:Seq[String]", "kind" : "abstract val"}, {"label" : "query", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.query", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#query:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "abstract val"}, {"label" : "tableDesc", "tail" : ": CatalogTable", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.tableDesc", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#tableDesc:org.apache.spark.sql.catalyst.catalog.CatalogTable", "kind" : "abstract val"}, {"label" : "withNewChildInternal", "tail" : "(newChild: LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#withNewChildInternal(newChild:T):T", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectBase.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand", "shortDescription" : "Create table and insert the query result into it.", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: LogicalPlan): CreateHiveTableAsSelectCommand", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand", "kind" : "def"}, {"label" : "writingCommandClassName", "tail" : "(): String", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand.writingCommandClassName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#writingCommandClassName:String", "kind" : "def"}, {"label" : "getWritingCommand", "tail" : "(catalog: SessionCatalog, tableDesc: CatalogTable, tableExists: Boolean): DataWritingCommand", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand.getWritingCommand", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#getWritingCommand(catalog:org.apache.spark.sql.catalyst.catalog.SessionCatalog,tableDesc:org.apache.spark.sql.catalyst.catalog.CatalogTable,tableExists:Boolean):org.apache.spark.sql.execution.command.DataWritingCommand", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand#<init>", "error" : "unsupported entity"}, {"label" : "mode", "tail" : ": SaveMode", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand.mode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#mode:org.apache.spark.sql.SaveMode", "kind" : "val"}, {"label" : "outputColumnNames", "tail" : ": Seq[String]", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand.outputColumnNames", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#outputColumnNames:Seq[String]", "kind" : "val"}, {"label" : "query", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand.query", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#query:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "val"}, {"label" : "tableDesc", "tail" : ": CatalogTable", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectCommand.tableDesc", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#tableDesc:org.apache.spark.sql.catalyst.catalog.CatalogTable", "kind" : "val"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.argString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "run", "tail" : "(sparkSession: SparkSession, child: SparkPlan): Seq[Row]", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.run", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#run(sparkSession:org.apache.spark.sql.SparkSession,child:org.apache.spark.sql.execution.SparkPlan):Seq[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "tableIdentifier", "tail" : ": TableIdentifier", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.tableIdentifier", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#tableIdentifier:org.apache.spark.sql.catalyst.TableIdentifier", "kind" : "val"}, {"label" : "basicWriteJobStatsTracker", "tail" : "(hadoopConf: Configuration): BasicWriteJobStatsTracker", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.basicWriteJobStatsTracker", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#basicWriteJobStatsTracker(hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.BasicWriteJobStatsTracker", "kind" : "def"}, {"label" : "metrics", "tail" : ": Map[String, SQLMetric]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.metrics", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#metrics:Map[String,org.apache.spark.sql.execution.metric.SQLMetric]", "kind" : "lazy val"}, {"label" : "outputColumns", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.outputColumns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#outputColumns:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "child", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.child", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "final def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (LogicalPlan) ⇒ LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.nodePatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "stats", "tail" : "(): Statistics", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.stats", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#stats:org.apache.spark.sql.catalyst.plans.logical.Statistics", "kind" : "def"}, {"label" : "producedAttributes", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.producedAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#producedAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "output", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.output", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "sameOutput", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.sameOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#sameOutput(other:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "outputOrdering", "tail" : "(): Seq[SortOrder]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.outputOrdering", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#outputOrdering:Seq[org.apache.spark.sql.catalyst.expressions.SortOrder]", "kind" : "def"}, {"label" : "refresh", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.refresh", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#refresh():Unit", "kind" : "def"}, {"label" : "resolveQuoted", "tail" : "(name: String, resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveQuoted", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveQuoted(name:String,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolve(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolveChildren", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveChildren(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(schema: StructType, resolver: Resolver): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolve(schema:org.apache.spark.sql.types.StructType,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.childrenResolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "statePrefix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.statePrefix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#statePrefix:String", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "maxRowsPerPartition", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRowsPerPartition", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#maxRowsPerPartition:Option[Long]", "kind" : "def"}, {"label" : "maxRows", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRows", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#maxRows:Option[Long]", "kind" : "def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "isStreaming", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.isStreaming", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#isStreaming:Boolean", "kind" : "def"}, {"label" : "metadataOutput", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.metadataOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#metadataOutput:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#logName:String", "kind" : "def"}, {"label" : "validConstraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.validConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#validConstraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.constraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constructIsNotNullConstraints", "tail" : "(constraints: ExpressionSet, output: Seq[Attribute]): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.constructIsNotNullConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#constructIsNotNullConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet,output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "inferAdditionalConstraints", "tail" : "(constraints: ExpressionSet): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.inferAdditionalConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#inferAdditionalConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "invalidateStatsCache", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.invalidateStatsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#invalidateStatsCache():Unit", "kind" : "final def"}, {"label" : "statsCache", "tail" : ": Option[Statistics]", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.statsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#statsCache:Option[org.apache.spark.sql.catalyst.plans.logical.Statistics]", "kind" : "val"}, {"label" : "clone", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#clone():org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformAllExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformAllExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformAllExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):AnalysisHelper.this.type", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "assertNotAnalysisRule", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.assertNotAnalysisRule", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#assertNotAnalysisRule():Unit", "kind" : "def"}, {"label" : "resolveExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveExpressions", "tail" : "(r: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveExpressions(r:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "updateOuterReferencesInSubquery", "tail" : "(plan: LogicalPlan, attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.updateOuterReferencesInSubquery", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#updateOuterReferencesInSubquery(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])], skipCond: (LogicalPlan) ⇒ Boolean, canGetOutput: (LogicalPlan) ⇒ Boolean): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])],skipCond:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean,canGetOutput:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveOperatorsUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveOperatorsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveOperatorsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveOperatorsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveOperatorsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveOperatorsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperators", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperators", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#resolveOperators(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "analyzed", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.analyzed", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#analyzed:Boolean", "kind" : "def"}, {"label" : "allAttributes", "tail" : ": AttributeSeq", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.allAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#allAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSeq", "kind" : "lazy val"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.semanticHash", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#semanticHash():Int", "kind" : "final def"}, {"label" : "sameResult", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.sameResult", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#sameResult(other:PlanType):Boolean", "kind" : "final def"}, {"label" : "doCanonicalize", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.doCanonicalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#doCanonicalize():PlanType", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.canonicalized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#canonicalized:PlanType", "kind" : "final lazy val"}, {"label" : "isCanonicalizedPlan", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.isCanonicalizedPlan", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#isCanonicalizedPlan:Boolean", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[QueryPlan[_]]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.innerChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#innerChildren:Seq[org.apache.spark.sql.catalyst.plans.QueryPlan[_]]", "kind" : "def"}, {"label" : "collectWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.collectWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#collectWithSubqueries[B](f:PartialFunction[PlanType,B]):Seq[B]", "kind" : "def"}, {"label" : "transformUpWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformUpWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformUpWithSubqueries(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "subqueriesAll", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueriesAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#subqueriesAll:Seq[PlanType]", "kind" : "def"}, {"label" : "subqueries", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#subqueries:Seq[PlanType]", "kind" : "def"}, {"label" : "formattedNodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.formattedNodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#formattedNodeName:String", "kind" : "def"}, {"label" : "verboseStringWithOperatorId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseStringWithOperatorId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#verboseStringWithOperatorId():String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#verboseString(maxFields:Int):String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "printSchema", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.printSchema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#printSchema():Unit", "kind" : "def"}, {"label" : "schemaString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schemaString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#schemaString:String", "kind" : "def"}, {"label" : "schema", "tail" : ": StructType", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#schema:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"label" : "rewriteAttrs", "tail" : "(attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.rewriteAttrs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#rewriteAttrs(attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):PlanType", "kind" : "def"}, {"label" : "expressions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.expressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "final def"}, {"label" : "transformAllExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformAllExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformAllExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "mapExpressions", "tail" : "(f: (Expression) ⇒ Expression): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#mapExpressions(f:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformExpressionsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUp", "tail" : "(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformExpressionsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformExpressionsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDown", "tail" : "(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformExpressionsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): CreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "missingInput", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.missingInput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#missingInput:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "final def"}, {"label" : "references", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.references", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "inputSet", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.inputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#inputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.treePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "outputSet", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.outputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#outputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#treeString:String", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#toString():String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#nodeName:String", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (LogicalPlan) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(LogicalPlan, LogicalPlan), LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (LogicalPlan) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (LogicalPlan) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (LogicalPlan) ⇒ Boolean): Option[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: LogicalPlan): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/hive\/execution\/CreateHiveTableAsSelectCommand.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.hive.execution.HiveFileFormat", "shortDescription" : "FileFormat for writing Hive tables.", "members_class" : [{"label" : "prepareWrite", "tail" : "(sparkSession: SparkSession, job: Job, options: Map[String, String], dataSchema: StructType): OutputWriterFactory", "member" : "org.apache.spark.sql.hive.execution.HiveFileFormat.prepareWrite", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#prepareWrite(sparkSession:org.apache.spark.sql.SparkSession,job:org.apache.hadoop.mapreduce.Job,options:Map[String,String],dataSchema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.execution.datasources.OutputWriterFactory", "kind" : "def"}, {"label" : "inferSchema", "tail" : "(sparkSession: SparkSession, options: Map[String, String], files: Seq[FileStatus]): Option[StructType]", "member" : "org.apache.spark.sql.hive.execution.HiveFileFormat.inferSchema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#inferSchema(sparkSession:org.apache.spark.sql.SparkSession,options:Map[String,String],files:Seq[org.apache.hadoop.fs.FileStatus]):Option[org.apache.spark.sql.types.StructType]", "kind" : "def"}, {"label" : "shortName", "tail" : "(): String", "member" : "org.apache.spark.sql.hive.execution.HiveFileFormat.shortName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#shortName():String", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.execution.HiveFileFormat#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.sql.hive.execution.HiveFileFormat#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#logName:String", "kind" : "def"}, {"label" : "supportFieldName", "tail" : "(name: String): Boolean", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.supportFieldName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#supportFieldName(name:String):Boolean", "kind" : "def"}, {"label" : "supportDataType", "tail" : "(dataType: DataType): Boolean", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.supportDataType", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#supportDataType(dataType:org.apache.spark.sql.types.DataType):Boolean", "kind" : "def"}, {"label" : "buildReaderWithPartitionValues", "tail" : "(sparkSession: SparkSession, dataSchema: StructType, partitionSchema: StructType, requiredSchema: StructType, filters: Seq[Filter], options: Map[String, String], hadoopConf: Configuration): (PartitionedFile) ⇒ Iterator[InternalRow]", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.buildReaderWithPartitionValues", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#buildReaderWithPartitionValues(sparkSession:org.apache.spark.sql.SparkSession,dataSchema:org.apache.spark.sql.types.StructType,partitionSchema:org.apache.spark.sql.types.StructType,requiredSchema:org.apache.spark.sql.types.StructType,filters:Seq[org.apache.spark.sql.sources.Filter],options:Map[String,String],hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.PartitionedFile=>Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "buildReader", "tail" : "(sparkSession: SparkSession, dataSchema: StructType, partitionSchema: StructType, requiredSchema: StructType, filters: Seq[Filter], options: Map[String, String], hadoopConf: Configuration): (PartitionedFile) ⇒ Iterator[InternalRow]", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.buildReader", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#buildReader(sparkSession:org.apache.spark.sql.SparkSession,dataSchema:org.apache.spark.sql.types.StructType,partitionSchema:org.apache.spark.sql.types.StructType,requiredSchema:org.apache.spark.sql.types.StructType,filters:Seq[org.apache.spark.sql.sources.Filter],options:Map[String,String],hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.PartitionedFile=>Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "isSplitable", "tail" : "(sparkSession: SparkSession, options: Map[String, String], path: Path): Boolean", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.isSplitable", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#isSplitable(sparkSession:org.apache.spark.sql.SparkSession,options:Map[String,String],path:org.apache.hadoop.fs.Path):Boolean", "kind" : "def"}, {"label" : "vectorTypes", "tail" : "(requiredSchema: StructType, partitionSchema: StructType, sqlConf: SQLConf): Option[Seq[String]]", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.vectorTypes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#vectorTypes(requiredSchema:org.apache.spark.sql.types.StructType,partitionSchema:org.apache.spark.sql.types.StructType,sqlConf:org.apache.spark.sql.internal.SQLConf):Option[Seq[String]]", "kind" : "def"}, {"label" : "supportBatch", "tail" : "(sparkSession: SparkSession, dataSchema: StructType): Boolean", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.supportBatch", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#supportBatch(sparkSession:org.apache.spark.sql.SparkSession,dataSchema:org.apache.spark.sql.types.StructType):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/execution\/HiveFileFormat.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.hive.execution.HiveOptions", "shortDescription" : "Options for the Hive data source.", "object" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html", "members_class" : [{"label" : "serdeProperties", "tail" : "(): Map[String, String]", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.serdeProperties", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#serdeProperties:Map[String,String]", "kind" : "def"}, {"label" : "containsDelimiters", "tail" : ": Boolean", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.containsDelimiters", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#containsDelimiters:Boolean", "kind" : "val"}, {"label" : "serde", "tail" : ": Option[String]", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.serde", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#serde:Option[String]", "kind" : "val"}, {"label" : "hasInputOutputFormat", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.hasInputOutputFormat", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#hasInputOutputFormat:Boolean", "kind" : "def"}, {"label" : "outputFormat", "tail" : ": Option[String]", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.outputFormat", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#outputFormat:Option[String]", "kind" : "val"}, {"label" : "inputFormat", "tail" : ": Option[String]", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.inputFormat", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#inputFormat:Option[String]", "kind" : "val"}, {"label" : "fileFormat", "tail" : ": Option[String]", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.fileFormat", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#fileFormat:Option[String]", "kind" : "val"}, {"member" : "org.apache.spark.sql.hive.execution.HiveOptions#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.sql.hive.execution.HiveOptions#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "getHiveWriteCompression", "tail" : "(tableInfo: TableDesc, sqlConf: SQLConf): Option[(String, String)]", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.getHiveWriteCompression", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#getHiveWriteCompression(tableInfo:org.apache.hadoop.hive.ql.plan.TableDesc,sqlConf:org.apache.spark.sql.internal.SQLConf):Option[(String,String)]", "kind" : "def"}, {"label" : "delimiterOptions", "tail" : ": Map[String, String]", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.delimiterOptions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#delimiterOptions:scala.collection.immutable.Map[String,String]", "kind" : "val"}, {"label" : "SERDE", "tail" : ": String", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.SERDE", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#SERDE:String", "kind" : "val"}, {"label" : "OUTPUT_FORMAT", "tail" : ": String", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.OUTPUT_FORMAT", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#OUTPUT_FORMAT:String", "kind" : "val"}, {"label" : "INPUT_FORMAT", "tail" : ": String", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.INPUT_FORMAT", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#INPUT_FORMAT:String", "kind" : "val"}, {"label" : "FILE_FORMAT", "tail" : ": String", "member" : "org.apache.spark.sql.hive.execution.HiveOptions.FILE_FORMAT", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#FILE_FORMAT:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOptions.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.hive.execution.HiveOutputWriter", "shortDescription" : "", "members_class" : [{"label" : "typeInfoConversions", "tail" : "", "member" : "org.apache.spark.sql.hive.HiveInspectors.typeInfoConversions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#typeInfoConversionsextendsAnyRef", "kind" : "implicit class"}, {"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.sql.hive.execution.HiveOutputWriter.close", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#close():Unit", "kind" : "def"}, {"label" : "write", "tail" : "(row: InternalRow): Unit", "member" : "org.apache.spark.sql.hive.execution.HiveOutputWriter.write", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#write(row:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.execution.HiveOutputWriter#<init>", "error" : "unsupported entity"}, {"label" : "path", "tail" : ": String", "member" : "org.apache.spark.sql.hive.execution.HiveOutputWriter.path", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#path:String", "kind" : "val"}, {"label" : "inspectorToDataType", "tail" : "(inspector: ObjectInspector): DataType", "member" : "org.apache.spark.sql.hive.HiveInspectors.inspectorToDataType", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#inspectorToDataType(inspector:org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector):org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "toInspector", "tail" : "(expr: Expression): ObjectInspector", "member" : "org.apache.spark.sql.hive.HiveInspectors.toInspector", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#toInspector(expr:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector", "kind" : "def"}, {"label" : "toInspector", "tail" : "(dataType: DataType): ObjectInspector", "member" : "org.apache.spark.sql.hive.HiveInspectors.toInspector", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#toInspector(dataType:org.apache.spark.sql.types.DataType):org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector", "kind" : "def"}, {"label" : "wrap", "tail" : "(row: Seq[Any], wrappers: Array[(Any) ⇒ Any], cache: Array[AnyRef], dataTypes: Array[DataType]): Array[AnyRef]", "member" : "org.apache.spark.sql.hive.HiveInspectors.wrap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#wrap(row:Seq[Any],wrappers:Array[Any=>Any],cache:Array[AnyRef],dataTypes:Array[org.apache.spark.sql.types.DataType]):Array[AnyRef]", "kind" : "def"}, {"label" : "wrap", "tail" : "(row: InternalRow, wrappers: Array[(Any) ⇒ Any], cache: Array[AnyRef], dataTypes: Array[DataType]): Array[AnyRef]", "member" : "org.apache.spark.sql.hive.HiveInspectors.wrap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#wrap(row:org.apache.spark.sql.catalyst.InternalRow,wrappers:Array[Any=>Any],cache:Array[AnyRef],dataTypes:Array[org.apache.spark.sql.types.DataType]):Array[AnyRef]", "kind" : "def"}, {"label" : "wrap", "tail" : "(a: Any, oi: ObjectInspector, dataType: DataType): AnyRef", "member" : "org.apache.spark.sql.hive.HiveInspectors.wrap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#wrap(a:Any,oi:org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector,dataType:org.apache.spark.sql.types.DataType):AnyRef", "kind" : "def"}, {"label" : "unwrapperFor", "tail" : "(field: StructField): (Any, InternalRow, Int) ⇒ Unit", "member" : "org.apache.spark.sql.hive.HiveInspectors.unwrapperFor", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#unwrapperFor(field:org.apache.hadoop.hive.serde2.objectinspector.StructField):(Any,org.apache.spark.sql.catalyst.InternalRow,Int)=>Unit", "kind" : "def"}, {"label" : "unwrapperFor", "tail" : "(objectInspector: ObjectInspector): (Any) ⇒ Any", "member" : "org.apache.spark.sql.hive.HiveInspectors.unwrapperFor", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#unwrapperFor(objectInspector:org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector):Any=>Any", "kind" : "def"}, {"label" : "wrapperFor", "tail" : "(oi: ObjectInspector, dataType: DataType): (Any) ⇒ Any", "member" : "org.apache.spark.sql.hive.HiveInspectors.wrapperFor", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#wrapperFor(oi:org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector,dataType:org.apache.spark.sql.types.DataType):Any=>Any", "kind" : "def"}, {"label" : "javaTypeToDataType", "tail" : "(clz: Type): DataType", "member" : "org.apache.spark.sql.hive.HiveInspectors.javaTypeToDataType", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#javaTypeToDataType(clz:java.lang.reflect.Type):org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/execution\/HiveOutputWriter.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.hive.execution.HiveScriptIOSchema", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html", "members_object" : [{"label" : "typeInfoConversions", "tail" : "", "member" : "org.apache.spark.sql.hive.HiveInspectors.typeInfoConversions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#typeInfoConversionsextendsAnyRef", "kind" : "implicit class"}, {"label" : "recordWriter", "tail" : "(ioschema: ScriptTransformationIOSchema, outputStream: OutputStream, conf: Configuration): Option[RecordWriter]", "member" : "org.apache.spark.sql.hive.execution.HiveScriptIOSchema.recordWriter", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#recordWriter(ioschema:org.apache.spark.sql.execution.ScriptTransformationIOSchema,outputStream:java.io.OutputStream,conf:org.apache.hadoop.conf.Configuration):Option[org.apache.hadoop.hive.ql.exec.RecordWriter]", "kind" : "def"}, {"label" : "recordReader", "tail" : "(ioschema: ScriptTransformationIOSchema, inputStream: InputStream, conf: Configuration): Option[RecordReader]", "member" : "org.apache.spark.sql.hive.execution.HiveScriptIOSchema.recordReader", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#recordReader(ioschema:org.apache.spark.sql.execution.ScriptTransformationIOSchema,inputStream:java.io.InputStream,conf:org.apache.hadoop.conf.Configuration):Option[org.apache.hadoop.hive.ql.exec.RecordReader]", "kind" : "def"}, {"label" : "initSerDe", "tail" : "(serdeClassName: String, columns: Seq[String], columnTypes: Seq[DataType], serdeProps: Seq[(String, String)]): AbstractSerDe", "member" : "org.apache.spark.sql.hive.execution.HiveScriptIOSchema.initSerDe", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#initSerDe(serdeClassName:String,columns:Seq[String],columnTypes:Seq[org.apache.spark.sql.types.DataType],serdeProps:Seq[(String,String)]):org.apache.hadoop.hive.serde2.AbstractSerDe", "kind" : "def"}, {"label" : "initOutputSerDe", "tail" : "(ioschema: ScriptTransformationIOSchema, output: Seq[Attribute]): Option[(AbstractSerDe, StructObjectInspector)]", "member" : "org.apache.spark.sql.hive.execution.HiveScriptIOSchema.initOutputSerDe", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#initOutputSerDe(ioschema:org.apache.spark.sql.execution.ScriptTransformationIOSchema,output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):Option[(org.apache.hadoop.hive.serde2.AbstractSerDe,org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector)]", "kind" : "def"}, {"label" : "initInputSerDe", "tail" : "(ioschema: ScriptTransformationIOSchema, input: Seq[Expression]): Option[(AbstractSerDe, StructObjectInspector)]", "member" : "org.apache.spark.sql.hive.execution.HiveScriptIOSchema.initInputSerDe", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#initInputSerDe(ioschema:org.apache.spark.sql.execution.ScriptTransformationIOSchema,input:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):Option[(org.apache.hadoop.hive.serde2.AbstractSerDe,org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector)]", "kind" : "def"}, {"label" : "inspectorToDataType", "tail" : "(inspector: ObjectInspector): DataType", "member" : "org.apache.spark.sql.hive.HiveInspectors.inspectorToDataType", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#inspectorToDataType(inspector:org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector):org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "toInspector", "tail" : "(expr: Expression): ObjectInspector", "member" : "org.apache.spark.sql.hive.HiveInspectors.toInspector", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#toInspector(expr:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector", "kind" : "def"}, {"label" : "toInspector", "tail" : "(dataType: DataType): ObjectInspector", "member" : "org.apache.spark.sql.hive.HiveInspectors.toInspector", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#toInspector(dataType:org.apache.spark.sql.types.DataType):org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector", "kind" : "def"}, {"label" : "wrap", "tail" : "(row: Seq[Any], wrappers: Array[(Any) ⇒ Any], cache: Array[AnyRef], dataTypes: Array[DataType]): Array[AnyRef]", "member" : "org.apache.spark.sql.hive.HiveInspectors.wrap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#wrap(row:Seq[Any],wrappers:Array[Any=>Any],cache:Array[AnyRef],dataTypes:Array[org.apache.spark.sql.types.DataType]):Array[AnyRef]", "kind" : "def"}, {"label" : "wrap", "tail" : "(row: InternalRow, wrappers: Array[(Any) ⇒ Any], cache: Array[AnyRef], dataTypes: Array[DataType]): Array[AnyRef]", "member" : "org.apache.spark.sql.hive.HiveInspectors.wrap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#wrap(row:org.apache.spark.sql.catalyst.InternalRow,wrappers:Array[Any=>Any],cache:Array[AnyRef],dataTypes:Array[org.apache.spark.sql.types.DataType]):Array[AnyRef]", "kind" : "def"}, {"label" : "wrap", "tail" : "(a: Any, oi: ObjectInspector, dataType: DataType): AnyRef", "member" : "org.apache.spark.sql.hive.HiveInspectors.wrap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#wrap(a:Any,oi:org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector,dataType:org.apache.spark.sql.types.DataType):AnyRef", "kind" : "def"}, {"label" : "unwrapperFor", "tail" : "(field: StructField): (Any, InternalRow, Int) ⇒ Unit", "member" : "org.apache.spark.sql.hive.HiveInspectors.unwrapperFor", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#unwrapperFor(field:org.apache.hadoop.hive.serde2.objectinspector.StructField):(Any,org.apache.spark.sql.catalyst.InternalRow,Int)=>Unit", "kind" : "def"}, {"label" : "unwrapperFor", "tail" : "(objectInspector: ObjectInspector): (Any) ⇒ Any", "member" : "org.apache.spark.sql.hive.HiveInspectors.unwrapperFor", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#unwrapperFor(objectInspector:org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector):Any=>Any", "kind" : "def"}, {"label" : "wrapperFor", "tail" : "(oi: ObjectInspector, dataType: DataType): (Any) ⇒ Any", "member" : "org.apache.spark.sql.hive.HiveInspectors.wrapperFor", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#wrapperFor(oi:org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector,dataType:org.apache.spark.sql.types.DataType):Any=>Any", "kind" : "def"}, {"label" : "javaTypeToDataType", "tail" : "(clz: Type): DataType", "member" : "org.apache.spark.sql.hive.HiveInspectors.javaTypeToDataType", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#javaTypeToDataType(clz:java.lang.reflect.Type):org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/HiveScriptIOSchema$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand", "shortDescription" : "Command for writing the results of query to file system.", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: LogicalPlan): InsertIntoHiveDirCommand", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand", "kind" : "def"}, {"label" : "run", "tail" : "(sparkSession: SparkSession, child: SparkPlan): Seq[Row]", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand.run", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#run(sparkSession:org.apache.spark.sql.SparkSession,child:org.apache.spark.sql.execution.SparkPlan):Seq[org.apache.spark.sql.Row]", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand#<init>", "error" : "unsupported entity"}, {"label" : "outputColumnNames", "tail" : ": Seq[String]", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand.outputColumnNames", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#outputColumnNames:Seq[String]", "kind" : "val"}, {"label" : "overwrite", "tail" : ": Boolean", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand.overwrite", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#overwrite:Boolean", "kind" : "val"}, {"label" : "query", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand.query", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#query:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "val"}, {"label" : "storage", "tail" : ": CatalogStorageFormat", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand.storage", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#storage:org.apache.spark.sql.catalyst.catalog.CatalogStorageFormat", "kind" : "val"}, {"label" : "isLocal", "tail" : ": Boolean", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveDirCommand.isLocal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#isLocal:Boolean", "kind" : "val"}, {"label" : "deleteExternalTmpPath", "tail" : "(hadoopConf: Configuration): Unit", "member" : "org.apache.spark.sql.hive.execution.SaveAsHiveFile.deleteExternalTmpPath", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#deleteExternalTmpPath(hadoopConf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "getExternalTmpPath", "tail" : "(sparkSession: SparkSession, hadoopConf: Configuration, path: Path): Path", "member" : "org.apache.spark.sql.hive.execution.SaveAsHiveFile.getExternalTmpPath", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#getExternalTmpPath(sparkSession:org.apache.spark.sql.SparkSession,hadoopConf:org.apache.hadoop.conf.Configuration,path:org.apache.hadoop.fs.Path):org.apache.hadoop.fs.Path", "kind" : "def"}, {"label" : "saveAsHiveFile", "tail" : "(sparkSession: SparkSession, plan: SparkPlan, hadoopConf: Configuration, fileSinkConf: ShimFileSinkDesc, outputLocation: String, customPartitionLocations: Map[TablePartitionSpec, String], partitionAttributes: Seq[Attribute]): Set[String]", "member" : "org.apache.spark.sql.hive.execution.SaveAsHiveFile.saveAsHiveFile", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#saveAsHiveFile(sparkSession:org.apache.spark.sql.SparkSession,plan:org.apache.spark.sql.execution.SparkPlan,hadoopConf:org.apache.hadoop.conf.Configuration,fileSinkConf:org.apache.spark.sql.hive.HiveShim.ShimFileSinkDesc,outputLocation:String,customPartitionLocations:Map[org.apache.spark.sql.catalyst.catalog.CatalogTypes.TablePartitionSpec,String],partitionAttributes:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):Set[String]", "kind" : "def"}, {"label" : "createdTempDir", "tail" : ": Option[Path]", "member" : "org.apache.spark.sql.hive.execution.SaveAsHiveFile.createdTempDir", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#createdTempDir:Option[org.apache.hadoop.fs.Path]", "kind" : "val"}, {"label" : "basicWriteJobStatsTracker", "tail" : "(hadoopConf: Configuration): BasicWriteJobStatsTracker", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.basicWriteJobStatsTracker", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#basicWriteJobStatsTracker(hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.BasicWriteJobStatsTracker", "kind" : "def"}, {"label" : "metrics", "tail" : ": Map[String, SQLMetric]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.metrics", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#metrics:Map[String,org.apache.spark.sql.execution.metric.SQLMetric]", "kind" : "lazy val"}, {"label" : "outputColumns", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.outputColumns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#outputColumns:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "child", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.child", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "final def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (LogicalPlan) ⇒ LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.nodePatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "stats", "tail" : "(): Statistics", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.stats", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#stats:org.apache.spark.sql.catalyst.plans.logical.Statistics", "kind" : "def"}, {"label" : "producedAttributes", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.producedAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#producedAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "output", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.output", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "sameOutput", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.sameOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#sameOutput(other:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "outputOrdering", "tail" : "(): Seq[SortOrder]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.outputOrdering", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#outputOrdering:Seq[org.apache.spark.sql.catalyst.expressions.SortOrder]", "kind" : "def"}, {"label" : "refresh", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.refresh", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#refresh():Unit", "kind" : "def"}, {"label" : "resolveQuoted", "tail" : "(name: String, resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveQuoted", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveQuoted(name:String,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolve(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolveChildren", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveChildren(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(schema: StructType, resolver: Resolver): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolve(schema:org.apache.spark.sql.types.StructType,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.childrenResolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "statePrefix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.statePrefix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#statePrefix:String", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "maxRowsPerPartition", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRowsPerPartition", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#maxRowsPerPartition:Option[Long]", "kind" : "def"}, {"label" : "maxRows", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRows", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#maxRows:Option[Long]", "kind" : "def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "isStreaming", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.isStreaming", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#isStreaming:Boolean", "kind" : "def"}, {"label" : "metadataOutput", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.metadataOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#metadataOutput:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#logName:String", "kind" : "def"}, {"label" : "validConstraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.validConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#validConstraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.constraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constructIsNotNullConstraints", "tail" : "(constraints: ExpressionSet, output: Seq[Attribute]): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.constructIsNotNullConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#constructIsNotNullConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet,output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "inferAdditionalConstraints", "tail" : "(constraints: ExpressionSet): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.inferAdditionalConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#inferAdditionalConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "invalidateStatsCache", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.invalidateStatsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#invalidateStatsCache():Unit", "kind" : "final def"}, {"label" : "statsCache", "tail" : ": Option[Statistics]", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.statsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#statsCache:Option[org.apache.spark.sql.catalyst.plans.logical.Statistics]", "kind" : "val"}, {"label" : "clone", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#clone():org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformAllExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformAllExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformAllExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):AnalysisHelper.this.type", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "assertNotAnalysisRule", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.assertNotAnalysisRule", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#assertNotAnalysisRule():Unit", "kind" : "def"}, {"label" : "resolveExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveExpressions", "tail" : "(r: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveExpressions(r:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "updateOuterReferencesInSubquery", "tail" : "(plan: LogicalPlan, attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.updateOuterReferencesInSubquery", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#updateOuterReferencesInSubquery(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])], skipCond: (LogicalPlan) ⇒ Boolean, canGetOutput: (LogicalPlan) ⇒ Boolean): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])],skipCond:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean,canGetOutput:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveOperatorsUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveOperatorsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveOperatorsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveOperatorsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveOperatorsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveOperatorsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperators", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperators", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#resolveOperators(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "analyzed", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.analyzed", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#analyzed:Boolean", "kind" : "def"}, {"label" : "allAttributes", "tail" : ": AttributeSeq", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.allAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#allAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSeq", "kind" : "lazy val"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.semanticHash", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#semanticHash():Int", "kind" : "final def"}, {"label" : "sameResult", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.sameResult", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#sameResult(other:PlanType):Boolean", "kind" : "final def"}, {"label" : "doCanonicalize", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.doCanonicalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#doCanonicalize():PlanType", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.canonicalized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#canonicalized:PlanType", "kind" : "final lazy val"}, {"label" : "isCanonicalizedPlan", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.isCanonicalizedPlan", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#isCanonicalizedPlan:Boolean", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[QueryPlan[_]]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.innerChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#innerChildren:Seq[org.apache.spark.sql.catalyst.plans.QueryPlan[_]]", "kind" : "def"}, {"label" : "collectWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.collectWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#collectWithSubqueries[B](f:PartialFunction[PlanType,B]):Seq[B]", "kind" : "def"}, {"label" : "transformUpWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformUpWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformUpWithSubqueries(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "subqueriesAll", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueriesAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#subqueriesAll:Seq[PlanType]", "kind" : "def"}, {"label" : "subqueries", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#subqueries:Seq[PlanType]", "kind" : "def"}, {"label" : "formattedNodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.formattedNodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#formattedNodeName:String", "kind" : "def"}, {"label" : "verboseStringWithOperatorId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseStringWithOperatorId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#verboseStringWithOperatorId():String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#verboseString(maxFields:Int):String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "printSchema", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.printSchema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#printSchema():Unit", "kind" : "def"}, {"label" : "schemaString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schemaString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#schemaString:String", "kind" : "def"}, {"label" : "schema", "tail" : ": StructType", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#schema:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"label" : "rewriteAttrs", "tail" : "(attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.rewriteAttrs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#rewriteAttrs(attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):PlanType", "kind" : "def"}, {"label" : "expressions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.expressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "final def"}, {"label" : "transformAllExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformAllExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformAllExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "mapExpressions", "tail" : "(f: (Expression) ⇒ Expression): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#mapExpressions(f:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformExpressionsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUp", "tail" : "(rule: PartialFunction[Expression, Expression]): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformExpressionsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformExpressionsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDown", "tail" : "(rule: PartialFunction[Expression, Expression]): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformExpressionsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): InsertIntoHiveDirCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "missingInput", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.missingInput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#missingInput:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "final def"}, {"label" : "references", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.references", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "inputSet", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.inputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#inputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.treePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "outputSet", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.outputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#outputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#treeString:String", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#toString():String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#nodeName:String", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (LogicalPlan) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(LogicalPlan, LogicalPlan), LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (LogicalPlan) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (LogicalPlan) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (LogicalPlan) ⇒ Boolean): Option[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: LogicalPlan): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveDirCommand.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable", "shortDescription" : "Command for writing data out to a Hive table.", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: LogicalPlan): InsertIntoHiveTable", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.hive.execution.InsertIntoHiveTable", "kind" : "def"}, {"label" : "run", "tail" : "(sparkSession: SparkSession, child: SparkPlan): Seq[Row]", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable.run", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#run(sparkSession:org.apache.spark.sql.SparkSession,child:org.apache.spark.sql.execution.SparkPlan):Seq[org.apache.spark.sql.Row]", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable#<init>", "error" : "unsupported entity"}, {"label" : "outputColumnNames", "tail" : ": Seq[String]", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable.outputColumnNames", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#outputColumnNames:Seq[String]", "kind" : "val"}, {"label" : "ifPartitionNotExists", "tail" : ": Boolean", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable.ifPartitionNotExists", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#ifPartitionNotExists:Boolean", "kind" : "val"}, {"label" : "overwrite", "tail" : ": Boolean", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable.overwrite", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#overwrite:Boolean", "kind" : "val"}, {"label" : "query", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable.query", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#query:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "val"}, {"label" : "partition", "tail" : ": Map[String, Option[String]]", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable.partition", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#partition:Map[String,Option[String]]", "kind" : "val"}, {"label" : "table", "tail" : ": CatalogTable", "member" : "org.apache.spark.sql.hive.execution.InsertIntoHiveTable.table", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#table:org.apache.spark.sql.catalyst.catalog.CatalogTable", "kind" : "val"}, {"label" : "deleteExternalTmpPath", "tail" : "(hadoopConf: Configuration): Unit", "member" : "org.apache.spark.sql.hive.execution.SaveAsHiveFile.deleteExternalTmpPath", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#deleteExternalTmpPath(hadoopConf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "getExternalTmpPath", "tail" : "(sparkSession: SparkSession, hadoopConf: Configuration, path: Path): Path", "member" : "org.apache.spark.sql.hive.execution.SaveAsHiveFile.getExternalTmpPath", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#getExternalTmpPath(sparkSession:org.apache.spark.sql.SparkSession,hadoopConf:org.apache.hadoop.conf.Configuration,path:org.apache.hadoop.fs.Path):org.apache.hadoop.fs.Path", "kind" : "def"}, {"label" : "saveAsHiveFile", "tail" : "(sparkSession: SparkSession, plan: SparkPlan, hadoopConf: Configuration, fileSinkConf: ShimFileSinkDesc, outputLocation: String, customPartitionLocations: Map[TablePartitionSpec, String], partitionAttributes: Seq[Attribute]): Set[String]", "member" : "org.apache.spark.sql.hive.execution.SaveAsHiveFile.saveAsHiveFile", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#saveAsHiveFile(sparkSession:org.apache.spark.sql.SparkSession,plan:org.apache.spark.sql.execution.SparkPlan,hadoopConf:org.apache.hadoop.conf.Configuration,fileSinkConf:org.apache.spark.sql.hive.HiveShim.ShimFileSinkDesc,outputLocation:String,customPartitionLocations:Map[org.apache.spark.sql.catalyst.catalog.CatalogTypes.TablePartitionSpec,String],partitionAttributes:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):Set[String]", "kind" : "def"}, {"label" : "createdTempDir", "tail" : ": Option[Path]", "member" : "org.apache.spark.sql.hive.execution.SaveAsHiveFile.createdTempDir", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#createdTempDir:Option[org.apache.hadoop.fs.Path]", "kind" : "val"}, {"label" : "basicWriteJobStatsTracker", "tail" : "(hadoopConf: Configuration): BasicWriteJobStatsTracker", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.basicWriteJobStatsTracker", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#basicWriteJobStatsTracker(hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.BasicWriteJobStatsTracker", "kind" : "def"}, {"label" : "metrics", "tail" : ": Map[String, SQLMetric]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.metrics", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#metrics:Map[String,org.apache.spark.sql.execution.metric.SQLMetric]", "kind" : "lazy val"}, {"label" : "outputColumns", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.outputColumns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#outputColumns:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "child", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.child", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "final def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (LogicalPlan) ⇒ LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.nodePatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "stats", "tail" : "(): Statistics", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.stats", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#stats:org.apache.spark.sql.catalyst.plans.logical.Statistics", "kind" : "def"}, {"label" : "producedAttributes", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.producedAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#producedAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "output", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.output", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "sameOutput", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.sameOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#sameOutput(other:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "outputOrdering", "tail" : "(): Seq[SortOrder]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.outputOrdering", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#outputOrdering:Seq[org.apache.spark.sql.catalyst.expressions.SortOrder]", "kind" : "def"}, {"label" : "refresh", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.refresh", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#refresh():Unit", "kind" : "def"}, {"label" : "resolveQuoted", "tail" : "(name: String, resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveQuoted", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveQuoted(name:String,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolve(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolveChildren", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveChildren(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(schema: StructType, resolver: Resolver): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolve(schema:org.apache.spark.sql.types.StructType,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.childrenResolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "statePrefix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.statePrefix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#statePrefix:String", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "maxRowsPerPartition", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRowsPerPartition", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#maxRowsPerPartition:Option[Long]", "kind" : "def"}, {"label" : "maxRows", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRows", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#maxRows:Option[Long]", "kind" : "def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "isStreaming", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.isStreaming", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#isStreaming:Boolean", "kind" : "def"}, {"label" : "metadataOutput", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.metadataOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#metadataOutput:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#logName:String", "kind" : "def"}, {"label" : "validConstraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.validConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#validConstraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.constraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constructIsNotNullConstraints", "tail" : "(constraints: ExpressionSet, output: Seq[Attribute]): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.constructIsNotNullConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#constructIsNotNullConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet,output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "inferAdditionalConstraints", "tail" : "(constraints: ExpressionSet): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.inferAdditionalConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#inferAdditionalConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "invalidateStatsCache", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.invalidateStatsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#invalidateStatsCache():Unit", "kind" : "final def"}, {"label" : "statsCache", "tail" : ": Option[Statistics]", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.statsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#statsCache:Option[org.apache.spark.sql.catalyst.plans.logical.Statistics]", "kind" : "val"}, {"label" : "clone", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#clone():org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformAllExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformAllExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformAllExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):AnalysisHelper.this.type", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "assertNotAnalysisRule", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.assertNotAnalysisRule", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#assertNotAnalysisRule():Unit", "kind" : "def"}, {"label" : "resolveExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveExpressions", "tail" : "(r: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveExpressions(r:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "updateOuterReferencesInSubquery", "tail" : "(plan: LogicalPlan, attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.updateOuterReferencesInSubquery", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#updateOuterReferencesInSubquery(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])], skipCond: (LogicalPlan) ⇒ Boolean, canGetOutput: (LogicalPlan) ⇒ Boolean): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])],skipCond:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean,canGetOutput:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveOperatorsUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveOperatorsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveOperatorsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveOperatorsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveOperatorsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveOperatorsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperators", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperators", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#resolveOperators(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "analyzed", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.analyzed", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#analyzed:Boolean", "kind" : "def"}, {"label" : "allAttributes", "tail" : ": AttributeSeq", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.allAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#allAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSeq", "kind" : "lazy val"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.semanticHash", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#semanticHash():Int", "kind" : "final def"}, {"label" : "sameResult", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.sameResult", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#sameResult(other:PlanType):Boolean", "kind" : "final def"}, {"label" : "doCanonicalize", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.doCanonicalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#doCanonicalize():PlanType", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.canonicalized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#canonicalized:PlanType", "kind" : "final lazy val"}, {"label" : "isCanonicalizedPlan", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.isCanonicalizedPlan", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#isCanonicalizedPlan:Boolean", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[QueryPlan[_]]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.innerChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#innerChildren:Seq[org.apache.spark.sql.catalyst.plans.QueryPlan[_]]", "kind" : "def"}, {"label" : "collectWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.collectWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#collectWithSubqueries[B](f:PartialFunction[PlanType,B]):Seq[B]", "kind" : "def"}, {"label" : "transformUpWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformUpWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformUpWithSubqueries(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "subqueriesAll", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueriesAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#subqueriesAll:Seq[PlanType]", "kind" : "def"}, {"label" : "subqueries", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#subqueries:Seq[PlanType]", "kind" : "def"}, {"label" : "formattedNodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.formattedNodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#formattedNodeName:String", "kind" : "def"}, {"label" : "verboseStringWithOperatorId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseStringWithOperatorId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#verboseStringWithOperatorId():String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#verboseString(maxFields:Int):String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "printSchema", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.printSchema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#printSchema():Unit", "kind" : "def"}, {"label" : "schemaString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schemaString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#schemaString:String", "kind" : "def"}, {"label" : "schema", "tail" : ": StructType", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#schema:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"label" : "rewriteAttrs", "tail" : "(attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.rewriteAttrs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#rewriteAttrs(attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):PlanType", "kind" : "def"}, {"label" : "expressions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.expressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "final def"}, {"label" : "transformAllExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformAllExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformAllExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "mapExpressions", "tail" : "(f: (Expression) ⇒ Expression): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#mapExpressions(f:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformExpressionsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUp", "tail" : "(rule: PartialFunction[Expression, Expression]): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformExpressionsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformExpressionsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDown", "tail" : "(rule: PartialFunction[Expression, Expression]): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformExpressionsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): InsertIntoHiveTable.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "missingInput", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.missingInput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#missingInput:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "final def"}, {"label" : "references", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.references", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "inputSet", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.inputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#inputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.treePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "outputSet", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.outputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#outputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#treeString:String", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#toString():String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#nodeName:String", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (LogicalPlan) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(LogicalPlan, LogicalPlan), LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (LogicalPlan) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (LogicalPlan) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (LogicalPlan) ⇒ Boolean): Option[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: LogicalPlan): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/hive\/execution\/InsertIntoHiveTable.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand", "shortDescription" : "Create table and insert the query result into it.", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: LogicalPlan): OptimizedCreateHiveTableAsSelectCommand", "member" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand.withNewChildInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand", "kind" : "def"}, {"label" : "writingCommandClassName", "tail" : "(): String", "member" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand.writingCommandClassName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#writingCommandClassName:String", "kind" : "def"}, {"label" : "getWritingCommand", "tail" : "(catalog: SessionCatalog, tableDesc: CatalogTable, tableExists: Boolean): DataWritingCommand", "member" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand.getWritingCommand", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#getWritingCommand(catalog:org.apache.spark.sql.catalyst.catalog.SessionCatalog,tableDesc:org.apache.spark.sql.catalyst.catalog.CatalogTable,tableExists:Boolean):org.apache.spark.sql.execution.command.DataWritingCommand", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand#<init>", "error" : "unsupported entity"}, {"label" : "mode", "tail" : ": SaveMode", "member" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand.mode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#mode:org.apache.spark.sql.SaveMode", "kind" : "val"}, {"label" : "outputColumnNames", "tail" : ": Seq[String]", "member" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand.outputColumnNames", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#outputColumnNames:Seq[String]", "kind" : "val"}, {"label" : "query", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand.query", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#query:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "val"}, {"label" : "tableDesc", "tail" : ": CatalogTable", "member" : "org.apache.spark.sql.hive.execution.OptimizedCreateHiveTableAsSelectCommand.tableDesc", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#tableDesc:org.apache.spark.sql.catalyst.catalog.CatalogTable", "kind" : "val"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.argString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "run", "tail" : "(sparkSession: SparkSession, child: SparkPlan): Seq[Row]", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.run", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#run(sparkSession:org.apache.spark.sql.SparkSession,child:org.apache.spark.sql.execution.SparkPlan):Seq[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "tableIdentifier", "tail" : ": TableIdentifier", "member" : "org.apache.spark.sql.hive.execution.CreateHiveTableAsSelectBase.tableIdentifier", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#tableIdentifier:org.apache.spark.sql.catalyst.TableIdentifier", "kind" : "val"}, {"label" : "basicWriteJobStatsTracker", "tail" : "(hadoopConf: Configuration): BasicWriteJobStatsTracker", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.basicWriteJobStatsTracker", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#basicWriteJobStatsTracker(hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.BasicWriteJobStatsTracker", "kind" : "def"}, {"label" : "metrics", "tail" : ": Map[String, SQLMetric]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.metrics", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#metrics:Map[String,org.apache.spark.sql.execution.metric.SQLMetric]", "kind" : "lazy val"}, {"label" : "outputColumns", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.outputColumns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#outputColumns:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "child", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.execution.command.DataWritingCommand.child", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "final def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (LogicalPlan) ⇒ LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.nodePatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "stats", "tail" : "(): Statistics", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.stats", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#stats:org.apache.spark.sql.catalyst.plans.logical.Statistics", "kind" : "def"}, {"label" : "producedAttributes", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.producedAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#producedAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "output", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.Command.output", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "sameOutput", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.sameOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#sameOutput(other:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):Boolean", "kind" : "def"}, {"label" : "outputOrdering", "tail" : "(): Seq[SortOrder]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.outputOrdering", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#outputOrdering:Seq[org.apache.spark.sql.catalyst.expressions.SortOrder]", "kind" : "def"}, {"label" : "refresh", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.refresh", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#refresh():Unit", "kind" : "def"}, {"label" : "resolveQuoted", "tail" : "(name: String, resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveQuoted", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveQuoted(name:String,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolve(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolveChildren", "tail" : "(nameParts: Seq[String], resolver: Resolver): Option[NamedExpression]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveChildren(nameParts:Seq[String],resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Option[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "def"}, {"label" : "resolve", "tail" : "(schema: StructType, resolver: Resolver): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolve", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolve(schema:org.apache.spark.sql.types.StructType,resolver:org.apache.spark.sql.catalyst.analysis.Resolver):Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.childrenResolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "statePrefix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.statePrefix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#statePrefix:String", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolved", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "maxRowsPerPartition", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRowsPerPartition", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#maxRowsPerPartition:Option[Long]", "kind" : "def"}, {"label" : "maxRows", "tail" : "(): Option[Long]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.maxRows", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#maxRows:Option[Long]", "kind" : "def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "isStreaming", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.isStreaming", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#isStreaming:Boolean", "kind" : "def"}, {"label" : "metadataOutput", "tail" : "(): Seq[Attribute]", "member" : "org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.metadataOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#metadataOutput:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#logName:String", "kind" : "def"}, {"label" : "validConstraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.validConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#validConstraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constraints", "tail" : ": ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.QueryPlanConstraints.constraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "lazy val"}, {"label" : "constructIsNotNullConstraints", "tail" : "(constraints: ExpressionSet, output: Seq[Attribute]): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.constructIsNotNullConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#constructIsNotNullConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet,output:Seq[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "inferAdditionalConstraints", "tail" : "(constraints: ExpressionSet): ExpressionSet", "member" : "org.apache.spark.sql.catalyst.plans.logical.ConstraintHelper.inferAdditionalConstraints", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#inferAdditionalConstraints(constraints:org.apache.spark.sql.catalyst.expressions.ExpressionSet):org.apache.spark.sql.catalyst.expressions.ExpressionSet", "kind" : "def"}, {"label" : "invalidateStatsCache", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.invalidateStatsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#invalidateStatsCache():Unit", "kind" : "final def"}, {"label" : "statsCache", "tail" : ": Option[Statistics]", "member" : "org.apache.spark.sql.catalyst.plans.logical.statsEstimation.LogicalPlanStats.statsCache", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#statsCache:Option[org.apache.spark.sql.catalyst.plans.logical.Statistics]", "kind" : "val"}, {"label" : "clone", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.clone", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#clone():org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformAllExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformAllExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformAllExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):AnalysisHelper.this.type", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "assertNotAnalysisRule", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.assertNotAnalysisRule", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#assertNotAnalysisRule():Unit", "kind" : "def"}, {"label" : "resolveExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveExpressions", "tail" : "(r: PartialFunction[Expression, Expression]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveExpressions(r:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "updateOuterReferencesInSubquery", "tail" : "(plan: LogicalPlan, attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.updateOuterReferencesInSubquery", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#updateOuterReferencesInSubquery(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "transformUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])], skipCond: (LogicalPlan) ⇒ Boolean, canGetOutput: (LogicalPlan) ⇒ Boolean): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])],skipCond:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean,canGetOutput:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Boolean):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithNewOutput", "tail" : "(rule: PartialFunction[LogicalPlan, (LogicalPlan, Seq[(Attribute, Attribute)])]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithNewOutput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveOperatorsUpWithNewOutput(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,Seq[(org.apache.spark.sql.catalyst.expressions.Attribute,org.apache.spark.sql.catalyst.expressions.Attribute)])]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveOperatorsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveOperatorsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveOperatorsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveOperatorsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperatorsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveOperatorsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveOperators", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperators", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#resolveOperators(rule:PartialFunction[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "analyzed", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.analyzed", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#analyzed:Boolean", "kind" : "def"}, {"label" : "allAttributes", "tail" : ": AttributeSeq", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.allAttributes", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#allAttributes:org.apache.spark.sql.catalyst.expressions.AttributeSeq", "kind" : "lazy val"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.semanticHash", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#semanticHash():Int", "kind" : "final def"}, {"label" : "sameResult", "tail" : "(other: LogicalPlan): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.sameResult", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#sameResult(other:PlanType):Boolean", "kind" : "final def"}, {"label" : "doCanonicalize", "tail" : "(): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.doCanonicalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#doCanonicalize():PlanType", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.canonicalized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#canonicalized:PlanType", "kind" : "final lazy val"}, {"label" : "isCanonicalizedPlan", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.isCanonicalizedPlan", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#isCanonicalizedPlan:Boolean", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[QueryPlan[_]]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.innerChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#innerChildren:Seq[org.apache.spark.sql.catalyst.plans.QueryPlan[_]]", "kind" : "def"}, {"label" : "collectWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.collectWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#collectWithSubqueries[B](f:PartialFunction[PlanType,B]):Seq[B]", "kind" : "def"}, {"label" : "transformUpWithSubqueries", "tail" : "(f: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformUpWithSubqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformUpWithSubqueries(f:PartialFunction[PlanType,PlanType]):PlanType", "kind" : "def"}, {"label" : "subqueriesAll", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueriesAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#subqueriesAll:Seq[PlanType]", "kind" : "def"}, {"label" : "subqueries", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.subqueries", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#subqueries:Seq[PlanType]", "kind" : "def"}, {"label" : "formattedNodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.formattedNodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#formattedNodeName:String", "kind" : "def"}, {"label" : "verboseStringWithOperatorId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseStringWithOperatorId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#verboseStringWithOperatorId():String", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.verboseString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#verboseString(maxFields:Int):String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.simpleString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "printSchema", "tail" : "(): Unit", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.printSchema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#printSchema():Unit", "kind" : "def"}, {"label" : "schemaString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schemaString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#schemaString:String", "kind" : "def"}, {"label" : "schema", "tail" : ": StructType", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.schema", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#schema:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"label" : "rewriteAttrs", "tail" : "(attrMap: AttributeMap[Attribute]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.rewriteAttrs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#rewriteAttrs(attrMap:org.apache.spark.sql.catalyst.expressions.AttributeMap[org.apache.spark.sql.catalyst.expressions.Attribute]):PlanType", "kind" : "def"}, {"label" : "expressions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.expressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "final def"}, {"label" : "transformAllExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformAllExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformAllExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "mapExpressions", "tail" : "(f: (Expression) ⇒ Expression): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#mapExpressions(f:org.apache.spark.sql.catalyst.expressions.Expression=>org.apache.spark.sql.catalyst.expressions.Expression):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUpWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformExpressionsUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsUp", "tail" : "(rule: PartialFunction[Expression, Expression]): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformExpressionsUp(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDownWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformExpressionsDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsDown", "tail" : "(rule: PartialFunction[Expression, Expression]): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformExpressionsDown(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressionsWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformExpressionsWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "transformExpressions", "tail" : "(rule: PartialFunction[Expression, Expression]): OptimizedCreateHiveTableAsSelectCommand.this.type", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressions", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformExpressions(rule:PartialFunction[org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression]):QueryPlan.this.type", "kind" : "def"}, {"label" : "missingInput", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.missingInput", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#missingInput:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "final def"}, {"label" : "references", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.references", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "inputSet", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.inputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#inputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.treePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "outputSet", "tail" : ": AttributeSet", "member" : "org.apache.spark.sql.catalyst.plans.QueryPlan.outputSet", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#outputSet:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "lazy val"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#treeString:String", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toString", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#toString():String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#nodeName:String", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (LogicalPlan) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(LogicalPlan, LogicalPlan), LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[LogicalPlan, LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[LogicalPlan]): LogicalPlan", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[LogicalPlan, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (LogicalPlan) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (LogicalPlan) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (LogicalPlan) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (LogicalPlan) ⇒ Boolean): Option[LogicalPlan]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: LogicalPlan): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/hive\/execution\/OptimizedCreateHiveTableAsSelectCommand.html", "kind" : "case class"}], "org.apache.spark.sql.hive" : [{"name" : "org.apache.spark.sql.hive.DetermineTableStats", "shortDescription" : "", "members_class" : [{"label" : "apply", "tail" : "(plan: LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.hive.DetermineTableStats.apply", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#apply(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.DetermineTableStats#<init>", "error" : "unsupported entity"}, {"label" : "ruleName", "tail" : ": String", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleName", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#ruleName:String", "kind" : "val"}, {"label" : "ruleId", "tail" : ": RuleId", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleId", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#ruleId:org.apache.spark.sql.catalyst.rules.RuleId", "kind" : "lazy val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#logName:String", "kind" : "def"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/DetermineTableStats.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.hive.HiveAnalysis", "shortDescription" : "Replaces generic operations with specific variants that are designed to work with Hive.", "object" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html", "members_object" : [{"label" : "apply", "tail" : "(plan: LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.hive.HiveAnalysis.apply", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#apply(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "ruleName", "tail" : ": String", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleName", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#ruleName:String", "kind" : "val"}, {"label" : "ruleId", "tail" : ": RuleId", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleId", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#ruleId:org.apache.spark.sql.catalyst.rules.RuleId", "kind" : "lazy val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#logName:String", "kind" : "def"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveAnalysis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.hive.HiveContext", "shortDescription" : "An instance of the Spark SQL execution engine that integrates with data stored in Hive.", "members_class" : [{"label" : "refreshTable", "tail" : "(tableName: String): Unit", "member" : "org.apache.spark.sql.hive.HiveContext.refreshTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#refreshTable(tableName:String):Unit", "kind" : "def"}, {"label" : "newSession", "tail" : "(): HiveContext", "member" : "org.apache.spark.sql.hive.HiveContext.newSession", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#newSession():org.apache.spark.sql.hive.HiveContext", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.HiveContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.sql.hive.HiveContext#<init>", "error" : "unsupported entity"}, {"label" : "jdbc", "tail" : "(url: String, table: String, theParts: Array[String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jdbc", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jdbc(url:String,table:String,theParts:Array[String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jdbc", "tail" : "(url: String, table: String, columnName: String, lowerBound: Long, upperBound: Long, numPartitions: Int): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jdbc", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jdbc(url:String,table:String,columnName:String,lowerBound:Long,upperBound:Long,numPartitions:Int):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jdbc", "tail" : "(url: String, table: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jdbc", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jdbc(url:String,table:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "load", "tail" : "(source: String, schema: StructType, options: Map[String, String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.load", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#load(source:String,schema:org.apache.spark.sql.types.StructType,options:Map[String,String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "load", "tail" : "(source: String, schema: StructType, options: Map[String, String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.load", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#load(source:String,schema:org.apache.spark.sql.types.StructType,options:java.util.Map[String,String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "load", "tail" : "(source: String, options: Map[String, String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.load", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#load(source:String,options:Map[String,String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "load", "tail" : "(source: String, options: Map[String, String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.load", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#load(source:String,options:java.util.Map[String,String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "load", "tail" : "(path: String, source: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.load", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#load(path:String,source:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "load", "tail" : "(path: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.load", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#load(path:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonRDD", "tail" : "(json: JavaRDD[String], samplingRatio: Double): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonRDD", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonRDD(json:org.apache.spark.api.java.JavaRDD[String],samplingRatio:Double):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonRDD", "tail" : "(json: RDD[String], samplingRatio: Double): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonRDD", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonRDD(json:org.apache.spark.rdd.RDD[String],samplingRatio:Double):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonRDD", "tail" : "(json: JavaRDD[String], schema: StructType): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonRDD", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonRDD(json:org.apache.spark.api.java.JavaRDD[String],schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonRDD", "tail" : "(json: RDD[String], schema: StructType): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonRDD", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonRDD(json:org.apache.spark.rdd.RDD[String],schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonRDD", "tail" : "(json: JavaRDD[String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonRDD", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonRDD(json:org.apache.spark.api.java.JavaRDD[String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonRDD", "tail" : "(json: RDD[String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonRDD", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonRDD(json:org.apache.spark.rdd.RDD[String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonFile", "tail" : "(path: String, samplingRatio: Double): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonFile", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonFile(path:String,samplingRatio:Double):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonFile", "tail" : "(path: String, schema: StructType): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonFile", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonFile(path:String,schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "jsonFile", "tail" : "(path: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.jsonFile", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#jsonFile(path:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "parquetFile", "tail" : "(paths: String*): DataFrame", "member" : "org.apache.spark.sql.SQLContext.parquetFile", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#parquetFile(paths:String*):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "applySchema", "tail" : "(rdd: JavaRDD[_], beanClass: Class[_]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.applySchema", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#applySchema(rdd:org.apache.spark.api.java.JavaRDD[_],beanClass:Class[_]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "applySchema", "tail" : "(rdd: RDD[_], beanClass: Class[_]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.applySchema", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#applySchema(rdd:org.apache.spark.rdd.RDD[_],beanClass:Class[_]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "applySchema", "tail" : "(rowRDD: JavaRDD[Row], schema: StructType): DataFrame", "member" : "org.apache.spark.sql.SQLContext.applySchema", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#applySchema(rowRDD:org.apache.spark.api.java.JavaRDD[org.apache.spark.sql.Row],schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "applySchema", "tail" : "(rowRDD: RDD[Row], schema: StructType): DataFrame", "member" : "org.apache.spark.sql.SQLContext.applySchema", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#applySchema(rowRDD:org.apache.spark.rdd.RDD[org.apache.spark.sql.Row],schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "tableNames", "tail" : "(databaseName: String): Array[String]", "member" : "org.apache.spark.sql.SQLContext.tableNames", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#tableNames(databaseName:String):Array[String]", "kind" : "def"}, {"label" : "tableNames", "tail" : "(): Array[String]", "member" : "org.apache.spark.sql.SQLContext.tableNames", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#tableNames():Array[String]", "kind" : "def"}, {"label" : "streams", "tail" : "(): StreamingQueryManager", "member" : "org.apache.spark.sql.SQLContext.streams", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#streams:org.apache.spark.sql.streaming.StreamingQueryManager", "kind" : "def"}, {"label" : "tables", "tail" : "(databaseName: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.tables", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#tables(databaseName:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "tables", "tail" : "(): DataFrame", "member" : "org.apache.spark.sql.SQLContext.tables", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#tables():org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "table", "tail" : "(tableName: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.table", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#table(tableName:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "sql", "tail" : "(sqlText: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.sql", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#sql(sqlText:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "range", "tail" : "(start: Long, end: Long, step: Long, numPartitions: Int): DataFrame", "member" : "org.apache.spark.sql.SQLContext.range", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#range(start:Long,end:Long,step:Long,numPartitions:Int):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "range", "tail" : "(start: Long, end: Long, step: Long): DataFrame", "member" : "org.apache.spark.sql.SQLContext.range", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#range(start:Long,end:Long,step:Long):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "range", "tail" : "(start: Long, end: Long): DataFrame", "member" : "org.apache.spark.sql.SQLContext.range", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#range(start:Long,end:Long):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "range", "tail" : "(end: Long): DataFrame", "member" : "org.apache.spark.sql.SQLContext.range", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#range(end:Long):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "dropTempTable", "tail" : "(tableName: String): Unit", "member" : "org.apache.spark.sql.SQLContext.dropTempTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#dropTempTable(tableName:String):Unit", "kind" : "def"}, {"label" : "createExternalTable", "tail" : "(tableName: String, source: String, schema: StructType, options: Map[String, String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createExternalTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createExternalTable(tableName:String,source:String,schema:org.apache.spark.sql.types.StructType,options:Map[String,String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createExternalTable", "tail" : "(tableName: String, source: String, schema: StructType, options: Map[String, String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createExternalTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createExternalTable(tableName:String,source:String,schema:org.apache.spark.sql.types.StructType,options:java.util.Map[String,String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createExternalTable", "tail" : "(tableName: String, source: String, options: Map[String, String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createExternalTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createExternalTable(tableName:String,source:String,options:Map[String,String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createExternalTable", "tail" : "(tableName: String, source: String, options: Map[String, String]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createExternalTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createExternalTable(tableName:String,source:String,options:java.util.Map[String,String]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createExternalTable", "tail" : "(tableName: String, path: String, source: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createExternalTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createExternalTable(tableName:String,path:String,source:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createExternalTable", "tail" : "(tableName: String, path: String): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createExternalTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createExternalTable(tableName:String,path:String):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "readStream", "tail" : "(): DataStreamReader", "member" : "org.apache.spark.sql.SQLContext.readStream", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#readStream:org.apache.spark.sql.streaming.DataStreamReader", "kind" : "def"}, {"label" : "read", "tail" : "(): DataFrameReader", "member" : "org.apache.spark.sql.SQLContext.read", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#read:org.apache.spark.sql.DataFrameReader", "kind" : "def"}, {"label" : "createDataFrame", "tail" : "(data: List[_], beanClass: Class[_]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataFrame(data:java.util.List[_],beanClass:Class[_]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createDataFrame", "tail" : "(rdd: JavaRDD[_], beanClass: Class[_]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataFrame(rdd:org.apache.spark.api.java.JavaRDD[_],beanClass:Class[_]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createDataFrame", "tail" : "(rdd: RDD[_], beanClass: Class[_]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataFrame(rdd:org.apache.spark.rdd.RDD[_],beanClass:Class[_]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createDataFrame", "tail" : "(rows: List[Row], schema: StructType): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataFrame(rows:java.util.List[org.apache.spark.sql.Row],schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createDataFrame", "tail" : "(rowRDD: JavaRDD[Row], schema: StructType): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataFrame(rowRDD:org.apache.spark.api.java.JavaRDD[org.apache.spark.sql.Row],schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createDataset", "tail" : "(data: List[T])(arg0: Encoder[T]): Dataset[T]", "member" : "org.apache.spark.sql.SQLContext.createDataset", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataset[T](data:java.util.List[T])(implicitevidence$5:org.apache.spark.sql.Encoder[T]):org.apache.spark.sql.Dataset[T]", "kind" : "def"}, {"label" : "createDataset", "tail" : "(data: RDD[T])(arg0: Encoder[T]): Dataset[T]", "member" : "org.apache.spark.sql.SQLContext.createDataset", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataset[T](data:org.apache.spark.rdd.RDD[T])(implicitevidence$4:org.apache.spark.sql.Encoder[T]):org.apache.spark.sql.Dataset[T]", "kind" : "def"}, {"label" : "createDataset", "tail" : "(data: Seq[T])(arg0: Encoder[T]): Dataset[T]", "member" : "org.apache.spark.sql.SQLContext.createDataset", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataset[T](data:Seq[T])(implicitevidence$3:org.apache.spark.sql.Encoder[T]):org.apache.spark.sql.Dataset[T]", "kind" : "def"}, {"label" : "createDataFrame", "tail" : "(rowRDD: RDD[Row], schema: StructType): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataFrame(rowRDD:org.apache.spark.rdd.RDD[org.apache.spark.sql.Row],schema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "baseRelationToDataFrame", "tail" : "(baseRelation: BaseRelation): DataFrame", "member" : "org.apache.spark.sql.SQLContext.baseRelationToDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#baseRelationToDataFrame(baseRelation:org.apache.spark.sql.sources.BaseRelation):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createDataFrame", "tail" : "(data: Seq[A])(arg0: scala.reflect.api.JavaUniverse.TypeTag[A]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataFrame[A<:Product](data:Seq[A])(implicitevidence$2:reflect.runtime.universe.TypeTag[A]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "createDataFrame", "tail" : "(rdd: RDD[A])(arg0: scala.reflect.api.JavaUniverse.TypeTag[A]): DataFrame", "member" : "org.apache.spark.sql.SQLContext.createDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#createDataFrame[A<:Product](rdd:org.apache.spark.rdd.RDD[A])(implicitevidence$1:reflect.runtime.universe.TypeTag[A]):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "clearCache", "tail" : "(): Unit", "member" : "org.apache.spark.sql.SQLContext.clearCache", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#clearCache():Unit", "kind" : "def"}, {"label" : "uncacheTable", "tail" : "(tableName: String): Unit", "member" : "org.apache.spark.sql.SQLContext.uncacheTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#uncacheTable(tableName:String):Unit", "kind" : "def"}, {"label" : "cacheTable", "tail" : "(tableName: String): Unit", "member" : "org.apache.spark.sql.SQLContext.cacheTable", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#cacheTable(tableName:String):Unit", "kind" : "def"}, {"label" : "isCached", "tail" : "(tableName: String): Boolean", "member" : "org.apache.spark.sql.SQLContext.isCached", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#isCached(tableName:String):Boolean", "kind" : "def"}, {"label" : "udf", "tail" : "(): UDFRegistration", "member" : "org.apache.spark.sql.SQLContext.udf", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#udf:org.apache.spark.sql.UDFRegistration", "kind" : "def"}, {"label" : "emptyDataFrame", "tail" : "(): DataFrame", "member" : "org.apache.spark.sql.SQLContext.emptyDataFrame", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#emptyDataFrame:org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "experimental", "tail" : "(): ExperimentalMethods", "member" : "org.apache.spark.sql.SQLContext.experimental", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#experimental:org.apache.spark.sql.ExperimentalMethods", "kind" : "def"}, {"label" : "getAllConfs", "tail" : "(): Map[String, String]", "member" : "org.apache.spark.sql.SQLContext.getAllConfs", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#getAllConfs:scala.collection.immutable.Map[String,String]", "kind" : "def"}, {"label" : "getConf", "tail" : "(key: String, defaultValue: String): String", "member" : "org.apache.spark.sql.SQLContext.getConf", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#getConf(key:String,defaultValue:String):String", "kind" : "def"}, {"label" : "getConf", "tail" : "(key: String): String", "member" : "org.apache.spark.sql.SQLContext.getConf", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#getConf(key:String):String", "kind" : "def"}, {"label" : "setConf", "tail" : "(key: String, value: String): Unit", "member" : "org.apache.spark.sql.SQLContext.setConf", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#setConf(key:String,value:String):Unit", "kind" : "def"}, {"label" : "setConf", "tail" : "(props: Properties): Unit", "member" : "org.apache.spark.sql.SQLContext.setConf", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#setConf(props:java.util.Properties):Unit", "kind" : "def"}, {"label" : "listenerManager", "tail" : "(): ExecutionListenerManager", "member" : "org.apache.spark.sql.SQLContext.listenerManager", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#listenerManager:org.apache.spark.sql.util.ExecutionListenerManager", "kind" : "def"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.sql.SQLContext.sparkContext", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "sparkSession", "tail" : ": SparkSession", "member" : "org.apache.spark.sql.SQLContext.sparkSession", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#sparkSession:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/HiveContext.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.hive.HiveExternalCatalog", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html", "members_object" : [{"label" : "EMPTY_DATA_SCHEMA", "tail" : ": StructType", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.EMPTY_DATA_SCHEMA", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#EMPTY_DATA_SCHEMA:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "HIVE_GENERATED_STORAGE_PROPERTIES", "tail" : ": Set[String]", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.HIVE_GENERATED_STORAGE_PROPERTIES", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#HIVE_GENERATED_STORAGE_PROPERTIES:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "HIVE_GENERATED_TABLE_PROPERTIES", "tail" : ": Set[String]", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.HIVE_GENERATED_TABLE_PROPERTIES", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#HIVE_GENERATED_TABLE_PROPERTIES:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "CREATED_SPARK_VERSION", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.CREATED_SPARK_VERSION", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#CREATED_SPARK_VERSION:String", "kind" : "val"}, {"label" : "TABLE_PARTITION_PROVIDER_FILESYSTEM", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.TABLE_PARTITION_PROVIDER_FILESYSTEM", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#TABLE_PARTITION_PROVIDER_FILESYSTEM:String", "kind" : "val"}, {"label" : "TABLE_PARTITION_PROVIDER_CATALOG", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.TABLE_PARTITION_PROVIDER_CATALOG", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#TABLE_PARTITION_PROVIDER_CATALOG:String", "kind" : "val"}, {"label" : "TABLE_PARTITION_PROVIDER", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.TABLE_PARTITION_PROVIDER", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#TABLE_PARTITION_PROVIDER:String", "kind" : "val"}, {"label" : "STATISTICS_COL_STATS_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.STATISTICS_COL_STATS_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#STATISTICS_COL_STATS_PREFIX:String", "kind" : "val"}, {"label" : "STATISTICS_NUM_ROWS", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.STATISTICS_NUM_ROWS", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#STATISTICS_NUM_ROWS:String", "kind" : "val"}, {"label" : "STATISTICS_TOTAL_SIZE", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.STATISTICS_TOTAL_SIZE", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#STATISTICS_TOTAL_SIZE:String", "kind" : "val"}, {"label" : "STATISTICS_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.STATISTICS_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#STATISTICS_PREFIX:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_SORTCOL_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_SORTCOL_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_SORTCOL_PREFIX:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_BUCKETCOL_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_BUCKETCOL_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_BUCKETCOL_PREFIX:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_PARTCOL_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_PARTCOL_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_PARTCOL_PREFIX:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_PART_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_PART_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_PART_PREFIX:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_NUMBUCKETCOLS", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_NUMBUCKETCOLS", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_NUMBUCKETCOLS:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_NUMBUCKETS", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_NUMBUCKETS", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_NUMBUCKETS:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_NUMSORTCOLS", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_NUMSORTCOLS", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_NUMSORTCOLS:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_NUMPARTCOLS", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_NUMPARTCOLS", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_NUMPARTCOLS:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA_PREFIX:String", "kind" : "val"}, {"label" : "DATASOURCE_SCHEMA", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_SCHEMA", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_SCHEMA:String", "kind" : "val"}, {"label" : "DATASOURCE_PROVIDER", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_PROVIDER", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_PROVIDER:String", "kind" : "val"}, {"label" : "DATASOURCE_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.DATASOURCE_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#DATASOURCE_PREFIX:String", "kind" : "val"}, {"label" : "SPARK_SQL_PREFIX", "tail" : ": String", "member" : "org.apache.spark.sql.hive.HiveExternalCatalog.SPARK_SQL_PREFIX", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#SPARK_SQL_PREFIX:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveExternalCatalog$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.hive.HiveSessionResourceLoader", "shortDescription" : "", "members_class" : [{"label" : "addJar", "tail" : "(path: String): Unit", "member" : "org.apache.spark.sql.hive.HiveSessionResourceLoader.addJar", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#addJar(path:String):Unit", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.HiveSessionResourceLoader#<init>", "error" : "unsupported entity"}, {"label" : "resolveJars", "tail" : "(path: URI): Seq[String]", "member" : "org.apache.spark.sql.internal.SessionResourceLoader.resolveJars", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#resolveJars(path:java.net.URI):Seq[String]", "kind" : "def"}, {"label" : "loadResource", "tail" : "(resource: FunctionResource): Unit", "member" : "org.apache.spark.sql.internal.SessionResourceLoader.loadResource", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#loadResource(resource:org.apache.spark.sql.catalyst.catalog.FunctionResource):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/HiveSessionResourceLoader.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.hive.HiveSessionStateBuilder", "shortDescription" : "Builder that produces a Hive-aware SessionState.", "members_class" : [{"label" : "newBuilder", "tail" : "(): NewBuilder", "member" : "org.apache.spark.sql.hive.HiveSessionStateBuilder.newBuilder", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#newBuilder:HiveSessionStateBuilder.this.NewBuilder", "kind" : "def"}, {"label" : "planner", "tail" : "(): SparkPlanner", "member" : "org.apache.spark.sql.hive.HiveSessionStateBuilder.planner", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#planner:org.apache.spark.sql.execution.SparkPlanner", "kind" : "def"}, {"label" : "customEarlyScanPushDownRules", "tail" : "(): Seq[Rule[LogicalPlan]]", "member" : "org.apache.spark.sql.hive.HiveSessionStateBuilder.customEarlyScanPushDownRules", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#customEarlyScanPushDownRules:Seq[org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]]", "kind" : "def"}, {"label" : "analyzer", "tail" : "(): Analyzer", "member" : "org.apache.spark.sql.hive.HiveSessionStateBuilder.analyzer", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#analyzer:org.apache.spark.sql.catalyst.analysis.Analyzer", "kind" : "def"}, {"label" : "catalog", "tail" : ": HiveSessionCatalog", "member" : "org.apache.spark.sql.hive.HiveSessionStateBuilder.catalog", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#catalog:org.apache.spark.sql.hive.HiveSessionCatalog", "kind" : "lazy val"}, {"label" : "resourceLoader", "tail" : ": HiveSessionResourceLoader", "member" : "org.apache.spark.sql.hive.HiveSessionStateBuilder.resourceLoader", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#resourceLoader:org.apache.spark.sql.hive.HiveSessionResourceLoader", "kind" : "lazy val"}, {"member" : "org.apache.spark.sql.hive.HiveSessionStateBuilder#<init>", "error" : "unsupported entity"}, {"label" : "build", "tail" : "(): SessionState", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.build", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#build():org.apache.spark.sql.internal.SessionState", "kind" : "def"}, {"label" : "createClone", "tail" : "(): (SparkSession, SessionState) ⇒ SessionState", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.createClone", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#createClone:(org.apache.spark.sql.SparkSession,org.apache.spark.sql.internal.SessionState)=>org.apache.spark.sql.internal.SessionState", "kind" : "def"}, {"label" : "listenerManager", "tail" : "(): ExecutionListenerManager", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.listenerManager", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#listenerManager:org.apache.spark.sql.util.ExecutionListenerManager", "kind" : "def"}, {"label" : "streamingQueryManager", "tail" : "(): StreamingQueryManager", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.streamingQueryManager", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#streamingQueryManager:org.apache.spark.sql.streaming.StreamingQueryManager", "kind" : "def"}, {"label" : "createQueryExecution", "tail" : "(): (LogicalPlan, execution.CommandExecutionMode.Value) ⇒ QueryExecution", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.createQueryExecution", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#createQueryExecution:(org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,org.apache.spark.sql.execution.CommandExecutionMode.Value)=>org.apache.spark.sql.execution.QueryExecution", "kind" : "def"}, {"label" : "queryStagePrepRules", "tail" : "(): Seq[Rule[SparkPlan]]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.queryStagePrepRules", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#queryStagePrepRules:Seq[org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.execution.SparkPlan]]", "kind" : "def"}, {"label" : "columnarRules", "tail" : "(): Seq[ColumnarRule]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.columnarRules", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#columnarRules:Seq[org.apache.spark.sql.execution.ColumnarRule]", "kind" : "def"}, {"label" : "customPlanningStrategies", "tail" : "(): Seq[Strategy]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.customPlanningStrategies", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#customPlanningStrategies:Seq[org.apache.spark.sql.Strategy]", "kind" : "def"}, {"label" : "customPreCBORules", "tail" : "(): Seq[Rule[LogicalPlan]]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.customPreCBORules", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#customPreCBORules:Seq[org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]]", "kind" : "def"}, {"label" : "customOperatorOptimizationRules", "tail" : "(): Seq[Rule[LogicalPlan]]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.customOperatorOptimizationRules", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#customOperatorOptimizationRules:Seq[org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]]", "kind" : "def"}, {"label" : "optimizer", "tail" : "(): Optimizer", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.optimizer", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#optimizer:org.apache.spark.sql.catalyst.optimizer.Optimizer", "kind" : "def"}, {"label" : "customCheckRules", "tail" : "(): Seq[(LogicalPlan) ⇒ Unit]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.customCheckRules", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#customCheckRules:Seq[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan=>Unit]", "kind" : "def"}, {"label" : "customPostHocResolutionRules", "tail" : "(): Seq[Rule[LogicalPlan]]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.customPostHocResolutionRules", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#customPostHocResolutionRules:Seq[org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]]", "kind" : "def"}, {"label" : "customResolutionRules", "tail" : "(): Seq[Rule[LogicalPlan]]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.customResolutionRules", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#customResolutionRules:Seq[org.apache.spark.sql.catalyst.rules.Rule[org.apache.spark.sql.catalyst.plans.logical.LogicalPlan]]", "kind" : "def"}, {"label" : "udfRegistration", "tail" : "(): UDFRegistration", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.udfRegistration", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#udfRegistration:org.apache.spark.sql.UDFRegistration", "kind" : "def"}, {"label" : "catalogManager", "tail" : ": CatalogManager", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.catalogManager", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#catalogManager:org.apache.spark.sql.connector.catalog.CatalogManager", "kind" : "lazy val"}, {"label" : "v2SessionCatalog", "tail" : ": V2SessionCatalog", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.v2SessionCatalog", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#v2SessionCatalog:org.apache.spark.sql.execution.datasources.v2.V2SessionCatalog", "kind" : "lazy val"}, {"label" : "sqlParser", "tail" : ": ParserInterface", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.sqlParser", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#sqlParser:org.apache.spark.sql.catalyst.parser.ParserInterface", "kind" : "lazy val"}, {"label" : "experimentalMethods", "tail" : ": ExperimentalMethods", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.experimentalMethods", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#experimentalMethods:org.apache.spark.sql.ExperimentalMethods", "kind" : "lazy val"}, {"label" : "tableFunctionRegistry", "tail" : ": TableFunctionRegistry", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.tableFunctionRegistry", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#tableFunctionRegistry:org.apache.spark.sql.catalyst.analysis.TableFunctionRegistry", "kind" : "lazy val"}, {"label" : "functionRegistry", "tail" : ": FunctionRegistry", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.functionRegistry", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#functionRegistry:org.apache.spark.sql.catalyst.analysis.FunctionRegistry", "kind" : "lazy val"}, {"label" : "conf", "tail" : ": SQLConf", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.conf", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "lazy val"}, {"label" : "extensions", "tail" : "(): SparkSessionExtensions", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.extensions", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#extensions:org.apache.spark.sql.SparkSessionExtensions", "kind" : "def"}, {"label" : "NewBuilder", "tail" : "", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.NewBuilder", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#NewBuilder=(org.apache.spark.sql.SparkSession,Option[org.apache.spark.sql.internal.SessionState])=>org.apache.spark.sql.internal.BaseSessionStateBuilder", "kind" : "type"}, {"label" : "parentState", "tail" : ": Option[SessionState]", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.parentState", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#parentState:Option[org.apache.spark.sql.internal.SessionState]", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "org.apache.spark.sql.internal.BaseSessionStateBuilder.session", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/HiveSessionStateBuilder.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.hive.HiveUDAFBuffer", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.sql.hive.HiveUDAFBuffer#<init>", "error" : "unsupported entity"}, {"label" : "canDoMerge", "tail" : ": Boolean", "member" : "org.apache.spark.sql.hive.HiveUDAFBuffer.canDoMerge", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#canDoMerge:Boolean", "kind" : "val"}, {"label" : "buf", "tail" : ": AggregationBuffer", "member" : "org.apache.spark.sql.hive.HiveUDAFBuffer.buf", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#buf:org.apache.hadoop.hive.ql.udf.generic.GenericUDAFEvaluator.AggregationBuffer", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/hive\/HiveUDAFBuffer.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.hive.RelationConversions", "shortDescription" : "Relation conversion from metastore relations to data source relations for better performance", "members_case class" : [{"label" : "apply", "tail" : "(plan: LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.hive.RelationConversions.apply", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#apply(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.RelationConversions#<init>", "error" : "unsupported entity"}, {"label" : "sessionCatalog", "tail" : ": HiveSessionCatalog", "member" : "org.apache.spark.sql.hive.RelationConversions.sessionCatalog", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#sessionCatalog:org.apache.spark.sql.hive.HiveSessionCatalog", "kind" : "val"}, {"label" : "ruleName", "tail" : ": String", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleName", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#ruleName:String", "kind" : "val"}, {"label" : "ruleId", "tail" : ": RuleId", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleId", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#ruleId:org.apache.spark.sql.catalyst.rules.RuleId", "kind" : "lazy val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#logName:String", "kind" : "def"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/hive\/RelationConversions.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.hive.ResolveHiveSerdeTable", "shortDescription" : "Determine the database, serde\/format and schema of the Hive serde table, according to the storageproperties.", "members_class" : [{"label" : "apply", "tail" : "(plan: LogicalPlan): LogicalPlan", "member" : "org.apache.spark.sql.hive.ResolveHiveSerdeTable.apply", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#apply(plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.ResolveHiveSerdeTable#<init>", "error" : "unsupported entity"}, {"label" : "ruleName", "tail" : ": String", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleName", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#ruleName:String", "kind" : "val"}, {"label" : "ruleId", "tail" : ": RuleId", "member" : "org.apache.spark.sql.catalyst.rules.Rule.ruleId", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#ruleId:org.apache.spark.sql.catalyst.rules.RuleId", "kind" : "lazy val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#logName:String", "kind" : "def"}, {"label" : "conf", "tail" : "(): SQLConf", "member" : "org.apache.spark.sql.catalyst.SQLConfHelper.conf", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#conf:org.apache.spark.sql.internal.SQLConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/ResolveHiveSerdeTable.html", "kind" : "class"}], "org.apache.hadoop.hive" : [], "org.apache.hadoop" : [], "org.apache.spark" : [], "org.apache" : [], "org.apache.spark.sql.hive.orc" : [{"name" : "org.apache.spark.sql.hive.orc.OrcFileFormat", "shortDescription" : "FileFormat for reading ORC files.", "members_class" : [{"label" : "supportDataType", "tail" : "(dataType: DataType): Boolean", "member" : "org.apache.spark.sql.hive.orc.OrcFileFormat.supportDataType", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#supportDataType(dataType:org.apache.spark.sql.types.DataType):Boolean", "kind" : "def"}, {"label" : "buildReader", "tail" : "(sparkSession: SparkSession, dataSchema: StructType, partitionSchema: StructType, requiredSchema: StructType, filters: Seq[Filter], options: Map[String, String], hadoopConf: Configuration): (PartitionedFile) ⇒ Iterator[InternalRow]", "member" : "org.apache.spark.sql.hive.orc.OrcFileFormat.buildReader", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#buildReader(sparkSession:org.apache.spark.sql.SparkSession,dataSchema:org.apache.spark.sql.types.StructType,partitionSchema:org.apache.spark.sql.types.StructType,requiredSchema:org.apache.spark.sql.types.StructType,filters:Seq[org.apache.spark.sql.sources.Filter],options:Map[String,String],hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.PartitionedFile=>Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "isSplitable", "tail" : "(sparkSession: SparkSession, options: Map[String, String], path: Path): Boolean", "member" : "org.apache.spark.sql.hive.orc.OrcFileFormat.isSplitable", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#isSplitable(sparkSession:org.apache.spark.sql.SparkSession,options:Map[String,String],path:org.apache.hadoop.fs.Path):Boolean", "kind" : "def"}, {"label" : "prepareWrite", "tail" : "(sparkSession: SparkSession, job: Job, options: Map[String, String], dataSchema: StructType): OutputWriterFactory", "member" : "org.apache.spark.sql.hive.orc.OrcFileFormat.prepareWrite", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#prepareWrite(sparkSession:org.apache.spark.sql.SparkSession,job:org.apache.hadoop.mapreduce.Job,options:Map[String,String],dataSchema:org.apache.spark.sql.types.StructType):org.apache.spark.sql.execution.datasources.OutputWriterFactory", "kind" : "def"}, {"label" : "inferSchema", "tail" : "(sparkSession: SparkSession, options: Map[String, String], files: Seq[FileStatus]): Option[StructType]", "member" : "org.apache.spark.sql.hive.orc.OrcFileFormat.inferSchema", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#inferSchema(sparkSession:org.apache.spark.sql.SparkSession,options:Map[String,String],files:Seq[org.apache.hadoop.fs.FileStatus]):Option[org.apache.spark.sql.types.StructType]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.hive.orc.OrcFileFormat.toString", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#toString():String", "kind" : "def"}, {"label" : "shortName", "tail" : "(): String", "member" : "org.apache.spark.sql.hive.orc.OrcFileFormat.shortName", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#shortName():String", "kind" : "def"}, {"member" : "org.apache.spark.sql.hive.orc.OrcFileFormat#<init>", "error" : "unsupported entity"}, {"label" : "supportFieldName", "tail" : "(name: String): Boolean", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.supportFieldName", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#supportFieldName(name:String):Boolean", "kind" : "def"}, {"label" : "buildReaderWithPartitionValues", "tail" : "(sparkSession: SparkSession, dataSchema: StructType, partitionSchema: StructType, requiredSchema: StructType, filters: Seq[Filter], options: Map[String, String], hadoopConf: Configuration): (PartitionedFile) ⇒ Iterator[InternalRow]", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.buildReaderWithPartitionValues", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#buildReaderWithPartitionValues(sparkSession:org.apache.spark.sql.SparkSession,dataSchema:org.apache.spark.sql.types.StructType,partitionSchema:org.apache.spark.sql.types.StructType,requiredSchema:org.apache.spark.sql.types.StructType,filters:Seq[org.apache.spark.sql.sources.Filter],options:Map[String,String],hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.sql.execution.datasources.PartitionedFile=>Iterator[org.apache.spark.sql.catalyst.InternalRow]", "kind" : "def"}, {"label" : "vectorTypes", "tail" : "(requiredSchema: StructType, partitionSchema: StructType, sqlConf: SQLConf): Option[Seq[String]]", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.vectorTypes", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#vectorTypes(requiredSchema:org.apache.spark.sql.types.StructType,partitionSchema:org.apache.spark.sql.types.StructType,sqlConf:org.apache.spark.sql.internal.SQLConf):Option[Seq[String]]", "kind" : "def"}, {"label" : "supportBatch", "tail" : "(sparkSession: SparkSession, dataSchema: StructType): Boolean", "member" : "org.apache.spark.sql.execution.datasources.FileFormat.supportBatch", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#supportBatch(sparkSession:org.apache.spark.sql.SparkSession,dataSchema:org.apache.spark.sql.types.StructType):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/hive\/orc\/OrcFileFormat.html", "kind" : "class"}], "org.apache.spark.sql" : [], "org" : []};