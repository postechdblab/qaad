Index.PACKAGES = {"org.apache.hadoop.shaded.net" : [], "org.apache.spark.security" : [{"name" : "org.apache.spark.security.GroupMappingServiceProvider", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getGroups", "tail" : "(userName: String): Set[String]", "member" : "org.apache.spark.security.GroupMappingServiceProvider.getGroups", "link" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html#getGroups(userName:String):Set[String]", "kind" : "abstract def"}], "shortDescription" : "This Spark trait is used for mapping a given userName to a set of groups which it belongs to.", "trait" : "org\/apache\/spark\/security\/GroupMappingServiceProvider.html", "kind" : "trait"}, {"name" : "org.apache.spark.security.HadoopDelegationTokenProvider", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "obtainDelegationTokens", "tail" : "(hadoopConf: Configuration, sparkConf: SparkConf, creds: Credentials): Option[Long]", "member" : "org.apache.spark.security.HadoopDelegationTokenProvider.obtainDelegationTokens", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#obtainDelegationTokens(hadoopConf:org.apache.hadoop.conf.Configuration,sparkConf:org.apache.spark.SparkConf,creds:org.apache.hadoop.security.Credentials):Option[Long]", "kind" : "abstract def"}, {"label" : "delegationTokensRequired", "tail" : "(sparkConf: SparkConf, hadoopConf: Configuration): Boolean", "member" : "org.apache.spark.security.HadoopDelegationTokenProvider.delegationTokensRequired", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#delegationTokensRequired(sparkConf:org.apache.spark.SparkConf,hadoopConf:org.apache.hadoop.conf.Configuration):Boolean", "kind" : "abstract def"}, {"label" : "serviceName", "tail" : "(): String", "member" : "org.apache.spark.security.HadoopDelegationTokenProvider.serviceName", "link" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html#serviceName:String", "kind" : "abstract def"}], "shortDescription" : "::DeveloperApi::Hadoop delegation token provider.", "trait" : "org\/apache\/spark\/security\/HadoopDelegationTokenProvider.html", "kind" : "trait"}], "org.apache.spark.broadcast" : [{"name" : "org.apache.spark.broadcast.Broadcast", "shortDescription" : "A broadcast variable.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.broadcast.Broadcast.toString", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#toString():String", "kind" : "def"}, {"label" : "assertValid", "tail" : "(): Unit", "member" : "org.apache.spark.broadcast.Broadcast.assertValid", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#assertValid():Unit", "kind" : "def"}, {"label" : "destroy", "tail" : "(): Unit", "member" : "org.apache.spark.broadcast.Broadcast.destroy", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#destroy():Unit", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.broadcast.Broadcast.unpersist", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#unpersist(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): Unit", "member" : "org.apache.spark.broadcast.Broadcast.unpersist", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#unpersist():Unit", "kind" : "def"}, {"label" : "value", "tail" : "(): T", "member" : "org.apache.spark.broadcast.Broadcast.value", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#value:T", "kind" : "def"}, {"member" : "org.apache.spark.broadcast.Broadcast#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Long", "member" : "org.apache.spark.broadcast.Broadcast.id", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#id:Long", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "doDestroy", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.broadcast.Broadcast.doDestroy", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#doDestroy(blocking:Boolean):Unit", "kind" : "abstract def"}, {"label" : "doUnpersist", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.broadcast.Broadcast.doUnpersist", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#doUnpersist(blocking:Boolean):Unit", "kind" : "abstract def"}, {"label" : "getValue", "tail" : "(): T", "member" : "org.apache.spark.broadcast.Broadcast.getValue", "link" : "org\/apache\/spark\/broadcast\/Broadcast.html#getValue():T", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/broadcast\/Broadcast.html", "kind" : "class"}], "org.apache.spark.util" : [{"name" : "org.apache.spark.util.AccumulatorV2", "shortDescription" : "The base class for accumulators, that can accumulate inputs of type IN, and produce output oftype OUT.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.util.AccumulatorV2.toString", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#toString():String", "kind" : "def"}, {"label" : "writeReplace", "tail" : "(): Any", "member" : "org.apache.spark.util.AccumulatorV2.writeReplace", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#writeReplace():Any", "kind" : "final def"}, {"label" : "withBufferSerialized", "tail" : "(): AccumulatorV2[IN, OUT]", "member" : "org.apache.spark.util.AccumulatorV2.withBufferSerialized", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#withBufferSerialized():org.apache.spark.util.AccumulatorV2[IN,OUT]", "kind" : "def"}, {"label" : "copyAndReset", "tail" : "(): AccumulatorV2[IN, OUT]", "member" : "org.apache.spark.util.AccumulatorV2.copyAndReset", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#copyAndReset():org.apache.spark.util.AccumulatorV2[IN,OUT]", "kind" : "def"}, {"label" : "name", "tail" : "(): Option[String]", "member" : "org.apache.spark.util.AccumulatorV2.name", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#name:Option[String]", "kind" : "final def"}, {"label" : "id", "tail" : "(): Long", "member" : "org.apache.spark.util.AccumulatorV2.id", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#id:Long", "kind" : "final def"}, {"label" : "isRegistered", "tail" : "(): Boolean", "member" : "org.apache.spark.util.AccumulatorV2.isRegistered", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#isRegistered:Boolean", "kind" : "final def"}, {"member" : "org.apache.spark.util.AccumulatorV2#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): OUT", "member" : "org.apache.spark.util.AccumulatorV2.value", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#value:OUT", "kind" : "abstract def"}, {"label" : "merge", "tail" : "(other: AccumulatorV2[IN, OUT]): Unit", "member" : "org.apache.spark.util.AccumulatorV2.merge", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#merge(other:org.apache.spark.util.AccumulatorV2[IN,OUT]):Unit", "kind" : "abstract def"}, {"label" : "add", "tail" : "(v: IN): Unit", "member" : "org.apache.spark.util.AccumulatorV2.add", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#add(v:IN):Unit", "kind" : "abstract def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "org.apache.spark.util.AccumulatorV2.reset", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#reset():Unit", "kind" : "abstract def"}, {"label" : "copy", "tail" : "(): AccumulatorV2[IN, OUT]", "member" : "org.apache.spark.util.AccumulatorV2.copy", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#copy():org.apache.spark.util.AccumulatorV2[IN,OUT]", "kind" : "abstract def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "org.apache.spark.util.AccumulatorV2.isZero", "link" : "org\/apache\/spark\/util\/AccumulatorV2.html#isZero:Boolean", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/util\/AccumulatorV2.html", "kind" : "class"}, {"name" : "org.apache.spark.util.ChildFirstURLClassLoader", "shortDescription" : "A mutable class loader that gives preference to its own URLs over the parent class loaderwhen loading classes and resources.", "members_class" : [{"label" : "getResource", "tail" : "(name: String): URL", "member" : "org.apache.spark.util.ChildFirstURLClassLoader.getResource", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getResource(name:String):java.net.URL", "kind" : "def"}, {"label" : "getResources", "tail" : "(name: String): Enumeration[URL]", "member" : "org.apache.spark.util.ChildFirstURLClassLoader.getResources", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getResources(name:String):java.util.Enumeration[java.net.URL]", "kind" : "def"}, {"label" : "loadClass", "tail" : "(name: String, resolve: Boolean): Class[_]", "member" : "org.apache.spark.util.ChildFirstURLClassLoader.loadClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#loadClass(name:String,resolve:Boolean):Class[_]", "kind" : "def"}, {"member" : "org.apache.spark.util.ChildFirstURLClassLoader#<init>", "error" : "unsupported entity"}, {"label" : "addURL", "tail" : "(url: URL): Unit", "member" : "org.apache.spark.util.MutableURLClassLoader.addURL", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#addURL(url:java.net.URL):Unit", "kind" : "def"}, {"label" : "getPermissions", "tail" : "(arg0: CodeSource): PermissionCollection", "member" : "java.net.URLClassLoader.getPermissions", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getPermissions(x$1:java.security.CodeSource):java.security.PermissionCollection", "kind" : "def"}, {"label" : "findResources", "tail" : "(arg0: String): Enumeration[URL]", "member" : "java.net.URLClassLoader.findResources", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#findResources(x$1:String):java.util.Enumeration[java.net.URL]", "kind" : "def"}, {"label" : "findResource", "tail" : "(arg0: String): URL", "member" : "java.net.URLClassLoader.findResource", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#findResource(x$1:String):java.net.URL", "kind" : "def"}, {"label" : "definePackage", "tail" : "(arg0: String, arg1: Manifest, arg2: URL): Package", "member" : "java.net.URLClassLoader.definePackage", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#definePackage(x$1:String,x$2:java.util.jar.Manifest,x$3:java.net.URL):Package", "kind" : "def"}, {"label" : "findClass", "tail" : "(arg0: String): Class[_]", "member" : "java.net.URLClassLoader.findClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#findClass(x$1:String):Class[_]", "kind" : "def"}, {"label" : "getURLs", "tail" : "(): Array[URL]", "member" : "java.net.URLClassLoader.getURLs", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getURLs():Array[java.net.URL]", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "java.net.URLClassLoader.close", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#close():Unit", "kind" : "def"}, {"label" : "getResourceAsStream", "tail" : "(arg0: String): InputStream", "member" : "java.net.URLClassLoader.getResourceAsStream", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getResourceAsStream(x$1:String):java.io.InputStream", "kind" : "def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: ByteBuffer, arg2: CodeSource): Class[_]", "member" : "java.security.SecureClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#defineClass(x$1:String,x$2:java.nio.ByteBuffer,x$3:java.security.CodeSource):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: Array[Byte], arg2: Int, arg3: Int, arg4: CodeSource): Class[_]", "member" : "java.security.SecureClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#defineClass(x$1:String,x$2:Array[Byte],x$3:Int,x$4:Int,x$5:java.security.CodeSource):Class[_]", "kind" : "final def"}, {"label" : "clearAssertionStatus", "tail" : "(): Unit", "member" : "java.lang.ClassLoader.clearAssertionStatus", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#clearAssertionStatus():Unit", "kind" : "def"}, {"label" : "setClassAssertionStatus", "tail" : "(arg0: String, arg1: Boolean): Unit", "member" : "java.lang.ClassLoader.setClassAssertionStatus", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#setClassAssertionStatus(x$1:String,x$2:Boolean):Unit", "kind" : "def"}, {"label" : "setPackageAssertionStatus", "tail" : "(arg0: String, arg1: Boolean): Unit", "member" : "java.lang.ClassLoader.setPackageAssertionStatus", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#setPackageAssertionStatus(x$1:String,x$2:Boolean):Unit", "kind" : "def"}, {"label" : "setDefaultAssertionStatus", "tail" : "(arg0: Boolean): Unit", "member" : "java.lang.ClassLoader.setDefaultAssertionStatus", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#setDefaultAssertionStatus(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "findLibrary", "tail" : "(arg0: String): String", "member" : "java.lang.ClassLoader.findLibrary", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#findLibrary(x$1:String):String", "kind" : "def"}, {"label" : "getPackages", "tail" : "(): Array[Package]", "member" : "java.lang.ClassLoader.getPackages", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getPackages():Array[Package]", "kind" : "def"}, {"label" : "getPackage", "tail" : "(arg0: String): Package", "member" : "java.lang.ClassLoader.getPackage", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getPackage(x$1:String):Package", "kind" : "def"}, {"label" : "definePackage", "tail" : "(arg0: String, arg1: String, arg2: String, arg3: String, arg4: String, arg5: String, arg6: String, arg7: URL): Package", "member" : "java.lang.ClassLoader.definePackage", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#definePackage(x$1:String,x$2:String,x$3:String,x$4:String,x$5:String,x$6:String,x$7:String,x$8:java.net.URL):Package", "kind" : "def"}, {"label" : "getParent", "tail" : "(): ClassLoader", "member" : "java.lang.ClassLoader.getParent", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getParent():ClassLoader", "kind" : "final def"}, {"label" : "setSigners", "tail" : "(arg0: Class[_], arg1: Array[AnyRef]): Unit", "member" : "java.lang.ClassLoader.setSigners", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#setSigners(x$1:Class[_],x$2:Array[Object]):Unit", "kind" : "final def"}, {"label" : "findLoadedClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.findLoadedClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#findLoadedClass(x$1:String):Class[_]", "kind" : "final def"}, {"label" : "findSystemClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.findSystemClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#findSystemClass(x$1:String):Class[_]", "kind" : "final def"}, {"label" : "resolveClass", "tail" : "(arg0: Class[_]): Unit", "member" : "java.lang.ClassLoader.resolveClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#resolveClass(x$1:Class[_]):Unit", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: ByteBuffer, arg2: ProtectionDomain): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#defineClass(x$1:String,x$2:java.nio.ByteBuffer,x$3:java.security.ProtectionDomain):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: Array[Byte], arg2: Int, arg3: Int, arg4: ProtectionDomain): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#defineClass(x$1:String,x$2:Array[Byte],x$3:Int,x$4:Int,x$5:java.security.ProtectionDomain):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: Array[Byte], arg2: Int, arg3: Int): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#defineClass(x$1:String,x$2:Array[Byte],x$3:Int,x$4:Int):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: Array[Byte], arg1: Int, arg2: Int): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#defineClass(x$1:Array[Byte],x$2:Int,x$3:Int):Class[_]", "kind" : "final def"}, {"label" : "getClassLoadingLock", "tail" : "(arg0: String): AnyRef", "member" : "java.lang.ClassLoader.getClassLoadingLock", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getClassLoadingLock(x$1:String):Object", "kind" : "def"}, {"label" : "loadClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.loadClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#loadClass(x$1:String):Class[_]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/ChildFirstURLClassLoader.html", "kind" : "class"}, {"name" : "org.apache.spark.util.CollectionAccumulator", "shortDescription" : "An accumulator for collecting a list of elements.", "members_class" : [{"label" : "value", "tail" : "(): List[T]", "member" : "org.apache.spark.util.CollectionAccumulator.value", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#value:java.util.List[T]", "kind" : "def"}, {"label" : "merge", "tail" : "(other: AccumulatorV2[T, List[T]]): Unit", "member" : "org.apache.spark.util.CollectionAccumulator.merge", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#merge(other:org.apache.spark.util.AccumulatorV2[T,java.util.List[T]]):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: T): Unit", "member" : "org.apache.spark.util.CollectionAccumulator.add", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#add(v:T):Unit", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "org.apache.spark.util.CollectionAccumulator.reset", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#reset():Unit", "kind" : "def"}, {"label" : "copy", "tail" : "(): CollectionAccumulator[T]", "member" : "org.apache.spark.util.CollectionAccumulator.copy", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#copy():org.apache.spark.util.CollectionAccumulator[T]", "kind" : "def"}, {"label" : "copyAndReset", "tail" : "(): CollectionAccumulator[T]", "member" : "org.apache.spark.util.CollectionAccumulator.copyAndReset", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#copyAndReset():org.apache.spark.util.CollectionAccumulator[T]", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "org.apache.spark.util.CollectionAccumulator.isZero", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#isZero:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.util.CollectionAccumulator#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.util.AccumulatorV2.toString", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#toString():String", "kind" : "def"}, {"label" : "writeReplace", "tail" : "(): Any", "member" : "org.apache.spark.util.AccumulatorV2.writeReplace", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#writeReplace():Any", "kind" : "final def"}, {"label" : "withBufferSerialized", "tail" : "(): AccumulatorV2[T, List[T]]", "member" : "org.apache.spark.util.AccumulatorV2.withBufferSerialized", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#withBufferSerialized():org.apache.spark.util.AccumulatorV2[IN,OUT]", "kind" : "def"}, {"label" : "name", "tail" : "(): Option[String]", "member" : "org.apache.spark.util.AccumulatorV2.name", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#name:Option[String]", "kind" : "final def"}, {"label" : "id", "tail" : "(): Long", "member" : "org.apache.spark.util.AccumulatorV2.id", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#id:Long", "kind" : "final def"}, {"label" : "isRegistered", "tail" : "(): Boolean", "member" : "org.apache.spark.util.AccumulatorV2.isRegistered", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#isRegistered:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/CollectionAccumulator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/CollectionAccumulator.html", "kind" : "class"}, {"name" : "org.apache.spark.util.DoubleAccumulator", "shortDescription" : "An accumulator for computing sum, count, and averages for double precisionfloating numbers.", "members_class" : [{"label" : "value", "tail" : "(): Double", "member" : "org.apache.spark.util.DoubleAccumulator.value", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#value:Double", "kind" : "def"}, {"label" : "merge", "tail" : "(other: AccumulatorV2[Double, Double]): Unit", "member" : "org.apache.spark.util.DoubleAccumulator.merge", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#merge(other:org.apache.spark.util.AccumulatorV2[Double,Double]):Unit", "kind" : "def"}, {"label" : "avg", "tail" : "(): Double", "member" : "org.apache.spark.util.DoubleAccumulator.avg", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#avg:Double", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "org.apache.spark.util.DoubleAccumulator.sum", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#sum:Double", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.util.DoubleAccumulator.count", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#count:Long", "kind" : "def"}, {"label" : "add", "tail" : "(v: Double): Unit", "member" : "org.apache.spark.util.DoubleAccumulator.add", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#add(v:Double):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: Double): Unit", "member" : "org.apache.spark.util.DoubleAccumulator.add", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#add(v:Double):Unit", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "org.apache.spark.util.DoubleAccumulator.reset", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#reset():Unit", "kind" : "def"}, {"label" : "copy", "tail" : "(): DoubleAccumulator", "member" : "org.apache.spark.util.DoubleAccumulator.copy", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#copy():org.apache.spark.util.DoubleAccumulator", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "org.apache.spark.util.DoubleAccumulator.isZero", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#isZero:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.util.DoubleAccumulator#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.util.AccumulatorV2.toString", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#toString():String", "kind" : "def"}, {"label" : "writeReplace", "tail" : "(): Any", "member" : "org.apache.spark.util.AccumulatorV2.writeReplace", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#writeReplace():Any", "kind" : "final def"}, {"label" : "withBufferSerialized", "tail" : "(): AccumulatorV2[Double, Double]", "member" : "org.apache.spark.util.AccumulatorV2.withBufferSerialized", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#withBufferSerialized():org.apache.spark.util.AccumulatorV2[IN,OUT]", "kind" : "def"}, {"label" : "copyAndReset", "tail" : "(): AccumulatorV2[Double, Double]", "member" : "org.apache.spark.util.AccumulatorV2.copyAndReset", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#copyAndReset():org.apache.spark.util.AccumulatorV2[IN,OUT]", "kind" : "def"}, {"label" : "name", "tail" : "(): Option[String]", "member" : "org.apache.spark.util.AccumulatorV2.name", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#name:Option[String]", "kind" : "final def"}, {"label" : "id", "tail" : "(): Long", "member" : "org.apache.spark.util.AccumulatorV2.id", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#id:Long", "kind" : "final def"}, {"label" : "isRegistered", "tail" : "(): Boolean", "member" : "org.apache.spark.util.AccumulatorV2.isRegistered", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#isRegistered:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/DoubleAccumulator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/DoubleAccumulator.html", "kind" : "class"}, {"name" : "org.apache.spark.util.EnumUtil", "shortDescription" : "", "members_class" : [{"member" : "org.apache.spark.util.EnumUtil#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/EnumUtil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/EnumUtil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/EnumUtil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/EnumUtil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/EnumUtil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/EnumUtil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/EnumUtil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/EnumUtil.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/EnumUtil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/EnumUtil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/EnumUtil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/EnumUtil.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/EnumUtil.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/EnumUtil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/EnumUtil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/EnumUtil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/EnumUtil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/EnumUtil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/EnumUtil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/EnumUtil.html", "kind" : "class"}, {"name" : "org.apache.spark.util.LongAccumulator", "shortDescription" : "An accumulator for computing sum, count, and average of 64-bit integers.", "members_class" : [{"label" : "value", "tail" : "(): Long", "member" : "org.apache.spark.util.LongAccumulator.value", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#value:Long", "kind" : "def"}, {"label" : "merge", "tail" : "(other: AccumulatorV2[Long, Long]): Unit", "member" : "org.apache.spark.util.LongAccumulator.merge", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#merge(other:org.apache.spark.util.AccumulatorV2[Long,Long]):Unit", "kind" : "def"}, {"label" : "avg", "tail" : "(): Double", "member" : "org.apache.spark.util.LongAccumulator.avg", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#avg:Double", "kind" : "def"}, {"label" : "sum", "tail" : "(): Long", "member" : "org.apache.spark.util.LongAccumulator.sum", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#sum:Long", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.util.LongAccumulator.count", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#count:Long", "kind" : "def"}, {"label" : "add", "tail" : "(v: Long): Unit", "member" : "org.apache.spark.util.LongAccumulator.add", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#add(v:Long):Unit", "kind" : "def"}, {"label" : "add", "tail" : "(v: Long): Unit", "member" : "org.apache.spark.util.LongAccumulator.add", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#add(v:Long):Unit", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "org.apache.spark.util.LongAccumulator.reset", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#reset():Unit", "kind" : "def"}, {"label" : "copy", "tail" : "(): LongAccumulator", "member" : "org.apache.spark.util.LongAccumulator.copy", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#copy():org.apache.spark.util.LongAccumulator", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "org.apache.spark.util.LongAccumulator.isZero", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#isZero:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.util.LongAccumulator#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.util.AccumulatorV2.toString", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#toString():String", "kind" : "def"}, {"label" : "writeReplace", "tail" : "(): Any", "member" : "org.apache.spark.util.AccumulatorV2.writeReplace", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#writeReplace():Any", "kind" : "final def"}, {"label" : "withBufferSerialized", "tail" : "(): AccumulatorV2[Long, Long]", "member" : "org.apache.spark.util.AccumulatorV2.withBufferSerialized", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#withBufferSerialized():org.apache.spark.util.AccumulatorV2[IN,OUT]", "kind" : "def"}, {"label" : "copyAndReset", "tail" : "(): AccumulatorV2[Long, Long]", "member" : "org.apache.spark.util.AccumulatorV2.copyAndReset", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#copyAndReset():org.apache.spark.util.AccumulatorV2[IN,OUT]", "kind" : "def"}, {"label" : "name", "tail" : "(): Option[String]", "member" : "org.apache.spark.util.AccumulatorV2.name", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#name:Option[String]", "kind" : "final def"}, {"label" : "id", "tail" : "(): Long", "member" : "org.apache.spark.util.AccumulatorV2.id", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#id:Long", "kind" : "final def"}, {"label" : "isRegistered", "tail" : "(): Boolean", "member" : "org.apache.spark.util.AccumulatorV2.isRegistered", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#isRegistered:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/LongAccumulator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/LongAccumulator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/LongAccumulator.html", "kind" : "class"}, {"name" : "org.apache.spark.util.MutablePair", "shortDescription" : ":: DeveloperApi ::A tuple of 2 elements.", "members_case class" : [{"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "org.apache.spark.util.MutablePair.canEqual", "link" : "org\/apache\/spark\/util\/MutablePair.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.util.MutablePair.toString", "link" : "org\/apache\/spark\/util\/MutablePair.html#toString():String", "kind" : "def"}, {"label" : "update", "tail" : "(n1: T1, n2: T2): MutablePair[T1, T2]", "member" : "org.apache.spark.util.MutablePair.update", "link" : "org\/apache\/spark\/util\/MutablePair.html#update(n1:T1,n2:T2):org.apache.spark.util.MutablePair[T1,T2]", "kind" : "def"}, {"member" : "org.apache.spark.util.MutablePair#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.util.MutablePair#<init>", "error" : "unsupported entity"}, {"label" : "_2", "tail" : ": T2", "member" : "org.apache.spark.util.MutablePair._2", "link" : "org\/apache\/spark\/util\/MutablePair.html#_2:T2", "kind" : "var"}, {"label" : "_1", "tail" : ": T1", "member" : "org.apache.spark.util.MutablePair._1", "link" : "org\/apache\/spark\/util\/MutablePair.html#_1:T1", "kind" : "var"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product2.productElement", "link" : "org\/apache\/spark\/util\/MutablePair.html#productElement(n:Int):Any", "kind" : "def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product2.productArity", "link" : "org\/apache\/spark\/util\/MutablePair.html#productArity:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/MutablePair.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/MutablePair.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/MutablePair.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/MutablePair.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/MutablePair.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/MutablePair.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/MutablePair.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/MutablePair.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/MutablePair.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/MutablePair.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/MutablePair.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/MutablePair.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/MutablePair.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/MutablePair.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/MutablePair.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/MutablePair.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/util\/MutablePair.html", "kind" : "case class"}, {"name" : "org.apache.spark.util.MutableURLClassLoader", "shortDescription" : "URL class loader that exposes the addURL method in URLClassLoader.", "members_class" : [{"label" : "addURL", "tail" : "(url: URL): Unit", "member" : "org.apache.spark.util.MutableURLClassLoader.addURL", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#addURL(url:java.net.URL):Unit", "kind" : "def"}, {"member" : "org.apache.spark.util.MutableURLClassLoader#<init>", "error" : "unsupported entity"}, {"label" : "getPermissions", "tail" : "(arg0: CodeSource): PermissionCollection", "member" : "java.net.URLClassLoader.getPermissions", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getPermissions(x$1:java.security.CodeSource):java.security.PermissionCollection", "kind" : "def"}, {"label" : "findResources", "tail" : "(arg0: String): Enumeration[URL]", "member" : "java.net.URLClassLoader.findResources", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#findResources(x$1:String):java.util.Enumeration[java.net.URL]", "kind" : "def"}, {"label" : "findResource", "tail" : "(arg0: String): URL", "member" : "java.net.URLClassLoader.findResource", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#findResource(x$1:String):java.net.URL", "kind" : "def"}, {"label" : "definePackage", "tail" : "(arg0: String, arg1: Manifest, arg2: URL): Package", "member" : "java.net.URLClassLoader.definePackage", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#definePackage(x$1:String,x$2:java.util.jar.Manifest,x$3:java.net.URL):Package", "kind" : "def"}, {"label" : "findClass", "tail" : "(arg0: String): Class[_]", "member" : "java.net.URLClassLoader.findClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#findClass(x$1:String):Class[_]", "kind" : "def"}, {"label" : "getURLs", "tail" : "(): Array[URL]", "member" : "java.net.URLClassLoader.getURLs", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getURLs():Array[java.net.URL]", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "java.net.URLClassLoader.close", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#close():Unit", "kind" : "def"}, {"label" : "getResourceAsStream", "tail" : "(arg0: String): InputStream", "member" : "java.net.URLClassLoader.getResourceAsStream", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getResourceAsStream(x$1:String):java.io.InputStream", "kind" : "def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: ByteBuffer, arg2: CodeSource): Class[_]", "member" : "java.security.SecureClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#defineClass(x$1:String,x$2:java.nio.ByteBuffer,x$3:java.security.CodeSource):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: Array[Byte], arg2: Int, arg3: Int, arg4: CodeSource): Class[_]", "member" : "java.security.SecureClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#defineClass(x$1:String,x$2:Array[Byte],x$3:Int,x$4:Int,x$5:java.security.CodeSource):Class[_]", "kind" : "final def"}, {"label" : "clearAssertionStatus", "tail" : "(): Unit", "member" : "java.lang.ClassLoader.clearAssertionStatus", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#clearAssertionStatus():Unit", "kind" : "def"}, {"label" : "setClassAssertionStatus", "tail" : "(arg0: String, arg1: Boolean): Unit", "member" : "java.lang.ClassLoader.setClassAssertionStatus", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#setClassAssertionStatus(x$1:String,x$2:Boolean):Unit", "kind" : "def"}, {"label" : "setPackageAssertionStatus", "tail" : "(arg0: String, arg1: Boolean): Unit", "member" : "java.lang.ClassLoader.setPackageAssertionStatus", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#setPackageAssertionStatus(x$1:String,x$2:Boolean):Unit", "kind" : "def"}, {"label" : "setDefaultAssertionStatus", "tail" : "(arg0: Boolean): Unit", "member" : "java.lang.ClassLoader.setDefaultAssertionStatus", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#setDefaultAssertionStatus(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "findLibrary", "tail" : "(arg0: String): String", "member" : "java.lang.ClassLoader.findLibrary", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#findLibrary(x$1:String):String", "kind" : "def"}, {"label" : "getPackages", "tail" : "(): Array[Package]", "member" : "java.lang.ClassLoader.getPackages", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getPackages():Array[Package]", "kind" : "def"}, {"label" : "getPackage", "tail" : "(arg0: String): Package", "member" : "java.lang.ClassLoader.getPackage", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getPackage(x$1:String):Package", "kind" : "def"}, {"label" : "definePackage", "tail" : "(arg0: String, arg1: String, arg2: String, arg3: String, arg4: String, arg5: String, arg6: String, arg7: URL): Package", "member" : "java.lang.ClassLoader.definePackage", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#definePackage(x$1:String,x$2:String,x$3:String,x$4:String,x$5:String,x$6:String,x$7:String,x$8:java.net.URL):Package", "kind" : "def"}, {"label" : "getParent", "tail" : "(): ClassLoader", "member" : "java.lang.ClassLoader.getParent", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getParent():ClassLoader", "kind" : "final def"}, {"label" : "getResources", "tail" : "(arg0: String): Enumeration[URL]", "member" : "java.lang.ClassLoader.getResources", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getResources(x$1:String):java.util.Enumeration[java.net.URL]", "kind" : "def"}, {"label" : "getResource", "tail" : "(arg0: String): URL", "member" : "java.lang.ClassLoader.getResource", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getResource(x$1:String):java.net.URL", "kind" : "def"}, {"label" : "setSigners", "tail" : "(arg0: Class[_], arg1: Array[AnyRef]): Unit", "member" : "java.lang.ClassLoader.setSigners", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#setSigners(x$1:Class[_],x$2:Array[Object]):Unit", "kind" : "final def"}, {"label" : "findLoadedClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.findLoadedClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#findLoadedClass(x$1:String):Class[_]", "kind" : "final def"}, {"label" : "findSystemClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.findSystemClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#findSystemClass(x$1:String):Class[_]", "kind" : "final def"}, {"label" : "resolveClass", "tail" : "(arg0: Class[_]): Unit", "member" : "java.lang.ClassLoader.resolveClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#resolveClass(x$1:Class[_]):Unit", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: ByteBuffer, arg2: ProtectionDomain): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#defineClass(x$1:String,x$2:java.nio.ByteBuffer,x$3:java.security.ProtectionDomain):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: Array[Byte], arg2: Int, arg3: Int, arg4: ProtectionDomain): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#defineClass(x$1:String,x$2:Array[Byte],x$3:Int,x$4:Int,x$5:java.security.ProtectionDomain):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: Array[Byte], arg2: Int, arg3: Int): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#defineClass(x$1:String,x$2:Array[Byte],x$3:Int,x$4:Int):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: Array[Byte], arg1: Int, arg2: Int): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#defineClass(x$1:Array[Byte],x$2:Int,x$3:Int):Class[_]", "kind" : "final def"}, {"label" : "getClassLoadingLock", "tail" : "(arg0: String): AnyRef", "member" : "java.lang.ClassLoader.getClassLoadingLock", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getClassLoadingLock(x$1:String):Object", "kind" : "def"}, {"label" : "loadClass", "tail" : "(arg0: String, arg1: Boolean): Class[_]", "member" : "java.lang.ClassLoader.loadClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#loadClass(x$1:String,x$2:Boolean):Class[_]", "kind" : "def"}, {"label" : "loadClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.loadClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#loadClass(x$1:String):Class[_]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/MutableURLClassLoader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/MutableURLClassLoader.html", "kind" : "class"}, {"name" : "org.apache.spark.util.ParentClassLoader", "shortDescription" : "A class loader which makes some protected methods in ClassLoader accessible.", "members_class" : [{"label" : "loadClass", "tail" : "(name: String, resolve: Boolean): Class[_]", "member" : "org.apache.spark.util.ParentClassLoader.loadClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#loadClass(name:String,resolve:Boolean):Class[_]", "kind" : "def"}, {"label" : "findClass", "tail" : "(name: String): Class[_]", "member" : "org.apache.spark.util.ParentClassLoader.findClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#findClass(name:String):Class[_]", "kind" : "def"}, {"member" : "org.apache.spark.util.ParentClassLoader#<init>", "error" : "unsupported entity"}, {"label" : "clearAssertionStatus", "tail" : "(): Unit", "member" : "java.lang.ClassLoader.clearAssertionStatus", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#clearAssertionStatus():Unit", "kind" : "def"}, {"label" : "setClassAssertionStatus", "tail" : "(arg0: String, arg1: Boolean): Unit", "member" : "java.lang.ClassLoader.setClassAssertionStatus", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#setClassAssertionStatus(x$1:String,x$2:Boolean):Unit", "kind" : "def"}, {"label" : "setPackageAssertionStatus", "tail" : "(arg0: String, arg1: Boolean): Unit", "member" : "java.lang.ClassLoader.setPackageAssertionStatus", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#setPackageAssertionStatus(x$1:String,x$2:Boolean):Unit", "kind" : "def"}, {"label" : "setDefaultAssertionStatus", "tail" : "(arg0: Boolean): Unit", "member" : "java.lang.ClassLoader.setDefaultAssertionStatus", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#setDefaultAssertionStatus(x$1:Boolean):Unit", "kind" : "def"}, {"label" : "findLibrary", "tail" : "(arg0: String): String", "member" : "java.lang.ClassLoader.findLibrary", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#findLibrary(x$1:String):String", "kind" : "def"}, {"label" : "getPackages", "tail" : "(): Array[Package]", "member" : "java.lang.ClassLoader.getPackages", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#getPackages():Array[Package]", "kind" : "def"}, {"label" : "getPackage", "tail" : "(arg0: String): Package", "member" : "java.lang.ClassLoader.getPackage", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#getPackage(x$1:String):Package", "kind" : "def"}, {"label" : "definePackage", "tail" : "(arg0: String, arg1: String, arg2: String, arg3: String, arg4: String, arg5: String, arg6: String, arg7: URL): Package", "member" : "java.lang.ClassLoader.definePackage", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#definePackage(x$1:String,x$2:String,x$3:String,x$4:String,x$5:String,x$6:String,x$7:String,x$8:java.net.URL):Package", "kind" : "def"}, {"label" : "getParent", "tail" : "(): ClassLoader", "member" : "java.lang.ClassLoader.getParent", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#getParent():ClassLoader", "kind" : "final def"}, {"label" : "getResourceAsStream", "tail" : "(arg0: String): InputStream", "member" : "java.lang.ClassLoader.getResourceAsStream", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#getResourceAsStream(x$1:String):java.io.InputStream", "kind" : "def"}, {"label" : "findResources", "tail" : "(arg0: String): Enumeration[URL]", "member" : "java.lang.ClassLoader.findResources", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#findResources(x$1:String):java.util.Enumeration[java.net.URL]", "kind" : "def"}, {"label" : "findResource", "tail" : "(arg0: String): URL", "member" : "java.lang.ClassLoader.findResource", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#findResource(x$1:String):java.net.URL", "kind" : "def"}, {"label" : "getResources", "tail" : "(arg0: String): Enumeration[URL]", "member" : "java.lang.ClassLoader.getResources", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#getResources(x$1:String):java.util.Enumeration[java.net.URL]", "kind" : "def"}, {"label" : "getResource", "tail" : "(arg0: String): URL", "member" : "java.lang.ClassLoader.getResource", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#getResource(x$1:String):java.net.URL", "kind" : "def"}, {"label" : "setSigners", "tail" : "(arg0: Class[_], arg1: Array[AnyRef]): Unit", "member" : "java.lang.ClassLoader.setSigners", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#setSigners(x$1:Class[_],x$2:Array[Object]):Unit", "kind" : "final def"}, {"label" : "findLoadedClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.findLoadedClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#findLoadedClass(x$1:String):Class[_]", "kind" : "final def"}, {"label" : "findSystemClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.findSystemClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#findSystemClass(x$1:String):Class[_]", "kind" : "final def"}, {"label" : "resolveClass", "tail" : "(arg0: Class[_]): Unit", "member" : "java.lang.ClassLoader.resolveClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#resolveClass(x$1:Class[_]):Unit", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: ByteBuffer, arg2: ProtectionDomain): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#defineClass(x$1:String,x$2:java.nio.ByteBuffer,x$3:java.security.ProtectionDomain):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: Array[Byte], arg2: Int, arg3: Int, arg4: ProtectionDomain): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#defineClass(x$1:String,x$2:Array[Byte],x$3:Int,x$4:Int,x$5:java.security.ProtectionDomain):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: String, arg1: Array[Byte], arg2: Int, arg3: Int): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#defineClass(x$1:String,x$2:Array[Byte],x$3:Int,x$4:Int):Class[_]", "kind" : "final def"}, {"label" : "defineClass", "tail" : "(arg0: Array[Byte], arg1: Int, arg2: Int): Class[_]", "member" : "java.lang.ClassLoader.defineClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#defineClass(x$1:Array[Byte],x$2:Int,x$3:Int):Class[_]", "kind" : "final def"}, {"label" : "getClassLoadingLock", "tail" : "(arg0: String): AnyRef", "member" : "java.lang.ClassLoader.getClassLoadingLock", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#getClassLoadingLock(x$1:String):Object", "kind" : "def"}, {"label" : "loadClass", "tail" : "(arg0: String): Class[_]", "member" : "java.lang.ClassLoader.loadClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#loadClass(x$1:String):Class[_]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/ParentClassLoader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/ParentClassLoader.html", "kind" : "class"}, {"name" : "org.apache.spark.util.SerializableConfiguration", "shortDescription" : "Hadoop configuration but serializable.", "members_class" : [{"member" : "org.apache.spark.util.SerializableConfiguration#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Configuration", "member" : "org.apache.spark.util.SerializableConfiguration.value", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#value:org.apache.hadoop.conf.Configuration", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/SerializableConfiguration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/SerializableConfiguration.html", "kind" : "class"}, {"name" : "org.apache.spark.util.SizeEstimator", "shortDescription" : ":: DeveloperApi ::Estimates the sizes of Java objects (number of bytes of memory they occupy), for use inmemory-aware caches.", "object" : "org\/apache\/spark\/util\/SizeEstimator$.html", "members_object" : [{"label" : "estimate", "tail" : "(obj: AnyRef): Long", "member" : "org.apache.spark.util.SizeEstimator.estimate", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#estimate(obj:AnyRef):Long", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/SizeEstimator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.util.StatCounter", "shortDescription" : "A class for tracking the statistics of a set of numbers (count, mean and variance) in anumerically robust way.", "object" : "org\/apache\/spark\/util\/StatCounter$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.util.StatCounter.toString", "link" : "org\/apache\/spark\/util\/StatCounter.html#toString():String", "kind" : "def"}, {"label" : "sampleStdev", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.sampleStdev", "link" : "org\/apache\/spark\/util\/StatCounter.html#sampleStdev:Double", "kind" : "def"}, {"label" : "popStdev", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.popStdev", "link" : "org\/apache\/spark\/util\/StatCounter.html#popStdev:Double", "kind" : "def"}, {"label" : "stdev", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.stdev", "link" : "org\/apache\/spark\/util\/StatCounter.html#stdev:Double", "kind" : "def"}, {"label" : "sampleVariance", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.sampleVariance", "link" : "org\/apache\/spark\/util\/StatCounter.html#sampleVariance:Double", "kind" : "def"}, {"label" : "popVariance", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.popVariance", "link" : "org\/apache\/spark\/util\/StatCounter.html#popVariance:Double", "kind" : "def"}, {"label" : "variance", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.variance", "link" : "org\/apache\/spark\/util\/StatCounter.html#variance:Double", "kind" : "def"}, {"label" : "min", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.min", "link" : "org\/apache\/spark\/util\/StatCounter.html#min:Double", "kind" : "def"}, {"label" : "max", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.max", "link" : "org\/apache\/spark\/util\/StatCounter.html#max:Double", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.sum", "link" : "org\/apache\/spark\/util\/StatCounter.html#sum:Double", "kind" : "def"}, {"label" : "mean", "tail" : "(): Double", "member" : "org.apache.spark.util.StatCounter.mean", "link" : "org\/apache\/spark\/util\/StatCounter.html#mean:Double", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.util.StatCounter.count", "link" : "org\/apache\/spark\/util\/StatCounter.html#count:Long", "kind" : "def"}, {"label" : "copy", "tail" : "(): StatCounter", "member" : "org.apache.spark.util.StatCounter.copy", "link" : "org\/apache\/spark\/util\/StatCounter.html#copy():org.apache.spark.util.StatCounter", "kind" : "def"}, {"label" : "merge", "tail" : "(other: StatCounter): StatCounter", "member" : "org.apache.spark.util.StatCounter.merge", "link" : "org\/apache\/spark\/util\/StatCounter.html#merge(other:org.apache.spark.util.StatCounter):org.apache.spark.util.StatCounter", "kind" : "def"}, {"label" : "merge", "tail" : "(values: TraversableOnce[Double]): StatCounter", "member" : "org.apache.spark.util.StatCounter.merge", "link" : "org\/apache\/spark\/util\/StatCounter.html#merge(values:TraversableOnce[Double]):org.apache.spark.util.StatCounter", "kind" : "def"}, {"label" : "merge", "tail" : "(value: Double): StatCounter", "member" : "org.apache.spark.util.StatCounter.merge", "link" : "org\/apache\/spark\/util\/StatCounter.html#merge(value:Double):org.apache.spark.util.StatCounter", "kind" : "def"}, {"member" : "org.apache.spark.util.StatCounter#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.util.StatCounter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/StatCounter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/StatCounter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/StatCounter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/StatCounter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/StatCounter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/StatCounter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/StatCounter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/StatCounter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/StatCounter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/StatCounter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/StatCounter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/StatCounter.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/StatCounter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/StatCounter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/StatCounter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/StatCounter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/StatCounter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/StatCounter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(values: Double*): StatCounter", "member" : "org.apache.spark.util.StatCounter.apply", "link" : "org\/apache\/spark\/util\/StatCounter$.html#apply(values:Double*):org.apache.spark.util.StatCounter", "kind" : "def"}, {"label" : "apply", "tail" : "(values: TraversableOnce[Double]): StatCounter", "member" : "org.apache.spark.util.StatCounter.apply", "link" : "org\/apache\/spark\/util\/StatCounter$.html#apply(values:TraversableOnce[Double]):org.apache.spark.util.StatCounter", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/StatCounter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/StatCounter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/StatCounter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/StatCounter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/StatCounter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/StatCounter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/StatCounter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/StatCounter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/StatCounter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/StatCounter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/StatCounter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/StatCounter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/StatCounter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/StatCounter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/StatCounter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/StatCounter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/StatCounter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/StatCounter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/StatCounter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/StatCounter.html", "kind" : "class"}, {"name" : "org.apache.spark.util.TaskCompletionListener", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onTaskCompletion", "tail" : "(context: TaskContext): Unit", "member" : "org.apache.spark.util.TaskCompletionListener.onTaskCompletion", "link" : "org\/apache\/spark\/util\/TaskCompletionListener.html#onTaskCompletion(context:org.apache.spark.TaskContext):Unit", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::", "trait" : "org\/apache\/spark\/util\/TaskCompletionListener.html", "kind" : "trait"}, {"name" : "org.apache.spark.util.TaskFailureListener", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onTaskFailure", "tail" : "(context: TaskContext, error: Throwable): Unit", "member" : "org.apache.spark.util.TaskFailureListener.onTaskFailure", "link" : "org\/apache\/spark\/util\/TaskFailureListener.html#onTaskFailure(context:org.apache.spark.TaskContext,error:Throwable):Unit", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::", "trait" : "org\/apache\/spark\/util\/TaskFailureListener.html", "kind" : "trait"}], "org.apache.spark.api.plugin" : [{"name" : "org.apache.spark.api.plugin.DriverPlugin", "members_trait" : [{"label" : "shutdown", "tail" : "(): Unit", "member" : "org.apache.spark.api.plugin.DriverPlugin.shutdown", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#shutdown():Unit", "kind" : "def"}, {"label" : "receive", "tail" : "(message: Any): AnyRef", "member" : "org.apache.spark.api.plugin.DriverPlugin.receive", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#receive(message:Any):Object", "kind" : "def"}, {"label" : "registerMetrics", "tail" : "(appId: String, pluginContext: PluginContext): Unit", "member" : "org.apache.spark.api.plugin.DriverPlugin.registerMetrics", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#registerMetrics(appId:String,pluginContext:org.apache.spark.api.plugin.PluginContext):Unit", "kind" : "def"}, {"label" : "init", "tail" : "(sc: SparkContext, pluginContext: PluginContext): Map[String, String]", "member" : "org.apache.spark.api.plugin.DriverPlugin.init", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#init(sc:org.apache.spark.SparkContext,pluginContext:org.apache.spark.api.plugin.PluginContext):java.util.Map[String,String]", "kind" : "def"}, {"member" : "org.apache.spark.api.plugin.DriverPlugin#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ":: DeveloperApi ::Driver component of a SparkPlugin.", "trait" : "org\/apache\/spark\/api\/plugin\/DriverPlugin.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.plugin.ExecutorPlugin", "members_trait" : [{"label" : "onTaskFailed", "tail" : "(failureReason: TaskFailedReason): Unit", "member" : "org.apache.spark.api.plugin.ExecutorPlugin.onTaskFailed", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#onTaskFailed(failureReason:org.apache.spark.TaskFailedReason):Unit", "kind" : "def"}, {"label" : "onTaskSucceeded", "tail" : "(): Unit", "member" : "org.apache.spark.api.plugin.ExecutorPlugin.onTaskSucceeded", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#onTaskSucceeded():Unit", "kind" : "def"}, {"label" : "onTaskStart", "tail" : "(): Unit", "member" : "org.apache.spark.api.plugin.ExecutorPlugin.onTaskStart", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#onTaskStart():Unit", "kind" : "def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "org.apache.spark.api.plugin.ExecutorPlugin.shutdown", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#shutdown():Unit", "kind" : "def"}, {"label" : "init", "tail" : "(ctx: PluginContext, extraConf: Map[String, String]): Unit", "member" : "org.apache.spark.api.plugin.ExecutorPlugin.init", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#init(ctx:org.apache.spark.api.plugin.PluginContext,extraConf:java.util.Map[String,String]):Unit", "kind" : "def"}, {"member" : "org.apache.spark.api.plugin.ExecutorPlugin#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ":: DeveloperApi ::Executor component of a SparkPlugin.", "trait" : "org\/apache\/spark\/api\/plugin\/ExecutorPlugin.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.plugin.PluginContext", "members_trait" : [{"member" : "org.apache.spark.api.plugin.PluginContext#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "ask", "tail" : "(message: Any): AnyRef", "member" : "org.apache.spark.api.plugin.PluginContext.ask", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#ask(message:Any):Object", "kind" : "abstract def"}, {"label" : "send", "tail" : "(message: Any): Unit", "member" : "org.apache.spark.api.plugin.PluginContext.send", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#send(message:Any):Unit", "kind" : "abstract def"}, {"label" : "resources", "tail" : "(): Map[String, ResourceInformation]", "member" : "org.apache.spark.api.plugin.PluginContext.resources", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#resources():java.util.Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "abstract def"}, {"label" : "hostname", "tail" : "(): String", "member" : "org.apache.spark.api.plugin.PluginContext.hostname", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#hostname():String", "kind" : "abstract def"}, {"label" : "executorID", "tail" : "(): String", "member" : "org.apache.spark.api.plugin.PluginContext.executorID", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#executorID():String", "kind" : "abstract def"}, {"label" : "conf", "tail" : "(): SparkConf", "member" : "org.apache.spark.api.plugin.PluginContext.conf", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#conf():org.apache.spark.SparkConf", "kind" : "abstract def"}, {"label" : "metricRegistry", "tail" : "(): MetricRegistry", "member" : "org.apache.spark.api.plugin.PluginContext.metricRegistry", "link" : "org\/apache\/spark\/api\/plugin\/PluginContext.html#metricRegistry():com.codahale.metrics.MetricRegistry", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::Context information and operations for plugins loaded by Spark.", "trait" : "org\/apache\/spark\/api\/plugin\/PluginContext.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.plugin.SparkPlugin", "members_trait" : [{"member" : "org.apache.spark.api.plugin.SparkPlugin#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "executorPlugin", "tail" : "(): ExecutorPlugin", "member" : "org.apache.spark.api.plugin.SparkPlugin.executorPlugin", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#executorPlugin():org.apache.spark.api.plugin.ExecutorPlugin", "kind" : "abstract def"}, {"label" : "driverPlugin", "tail" : "(): DriverPlugin", "member" : "org.apache.spark.api.plugin.SparkPlugin.driverPlugin", "link" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html#driverPlugin():org.apache.spark.api.plugin.DriverPlugin", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::A plugin that can be dynamically loaded into a Spark application.", "trait" : "org\/apache\/spark\/api\/plugin\/SparkPlugin.html", "kind" : "trait"}], "org.apache.spark.scheduler" : [{"name" : "org.apache.spark.scheduler.AccumulableInfo", "shortDescription" : ":: DeveloperApi ::Information about an org.apache.spark.util.AccumulatorV2 modified during a task or stage.", "members_case class" : [{"label" : "value", "tail" : ": Option[Any]", "member" : "org.apache.spark.scheduler.AccumulableInfo.value", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#value:Option[Any]", "kind" : "val"}, {"label" : "update", "tail" : ": Option[Any]", "member" : "org.apache.spark.scheduler.AccumulableInfo.update", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#update:Option[Any]", "kind" : "val"}, {"label" : "name", "tail" : ": Option[String]", "member" : "org.apache.spark.scheduler.AccumulableInfo.name", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#name:Option[String]", "kind" : "val"}, {"label" : "id", "tail" : ": Long", "member" : "org.apache.spark.scheduler.AccumulableInfo.id", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#id:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/AccumulableInfo.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.InputFormatInfo", "shortDescription" : ":: DeveloperApi ::Parses and holds information about inputFormat (and files) specified as a parameter.", "object" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html", "members_class" : [{"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.scheduler.InputFormatInfo.equals", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.scheduler.InputFormatInfo.hashCode", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.scheduler.InputFormatInfo.toString", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#toString():String", "kind" : "def"}, {"label" : "mapredInputFormat", "tail" : ": Boolean", "member" : "org.apache.spark.scheduler.InputFormatInfo.mapredInputFormat", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#mapredInputFormat:Boolean", "kind" : "var"}, {"label" : "mapreduceInputFormat", "tail" : ": Boolean", "member" : "org.apache.spark.scheduler.InputFormatInfo.mapreduceInputFormat", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#mapreduceInputFormat:Boolean", "kind" : "var"}, {"member" : "org.apache.spark.scheduler.InputFormatInfo#<init>", "error" : "unsupported entity"}, {"label" : "path", "tail" : ": String", "member" : "org.apache.spark.scheduler.InputFormatInfo.path", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#path:String", "kind" : "val"}, {"label" : "inputFormatClazz", "tail" : ": Class[_]", "member" : "org.apache.spark.scheduler.InputFormatInfo.inputFormatClazz", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#inputFormatClazz:Class[_]", "kind" : "val"}, {"label" : "configuration", "tail" : ": Configuration", "member" : "org.apache.spark.scheduler.InputFormatInfo.configuration", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#configuration:org.apache.hadoop.conf.Configuration", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "computePreferredLocations", "tail" : "(formats: Seq[InputFormatInfo]): Map[String, Set[SplitInfo]]", "member" : "org.apache.spark.scheduler.InputFormatInfo.computePreferredLocations", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#computePreferredLocations(formats:Seq[org.apache.spark.scheduler.InputFormatInfo]):Map[String,scala.collection.immutable.Set[org.apache.spark.scheduler.SplitInfo]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/InputFormatInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/scheduler\/InputFormatInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.scheduler.JobResult", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/JobResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/JobResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ":: DeveloperApi ::A result of a job in the DAGScheduler.", "trait" : "org\/apache\/spark\/scheduler\/JobResult.html", "kind" : "trait"}, {"name" : "org.apache.spark.scheduler.JobSucceeded", "shortDescription" : "", "object" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/JobSucceeded$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.scheduler.MiscellaneousProcessDetails", "shortDescription" : ":: DeveloperApi ::Stores information about an Miscellaneous Process to pass from the scheduler to SparkListeners.", "members_class" : [{"member" : "org.apache.spark.scheduler.MiscellaneousProcessDetails#<init>", "error" : "unsupported entity"}, {"label" : "logUrlInfo", "tail" : ": Map[String, String]", "member" : "org.apache.spark.scheduler.MiscellaneousProcessDetails.logUrlInfo", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#logUrlInfo:Map[String,String]", "kind" : "val"}, {"label" : "cores", "tail" : ": Int", "member" : "org.apache.spark.scheduler.MiscellaneousProcessDetails.cores", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#cores:Int", "kind" : "val"}, {"label" : "hostPort", "tail" : ": String", "member" : "org.apache.spark.scheduler.MiscellaneousProcessDetails.hostPort", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#hostPort:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/scheduler\/MiscellaneousProcessDetails.html", "kind" : "class"}, {"name" : "org.apache.spark.scheduler.SchedulingMode", "shortDescription" : " \"FAIR\" and \"FIFO\" determines which policy is used   to order tasks amongst a Schedulable's sub-queues \"NONE\" is used when the a Schedulable has no sub-queues.", "object" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "NONE", "tail" : ": Value", "member" : "org.apache.spark.scheduler.SchedulingMode.NONE", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#NONE:org.apache.spark.scheduler.SchedulingMode.Value", "kind" : "val"}, {"label" : "FIFO", "tail" : ": Value", "member" : "org.apache.spark.scheduler.SchedulingMode.FIFO", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#FIFO:org.apache.spark.scheduler.SchedulingMode.Value", "kind" : "val"}, {"label" : "FAIR", "tail" : ": Value", "member" : "org.apache.spark.scheduler.SchedulingMode.FAIR", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#FAIR:org.apache.spark.scheduler.SchedulingMode.Value", "kind" : "val"}, {"label" : "SchedulingMode", "tail" : "", "member" : "org.apache.spark.scheduler.SchedulingMode.SchedulingMode", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#SchedulingMode=org.apache.spark.scheduler.SchedulingMode.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SchedulingMode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.scheduler.SparkListener", "shortDescription" : ":: DeveloperApi ::A default implementation for SparkListenerInterface that has no-op implementations forall callbacks.", "members_class" : [{"label" : "onResourceProfileAdded", "tail" : "(event: SparkListenerResourceProfileAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onResourceProfileAdded", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onResourceProfileAdded(event:org.apache.spark.scheduler.SparkListenerResourceProfileAdded):Unit", "kind" : "def"}, {"label" : "onOtherEvent", "tail" : "(event: SparkListenerEvent): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onOtherEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onOtherEvent(event:org.apache.spark.scheduler.SparkListenerEvent):Unit", "kind" : "def"}, {"label" : "onSpeculativeTaskSubmitted", "tail" : "(speculativeTask: SparkListenerSpeculativeTaskSubmitted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onSpeculativeTaskSubmitted", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onSpeculativeTaskSubmitted(speculativeTask:org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted):Unit", "kind" : "def"}, {"label" : "onBlockUpdated", "tail" : "(blockUpdated: SparkListenerBlockUpdated): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockUpdated", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onBlockUpdated(blockUpdated:org.apache.spark.scheduler.SparkListenerBlockUpdated):Unit", "kind" : "def"}, {"label" : "onUnschedulableTaskSetRemoved", "tail" : "(unschedulableTaskSetRemoved: SparkListenerUnschedulableTaskSetRemoved): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onUnschedulableTaskSetRemoved", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onUnschedulableTaskSetRemoved(unschedulableTaskSetRemoved:org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetRemoved):Unit", "kind" : "def"}, {"label" : "onUnschedulableTaskSetAdded", "tail" : "(unschedulableTaskSetAdded: SparkListenerUnschedulableTaskSetAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onUnschedulableTaskSetAdded", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onUnschedulableTaskSetAdded(unschedulableTaskSetAdded:org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetAdded):Unit", "kind" : "def"}, {"label" : "onNodeUnexcluded", "tail" : "(nodeUnexcluded: SparkListenerNodeUnexcluded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeUnexcluded", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onNodeUnexcluded(nodeUnexcluded:org.apache.spark.scheduler.SparkListenerNodeUnexcluded):Unit", "kind" : "def"}, {"label" : "onNodeUnblacklisted", "tail" : "(nodeUnblacklisted: SparkListenerNodeUnblacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeUnblacklisted", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onNodeUnblacklisted(nodeUnblacklisted:org.apache.spark.scheduler.SparkListenerNodeUnblacklisted):Unit", "kind" : "def"}, {"label" : "onNodeExcluded", "tail" : "(nodeExcluded: SparkListenerNodeExcluded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeExcluded", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onNodeExcluded(nodeExcluded:org.apache.spark.scheduler.SparkListenerNodeExcluded):Unit", "kind" : "def"}, {"label" : "onNodeBlacklisted", "tail" : "(nodeBlacklisted: SparkListenerNodeBlacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeBlacklisted", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onNodeBlacklisted(nodeBlacklisted:org.apache.spark.scheduler.SparkListenerNodeBlacklisted):Unit", "kind" : "def"}, {"label" : "onExecutorUnexcluded", "tail" : "(executorUnexcluded: SparkListenerExecutorUnexcluded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorUnexcluded", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorUnexcluded(executorUnexcluded:org.apache.spark.scheduler.SparkListenerExecutorUnexcluded):Unit", "kind" : "def"}, {"label" : "onExecutorUnblacklisted", "tail" : "(executorUnblacklisted: SparkListenerExecutorUnblacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorUnblacklisted", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorUnblacklisted(executorUnblacklisted:org.apache.spark.scheduler.SparkListenerExecutorUnblacklisted):Unit", "kind" : "def"}, {"label" : "onNodeExcludedForStage", "tail" : "(nodeExcludedForStage: SparkListenerNodeExcludedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeExcludedForStage", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onNodeExcludedForStage(nodeExcludedForStage:org.apache.spark.scheduler.SparkListenerNodeExcludedForStage):Unit", "kind" : "def"}, {"label" : "onNodeBlacklistedForStage", "tail" : "(nodeBlacklistedForStage: SparkListenerNodeBlacklistedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeBlacklistedForStage", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onNodeBlacklistedForStage(nodeBlacklistedForStage:org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorExcludedForStage", "tail" : "(executorExcludedForStage: SparkListenerExecutorExcludedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorExcludedForStage", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorExcludedForStage(executorExcludedForStage:org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorBlacklistedForStage", "tail" : "(executorBlacklistedForStage: SparkListenerExecutorBlacklistedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorBlacklistedForStage", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorBlacklistedForStage(executorBlacklistedForStage:org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorExcluded", "tail" : "(executorExcluded: SparkListenerExecutorExcluded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorExcluded", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorExcluded(executorExcluded:org.apache.spark.scheduler.SparkListenerExecutorExcluded):Unit", "kind" : "def"}, {"label" : "onExecutorBlacklisted", "tail" : "(executorBlacklisted: SparkListenerExecutorBlacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorBlacklisted", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorBlacklisted(executorBlacklisted:org.apache.spark.scheduler.SparkListenerExecutorBlacklisted):Unit", "kind" : "def"}, {"label" : "onExecutorRemoved", "tail" : "(executorRemoved: SparkListenerExecutorRemoved): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorRemoved", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorRemoved(executorRemoved:org.apache.spark.scheduler.SparkListenerExecutorRemoved):Unit", "kind" : "def"}, {"label" : "onExecutorAdded", "tail" : "(executorAdded: SparkListenerExecutorAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorAdded", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorAdded(executorAdded:org.apache.spark.scheduler.SparkListenerExecutorAdded):Unit", "kind" : "def"}, {"label" : "onStageExecutorMetrics", "tail" : "(executorMetrics: SparkListenerStageExecutorMetrics): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onStageExecutorMetrics", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onStageExecutorMetrics(executorMetrics:org.apache.spark.scheduler.SparkListenerStageExecutorMetrics):Unit", "kind" : "def"}, {"label" : "onExecutorMetricsUpdate", "tail" : "(executorMetricsUpdate: SparkListenerExecutorMetricsUpdate): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorMetricsUpdate", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onExecutorMetricsUpdate(executorMetricsUpdate:org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate):Unit", "kind" : "def"}, {"label" : "onApplicationEnd", "tail" : "(applicationEnd: SparkListenerApplicationEnd): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onApplicationEnd", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onApplicationEnd(applicationEnd:org.apache.spark.scheduler.SparkListenerApplicationEnd):Unit", "kind" : "def"}, {"label" : "onApplicationStart", "tail" : "(applicationStart: SparkListenerApplicationStart): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onApplicationStart", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onApplicationStart(applicationStart:org.apache.spark.scheduler.SparkListenerApplicationStart):Unit", "kind" : "def"}, {"label" : "onUnpersistRDD", "tail" : "(unpersistRDD: SparkListenerUnpersistRDD): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onUnpersistRDD", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onUnpersistRDD(unpersistRDD:org.apache.spark.scheduler.SparkListenerUnpersistRDD):Unit", "kind" : "def"}, {"label" : "onBlockManagerRemoved", "tail" : "(blockManagerRemoved: SparkListenerBlockManagerRemoved): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockManagerRemoved", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onBlockManagerRemoved(blockManagerRemoved:org.apache.spark.scheduler.SparkListenerBlockManagerRemoved):Unit", "kind" : "def"}, {"label" : "onBlockManagerAdded", "tail" : "(blockManagerAdded: SparkListenerBlockManagerAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockManagerAdded", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onBlockManagerAdded(blockManagerAdded:org.apache.spark.scheduler.SparkListenerBlockManagerAdded):Unit", "kind" : "def"}, {"label" : "onEnvironmentUpdate", "tail" : "(environmentUpdate: SparkListenerEnvironmentUpdate): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onEnvironmentUpdate", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onEnvironmentUpdate(environmentUpdate:org.apache.spark.scheduler.SparkListenerEnvironmentUpdate):Unit", "kind" : "def"}, {"label" : "onJobEnd", "tail" : "(jobEnd: SparkListenerJobEnd): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onJobEnd", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onJobEnd(jobEnd:org.apache.spark.scheduler.SparkListenerJobEnd):Unit", "kind" : "def"}, {"label" : "onJobStart", "tail" : "(jobStart: SparkListenerJobStart): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onJobStart", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onJobStart(jobStart:org.apache.spark.scheduler.SparkListenerJobStart):Unit", "kind" : "def"}, {"label" : "onTaskEnd", "tail" : "(taskEnd: SparkListenerTaskEnd): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onTaskEnd", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onTaskEnd(taskEnd:org.apache.spark.scheduler.SparkListenerTaskEnd):Unit", "kind" : "def"}, {"label" : "onTaskGettingResult", "tail" : "(taskGettingResult: SparkListenerTaskGettingResult): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onTaskGettingResult", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onTaskGettingResult(taskGettingResult:org.apache.spark.scheduler.SparkListenerTaskGettingResult):Unit", "kind" : "def"}, {"label" : "onTaskStart", "tail" : "(taskStart: SparkListenerTaskStart): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onTaskStart", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onTaskStart(taskStart:org.apache.spark.scheduler.SparkListenerTaskStart):Unit", "kind" : "def"}, {"label" : "onStageSubmitted", "tail" : "(stageSubmitted: SparkListenerStageSubmitted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onStageSubmitted", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onStageSubmitted(stageSubmitted:org.apache.spark.scheduler.SparkListenerStageSubmitted):Unit", "kind" : "def"}, {"label" : "onStageCompleted", "tail" : "(stageCompleted: SparkListenerStageCompleted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onStageCompleted", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#onStageCompleted(stageCompleted:org.apache.spark.scheduler.SparkListenerStageCompleted):Unit", "kind" : "def"}, {"member" : "org.apache.spark.scheduler.SparkListener#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/scheduler\/SparkListener.html", "kind" : "class"}, {"name" : "org.apache.spark.scheduler.SparkListenerApplicationEnd", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerApplicationEnd#<init>", "error" : "unsupported entity"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerApplicationEnd.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationEnd.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerApplicationStart", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerApplicationStart#<init>", "error" : "unsupported entity"}, {"label" : "driverAttributes", "tail" : ": Option[Map[String, String]]", "member" : "org.apache.spark.scheduler.SparkListenerApplicationStart.driverAttributes", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#driverAttributes:Option[scala.collection.Map[String,String]]", "kind" : "val"}, {"label" : "driverLogs", "tail" : ": Option[Map[String, String]]", "member" : "org.apache.spark.scheduler.SparkListenerApplicationStart.driverLogs", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#driverLogs:Option[scala.collection.Map[String,String]]", "kind" : "val"}, {"label" : "appAttemptId", "tail" : ": Option[String]", "member" : "org.apache.spark.scheduler.SparkListenerApplicationStart.appAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#appAttemptId:Option[String]", "kind" : "val"}, {"label" : "sparkUser", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerApplicationStart.sparkUser", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#sparkUser:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerApplicationStart.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#time:Long", "kind" : "val"}, {"label" : "appId", "tail" : ": Option[String]", "member" : "org.apache.spark.scheduler.SparkListenerApplicationStart.appId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#appId:Option[String]", "kind" : "val"}, {"label" : "appName", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerApplicationStart.appName", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#appName:String", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerApplicationStart.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerBlockManagerAdded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerBlockManagerAdded#<init>", "error" : "unsupported entity"}, {"label" : "maxOffHeapMem", "tail" : ": Option[Long]", "member" : "org.apache.spark.scheduler.SparkListenerBlockManagerAdded.maxOffHeapMem", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#maxOffHeapMem:Option[Long]", "kind" : "val"}, {"label" : "maxOnHeapMem", "tail" : ": Option[Long]", "member" : "org.apache.spark.scheduler.SparkListenerBlockManagerAdded.maxOnHeapMem", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#maxOnHeapMem:Option[Long]", "kind" : "val"}, {"label" : "maxMem", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerBlockManagerAdded.maxMem", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#maxMem:Long", "kind" : "val"}, {"label" : "blockManagerId", "tail" : ": BlockManagerId", "member" : "org.apache.spark.scheduler.SparkListenerBlockManagerAdded.blockManagerId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#blockManagerId:org.apache.spark.storage.BlockManagerId", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerBlockManagerAdded.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerAdded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerBlockManagerRemoved", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerBlockManagerRemoved#<init>", "error" : "unsupported entity"}, {"label" : "blockManagerId", "tail" : ": BlockManagerId", "member" : "org.apache.spark.scheduler.SparkListenerBlockManagerRemoved.blockManagerId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#blockManagerId:org.apache.spark.storage.BlockManagerId", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerBlockManagerRemoved.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerBlockManagerRemoved.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerBlockUpdated", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerBlockUpdated#<init>", "error" : "unsupported entity"}, {"label" : "blockUpdatedInfo", "tail" : ": BlockUpdatedInfo", "member" : "org.apache.spark.scheduler.SparkListenerBlockUpdated.blockUpdatedInfo", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#blockUpdatedInfo:org.apache.spark.storage.BlockUpdatedInfo", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerBlockUpdated.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerEnvironmentUpdate", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerEnvironmentUpdate#<init>", "error" : "unsupported entity"}, {"label" : "environmentDetails", "tail" : ": Map[String, Seq[(String, String)]]", "member" : "org.apache.spark.scheduler.SparkListenerEnvironmentUpdate.environmentDetails", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#environmentDetails:scala.collection.Map[String,Seq[(String,String)]]", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerEnvironmentUpdate.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerEvent", "members_trait" : [{"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/scheduler\/SparkListenerEvent.html", "kind" : "trait"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorAdded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorAdded#<init>", "error" : "unsupported entity"}, {"label" : "executorInfo", "tail" : ": ExecutorInfo", "member" : "org.apache.spark.scheduler.SparkListenerExecutorAdded.executorInfo", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#executorInfo:org.apache.spark.scheduler.cluster.ExecutorInfo", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorAdded.executorId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#executorId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerExecutorAdded.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorAdded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklisted", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklisted#<init>", "error" : "unsupported entity"}, {"label" : "taskFailures", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklisted.taskFailures", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#taskFailures:Int", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklisted.executorId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#executorId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklisted.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklisted.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage#<init>", "error" : "unsupported entity"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#stageId:Int", "kind" : "val"}, {"label" : "taskFailures", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage.taskFailures", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#taskFailures:Int", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage.executorId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#executorId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorBlacklistedForStage.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorExcluded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorExcluded#<init>", "error" : "unsupported entity"}, {"label" : "taskFailures", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerExecutorExcluded.taskFailures", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#taskFailures:Int", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorExcluded.executorId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#executorId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerExecutorExcluded.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcluded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage#<init>", "error" : "unsupported entity"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#stageId:Int", "kind" : "val"}, {"label" : "taskFailures", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage.taskFailures", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#taskFailures:Int", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage.executorId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#executorId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorExcludedForStage.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate", "shortDescription" : "Periodic updates from executors.", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate#<init>", "error" : "unsupported entity"}, {"label" : "executorUpdates", "tail" : ": Map[(Int, Int), ExecutorMetrics]", "member" : "org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate.executorUpdates", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#executorUpdates:scala.collection.Map[(Int,Int),org.apache.spark.executor.ExecutorMetrics]", "kind" : "val"}, {"label" : "accumUpdates", "tail" : ": Seq[(Long, Int, Int, Seq[AccumulableInfo])]", "member" : "org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate.accumUpdates", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#accumUpdates:Seq[(Long,Int,Int,Seq[org.apache.spark.scheduler.AccumulableInfo])]", "kind" : "val"}, {"label" : "execId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate.execId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#execId:String", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorMetricsUpdate.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorRemoved", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorRemoved#<init>", "error" : "unsupported entity"}, {"label" : "reason", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorRemoved.reason", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#reason:String", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorRemoved.executorId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#executorId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerExecutorRemoved.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorRemoved.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorUnblacklisted", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorUnblacklisted#<init>", "error" : "unsupported entity"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorUnblacklisted.executorId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#executorId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerExecutorUnblacklisted.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnblacklisted.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerExecutorUnexcluded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerExecutorUnexcluded#<init>", "error" : "unsupported entity"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerExecutorUnexcluded.executorId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#executorId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerExecutorUnexcluded.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerExecutorUnexcluded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerJobEnd", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerJobEnd#<init>", "error" : "unsupported entity"}, {"label" : "jobResult", "tail" : ": JobResult", "member" : "org.apache.spark.scheduler.SparkListenerJobEnd.jobResult", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#jobResult:org.apache.spark.scheduler.JobResult", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerJobEnd.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#time:Long", "kind" : "val"}, {"label" : "jobId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerJobEnd.jobId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#jobId:Int", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerJobEnd.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerJobStart", "shortDescription" : "", "members_case class" : [{"label" : "stageIds", "tail" : ": Seq[Int]", "member" : "org.apache.spark.scheduler.SparkListenerJobStart.stageIds", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#stageIds:Seq[Int]", "kind" : "val"}, {"member" : "org.apache.spark.scheduler.SparkListenerJobStart#<init>", "error" : "unsupported entity"}, {"label" : "properties", "tail" : ": Properties", "member" : "org.apache.spark.scheduler.SparkListenerJobStart.properties", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#properties:java.util.Properties", "kind" : "val"}, {"label" : "stageInfos", "tail" : ": Seq[StageInfo]", "member" : "org.apache.spark.scheduler.SparkListenerJobStart.stageInfos", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#stageInfos:Seq[org.apache.spark.scheduler.StageInfo]", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerJobStart.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#time:Long", "kind" : "val"}, {"label" : "jobId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerJobStart.jobId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#jobId:Int", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerJobStart.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerLogStart", "shortDescription" : "An internal class that describes the metadata of an event log.", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerLogStart#<init>", "error" : "unsupported entity"}, {"label" : "sparkVersion", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerLogStart.sparkVersion", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#sparkVersion:String", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerLogStart.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerMiscellaneousProcessAdded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerMiscellaneousProcessAdded#<init>", "error" : "unsupported entity"}, {"label" : "info", "tail" : ": MiscellaneousProcessDetails", "member" : "org.apache.spark.scheduler.SparkListenerMiscellaneousProcessAdded.info", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#info:org.apache.spark.scheduler.MiscellaneousProcessDetails", "kind" : "val"}, {"label" : "processId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerMiscellaneousProcessAdded.processId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#processId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerMiscellaneousProcessAdded.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerMiscellaneousProcessAdded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerNodeBlacklisted", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklisted#<init>", "error" : "unsupported entity"}, {"label" : "executorFailures", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklisted.executorFailures", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#executorFailures:Int", "kind" : "val"}, {"label" : "hostId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklisted.hostId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#hostId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklisted.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklisted.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage#<init>", "error" : "unsupported entity"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#stageId:Int", "kind" : "val"}, {"label" : "executorFailures", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage.executorFailures", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#executorFailures:Int", "kind" : "val"}, {"label" : "hostId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage.hostId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#hostId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerNodeBlacklistedForStage.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerNodeExcluded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerNodeExcluded#<init>", "error" : "unsupported entity"}, {"label" : "executorFailures", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerNodeExcluded.executorFailures", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#executorFailures:Int", "kind" : "val"}, {"label" : "hostId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerNodeExcluded.hostId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#hostId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerNodeExcluded.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcluded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerNodeExcludedForStage", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerNodeExcludedForStage#<init>", "error" : "unsupported entity"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerNodeExcludedForStage.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerNodeExcludedForStage.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#stageId:Int", "kind" : "val"}, {"label" : "executorFailures", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerNodeExcludedForStage.executorFailures", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#executorFailures:Int", "kind" : "val"}, {"label" : "hostId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerNodeExcludedForStage.hostId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#hostId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerNodeExcludedForStage.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerNodeExcludedForStage.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerNodeUnblacklisted", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerNodeUnblacklisted#<init>", "error" : "unsupported entity"}, {"label" : "hostId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerNodeUnblacklisted.hostId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#hostId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerNodeUnblacklisted.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnblacklisted.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerNodeUnexcluded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerNodeUnexcluded#<init>", "error" : "unsupported entity"}, {"label" : "hostId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerNodeUnexcluded.hostId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#hostId:String", "kind" : "val"}, {"label" : "time", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SparkListenerNodeUnexcluded.time", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#time:Long", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerNodeUnexcluded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerResourceProfileAdded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerResourceProfileAdded#<init>", "error" : "unsupported entity"}, {"label" : "resourceProfile", "tail" : ": ResourceProfile", "member" : "org.apache.spark.scheduler.SparkListenerResourceProfileAdded.resourceProfile", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#resourceProfile:org.apache.spark.resource.ResourceProfile", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerResourceProfileAdded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted#<init>", "error" : "unsupported entity"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#stageId:Int", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerSpeculativeTaskSubmitted.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerStageCompleted", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerStageCompleted#<init>", "error" : "unsupported entity"}, {"label" : "stageInfo", "tail" : ": StageInfo", "member" : "org.apache.spark.scheduler.SparkListenerStageCompleted.stageInfo", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#stageInfo:org.apache.spark.scheduler.StageInfo", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerStageCompleted.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerStageExecutorMetrics", "shortDescription" : "Peak metric values for the executor for the stage, written to the history log at stagecompletion.", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerStageExecutorMetrics#<init>", "error" : "unsupported entity"}, {"label" : "executorMetrics", "tail" : ": ExecutorMetrics", "member" : "org.apache.spark.scheduler.SparkListenerStageExecutorMetrics.executorMetrics", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#executorMetrics:org.apache.spark.executor.ExecutorMetrics", "kind" : "val"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerStageExecutorMetrics.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerStageExecutorMetrics.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#stageId:Int", "kind" : "val"}, {"label" : "execId", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerStageExecutorMetrics.execId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#execId:String", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerStageExecutorMetrics.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerStageSubmitted", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerStageSubmitted#<init>", "error" : "unsupported entity"}, {"label" : "properties", "tail" : ": Properties", "member" : "org.apache.spark.scheduler.SparkListenerStageSubmitted.properties", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#properties:java.util.Properties", "kind" : "val"}, {"label" : "stageInfo", "tail" : ": StageInfo", "member" : "org.apache.spark.scheduler.SparkListenerStageSubmitted.stageInfo", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#stageInfo:org.apache.spark.scheduler.StageInfo", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerStageSubmitted.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerTaskEnd", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerTaskEnd#<init>", "error" : "unsupported entity"}, {"label" : "taskMetrics", "tail" : ": TaskMetrics", "member" : "org.apache.spark.scheduler.SparkListenerTaskEnd.taskMetrics", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#taskMetrics:org.apache.spark.executor.TaskMetrics", "kind" : "val"}, {"label" : "taskExecutorMetrics", "tail" : ": ExecutorMetrics", "member" : "org.apache.spark.scheduler.SparkListenerTaskEnd.taskExecutorMetrics", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#taskExecutorMetrics:org.apache.spark.executor.ExecutorMetrics", "kind" : "val"}, {"label" : "taskInfo", "tail" : ": TaskInfo", "member" : "org.apache.spark.scheduler.SparkListenerTaskEnd.taskInfo", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#taskInfo:org.apache.spark.scheduler.TaskInfo", "kind" : "val"}, {"label" : "reason", "tail" : ": TaskEndReason", "member" : "org.apache.spark.scheduler.SparkListenerTaskEnd.reason", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#reason:org.apache.spark.TaskEndReason", "kind" : "val"}, {"label" : "taskType", "tail" : ": String", "member" : "org.apache.spark.scheduler.SparkListenerTaskEnd.taskType", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#taskType:String", "kind" : "val"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerTaskEnd.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerTaskEnd.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#stageId:Int", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerTaskEnd.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerTaskGettingResult", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerTaskGettingResult#<init>", "error" : "unsupported entity"}, {"label" : "taskInfo", "tail" : ": TaskInfo", "member" : "org.apache.spark.scheduler.SparkListenerTaskGettingResult.taskInfo", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#taskInfo:org.apache.spark.scheduler.TaskInfo", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerTaskGettingResult.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerTaskStart", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerTaskStart#<init>", "error" : "unsupported entity"}, {"label" : "taskInfo", "tail" : ": TaskInfo", "member" : "org.apache.spark.scheduler.SparkListenerTaskStart.taskInfo", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#taskInfo:org.apache.spark.scheduler.TaskInfo", "kind" : "val"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerTaskStart.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerTaskStart.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#stageId:Int", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerTaskStart.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerUnpersistRDD", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerUnpersistRDD#<init>", "error" : "unsupported entity"}, {"label" : "rddId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerUnpersistRDD.rddId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#rddId:Int", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerUnpersistRDD.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetAdded", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetAdded#<init>", "error" : "unsupported entity"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetAdded.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetAdded.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#stageId:Int", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetAdded.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetRemoved", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetRemoved#<init>", "error" : "unsupported entity"}, {"label" : "stageAttemptId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetRemoved.stageAttemptId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#stageAttemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetRemoved.stageId", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#stageId:Int", "kind" : "val"}, {"label" : "logEvent", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.SparkListenerEvent.logEvent", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#logEvent:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/scheduler\/SparkListenerUnschedulableTaskSetRemoved.html", "kind" : "case class"}, {"name" : "org.apache.spark.scheduler.SplitInfo", "shortDescription" : "", "object" : "org\/apache\/spark\/scheduler\/SplitInfo$.html", "members_class" : [{"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.scheduler.SplitInfo.equals", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.scheduler.SplitInfo.hashCode", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.scheduler.SplitInfo.toString", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#toString():String", "kind" : "def"}, {"member" : "org.apache.spark.scheduler.SplitInfo#<init>", "error" : "unsupported entity"}, {"label" : "underlyingSplit", "tail" : ": Any", "member" : "org.apache.spark.scheduler.SplitInfo.underlyingSplit", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#underlyingSplit:Any", "kind" : "val"}, {"label" : "length", "tail" : ": Long", "member" : "org.apache.spark.scheduler.SplitInfo.length", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#length:Long", "kind" : "val"}, {"label" : "path", "tail" : ": String", "member" : "org.apache.spark.scheduler.SplitInfo.path", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#path:String", "kind" : "val"}, {"label" : "hostLocation", "tail" : ": String", "member" : "org.apache.spark.scheduler.SplitInfo.hostLocation", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#hostLocation:String", "kind" : "val"}, {"label" : "inputFormatClazz", "tail" : ": Class[_]", "member" : "org.apache.spark.scheduler.SplitInfo.inputFormatClazz", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#inputFormatClazz:Class[_]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SplitInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toSplitInfo", "tail" : "(inputFormatClazz: Class[_], path: String, mapreduceSplit: InputSplit): Seq[SplitInfo]", "member" : "org.apache.spark.scheduler.SplitInfo.toSplitInfo", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#toSplitInfo(inputFormatClazz:Class[_],path:String,mapreduceSplit:org.apache.hadoop.mapreduce.InputSplit):Seq[org.apache.spark.scheduler.SplitInfo]", "kind" : "def"}, {"label" : "toSplitInfo", "tail" : "(inputFormatClazz: Class[_], path: String, mapredSplit: InputSplit): Seq[SplitInfo]", "member" : "org.apache.spark.scheduler.SplitInfo.toSplitInfo", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#toSplitInfo(inputFormatClazz:Class[_],path:String,mapredSplit:org.apache.hadoop.mapred.InputSplit):Seq[org.apache.spark.scheduler.SplitInfo]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/SplitInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/scheduler\/SplitInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.scheduler.StageInfo", "shortDescription" : ":: DeveloperApi ::Stores information about a stage to pass from the scheduler to SparkListeners.", "members_class" : [{"label" : "attemptNumber", "tail" : "(): Int", "member" : "org.apache.spark.scheduler.StageInfo.attemptNumber", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#attemptNumber():Int", "kind" : "def"}, {"label" : "stageFailed", "tail" : "(reason: String): Unit", "member" : "org.apache.spark.scheduler.StageInfo.stageFailed", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#stageFailed(reason:String):Unit", "kind" : "def"}, {"label" : "accumulables", "tail" : ": HashMap[Long, AccumulableInfo]", "member" : "org.apache.spark.scheduler.StageInfo.accumulables", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#accumulables:scala.collection.mutable.HashMap[Long,org.apache.spark.scheduler.AccumulableInfo]", "kind" : "val"}, {"label" : "failureReason", "tail" : ": Option[String]", "member" : "org.apache.spark.scheduler.StageInfo.failureReason", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#failureReason:Option[String]", "kind" : "var"}, {"label" : "completionTime", "tail" : ": Option[Long]", "member" : "org.apache.spark.scheduler.StageInfo.completionTime", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#completionTime:Option[Long]", "kind" : "var"}, {"label" : "submissionTime", "tail" : ": Option[Long]", "member" : "org.apache.spark.scheduler.StageInfo.submissionTime", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#submissionTime:Option[Long]", "kind" : "var"}, {"member" : "org.apache.spark.scheduler.StageInfo#<init>", "error" : "unsupported entity"}, {"label" : "resourceProfileId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.StageInfo.resourceProfileId", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#resourceProfileId:Int", "kind" : "val"}, {"label" : "taskMetrics", "tail" : ": TaskMetrics", "member" : "org.apache.spark.scheduler.StageInfo.taskMetrics", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#taskMetrics:org.apache.spark.executor.TaskMetrics", "kind" : "val"}, {"label" : "details", "tail" : ": String", "member" : "org.apache.spark.scheduler.StageInfo.details", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#details:String", "kind" : "val"}, {"label" : "parentIds", "tail" : ": Seq[Int]", "member" : "org.apache.spark.scheduler.StageInfo.parentIds", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#parentIds:Seq[Int]", "kind" : "val"}, {"label" : "rddInfos", "tail" : ": Seq[RDDInfo]", "member" : "org.apache.spark.scheduler.StageInfo.rddInfos", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#rddInfos:Seq[org.apache.spark.storage.RDDInfo]", "kind" : "val"}, {"label" : "numTasks", "tail" : ": Int", "member" : "org.apache.spark.scheduler.StageInfo.numTasks", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#numTasks:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.scheduler.StageInfo.name", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#name:String", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.StageInfo.stageId", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#stageId:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/StageInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/scheduler\/StageInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.scheduler.StatsReportListener", "shortDescription" : ":: DeveloperApi ::Simple SparkListener that logs a few summary statistics when each stage completes.", "members_class" : [{"label" : "onStageCompleted", "tail" : "(stageCompleted: SparkListenerStageCompleted): Unit", "member" : "org.apache.spark.scheduler.StatsReportListener.onStageCompleted", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onStageCompleted(stageCompleted:org.apache.spark.scheduler.SparkListenerStageCompleted):Unit", "kind" : "def"}, {"label" : "onTaskEnd", "tail" : "(taskEnd: SparkListenerTaskEnd): Unit", "member" : "org.apache.spark.scheduler.StatsReportListener.onTaskEnd", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onTaskEnd(taskEnd:org.apache.spark.scheduler.SparkListenerTaskEnd):Unit", "kind" : "def"}, {"member" : "org.apache.spark.scheduler.StatsReportListener#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#logName:String", "kind" : "def"}, {"label" : "onResourceProfileAdded", "tail" : "(event: SparkListenerResourceProfileAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onResourceProfileAdded", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onResourceProfileAdded(event:org.apache.spark.scheduler.SparkListenerResourceProfileAdded):Unit", "kind" : "def"}, {"label" : "onOtherEvent", "tail" : "(event: SparkListenerEvent): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onOtherEvent", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onOtherEvent(event:org.apache.spark.scheduler.SparkListenerEvent):Unit", "kind" : "def"}, {"label" : "onSpeculativeTaskSubmitted", "tail" : "(speculativeTask: SparkListenerSpeculativeTaskSubmitted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onSpeculativeTaskSubmitted", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onSpeculativeTaskSubmitted(speculativeTask:org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted):Unit", "kind" : "def"}, {"label" : "onBlockUpdated", "tail" : "(blockUpdated: SparkListenerBlockUpdated): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockUpdated", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onBlockUpdated(blockUpdated:org.apache.spark.scheduler.SparkListenerBlockUpdated):Unit", "kind" : "def"}, {"label" : "onUnschedulableTaskSetRemoved", "tail" : "(unschedulableTaskSetRemoved: SparkListenerUnschedulableTaskSetRemoved): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onUnschedulableTaskSetRemoved", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onUnschedulableTaskSetRemoved(unschedulableTaskSetRemoved:org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetRemoved):Unit", "kind" : "def"}, {"label" : "onUnschedulableTaskSetAdded", "tail" : "(unschedulableTaskSetAdded: SparkListenerUnschedulableTaskSetAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onUnschedulableTaskSetAdded", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onUnschedulableTaskSetAdded(unschedulableTaskSetAdded:org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetAdded):Unit", "kind" : "def"}, {"label" : "onNodeUnexcluded", "tail" : "(nodeUnexcluded: SparkListenerNodeUnexcluded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeUnexcluded", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onNodeUnexcluded(nodeUnexcluded:org.apache.spark.scheduler.SparkListenerNodeUnexcluded):Unit", "kind" : "def"}, {"label" : "onNodeUnblacklisted", "tail" : "(nodeUnblacklisted: SparkListenerNodeUnblacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeUnblacklisted", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onNodeUnblacklisted(nodeUnblacklisted:org.apache.spark.scheduler.SparkListenerNodeUnblacklisted):Unit", "kind" : "def"}, {"label" : "onNodeExcluded", "tail" : "(nodeExcluded: SparkListenerNodeExcluded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeExcluded", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onNodeExcluded(nodeExcluded:org.apache.spark.scheduler.SparkListenerNodeExcluded):Unit", "kind" : "def"}, {"label" : "onNodeBlacklisted", "tail" : "(nodeBlacklisted: SparkListenerNodeBlacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeBlacklisted", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onNodeBlacklisted(nodeBlacklisted:org.apache.spark.scheduler.SparkListenerNodeBlacklisted):Unit", "kind" : "def"}, {"label" : "onExecutorUnexcluded", "tail" : "(executorUnexcluded: SparkListenerExecutorUnexcluded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorUnexcluded", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorUnexcluded(executorUnexcluded:org.apache.spark.scheduler.SparkListenerExecutorUnexcluded):Unit", "kind" : "def"}, {"label" : "onExecutorUnblacklisted", "tail" : "(executorUnblacklisted: SparkListenerExecutorUnblacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorUnblacklisted", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorUnblacklisted(executorUnblacklisted:org.apache.spark.scheduler.SparkListenerExecutorUnblacklisted):Unit", "kind" : "def"}, {"label" : "onNodeExcludedForStage", "tail" : "(nodeExcludedForStage: SparkListenerNodeExcludedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeExcludedForStage", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onNodeExcludedForStage(nodeExcludedForStage:org.apache.spark.scheduler.SparkListenerNodeExcludedForStage):Unit", "kind" : "def"}, {"label" : "onNodeBlacklistedForStage", "tail" : "(nodeBlacklistedForStage: SparkListenerNodeBlacklistedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onNodeBlacklistedForStage", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onNodeBlacklistedForStage(nodeBlacklistedForStage:org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorExcludedForStage", "tail" : "(executorExcludedForStage: SparkListenerExecutorExcludedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorExcludedForStage", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorExcludedForStage(executorExcludedForStage:org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorBlacklistedForStage", "tail" : "(executorBlacklistedForStage: SparkListenerExecutorBlacklistedForStage): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorBlacklistedForStage", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorBlacklistedForStage(executorBlacklistedForStage:org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorExcluded", "tail" : "(executorExcluded: SparkListenerExecutorExcluded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorExcluded", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorExcluded(executorExcluded:org.apache.spark.scheduler.SparkListenerExecutorExcluded):Unit", "kind" : "def"}, {"label" : "onExecutorBlacklisted", "tail" : "(executorBlacklisted: SparkListenerExecutorBlacklisted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorBlacklisted", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorBlacklisted(executorBlacklisted:org.apache.spark.scheduler.SparkListenerExecutorBlacklisted):Unit", "kind" : "def"}, {"label" : "onExecutorRemoved", "tail" : "(executorRemoved: SparkListenerExecutorRemoved): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorRemoved", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorRemoved(executorRemoved:org.apache.spark.scheduler.SparkListenerExecutorRemoved):Unit", "kind" : "def"}, {"label" : "onExecutorAdded", "tail" : "(executorAdded: SparkListenerExecutorAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorAdded", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorAdded(executorAdded:org.apache.spark.scheduler.SparkListenerExecutorAdded):Unit", "kind" : "def"}, {"label" : "onStageExecutorMetrics", "tail" : "(executorMetrics: SparkListenerStageExecutorMetrics): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onStageExecutorMetrics", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onStageExecutorMetrics(executorMetrics:org.apache.spark.scheduler.SparkListenerStageExecutorMetrics):Unit", "kind" : "def"}, {"label" : "onExecutorMetricsUpdate", "tail" : "(executorMetricsUpdate: SparkListenerExecutorMetricsUpdate): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onExecutorMetricsUpdate", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onExecutorMetricsUpdate(executorMetricsUpdate:org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate):Unit", "kind" : "def"}, {"label" : "onApplicationEnd", "tail" : "(applicationEnd: SparkListenerApplicationEnd): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onApplicationEnd", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onApplicationEnd(applicationEnd:org.apache.spark.scheduler.SparkListenerApplicationEnd):Unit", "kind" : "def"}, {"label" : "onApplicationStart", "tail" : "(applicationStart: SparkListenerApplicationStart): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onApplicationStart", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onApplicationStart(applicationStart:org.apache.spark.scheduler.SparkListenerApplicationStart):Unit", "kind" : "def"}, {"label" : "onUnpersistRDD", "tail" : "(unpersistRDD: SparkListenerUnpersistRDD): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onUnpersistRDD", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onUnpersistRDD(unpersistRDD:org.apache.spark.scheduler.SparkListenerUnpersistRDD):Unit", "kind" : "def"}, {"label" : "onBlockManagerRemoved", "tail" : "(blockManagerRemoved: SparkListenerBlockManagerRemoved): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockManagerRemoved", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onBlockManagerRemoved(blockManagerRemoved:org.apache.spark.scheduler.SparkListenerBlockManagerRemoved):Unit", "kind" : "def"}, {"label" : "onBlockManagerAdded", "tail" : "(blockManagerAdded: SparkListenerBlockManagerAdded): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onBlockManagerAdded", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onBlockManagerAdded(blockManagerAdded:org.apache.spark.scheduler.SparkListenerBlockManagerAdded):Unit", "kind" : "def"}, {"label" : "onEnvironmentUpdate", "tail" : "(environmentUpdate: SparkListenerEnvironmentUpdate): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onEnvironmentUpdate", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onEnvironmentUpdate(environmentUpdate:org.apache.spark.scheduler.SparkListenerEnvironmentUpdate):Unit", "kind" : "def"}, {"label" : "onJobEnd", "tail" : "(jobEnd: SparkListenerJobEnd): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onJobEnd", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onJobEnd(jobEnd:org.apache.spark.scheduler.SparkListenerJobEnd):Unit", "kind" : "def"}, {"label" : "onJobStart", "tail" : "(jobStart: SparkListenerJobStart): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onJobStart", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onJobStart(jobStart:org.apache.spark.scheduler.SparkListenerJobStart):Unit", "kind" : "def"}, {"label" : "onTaskGettingResult", "tail" : "(taskGettingResult: SparkListenerTaskGettingResult): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onTaskGettingResult", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onTaskGettingResult(taskGettingResult:org.apache.spark.scheduler.SparkListenerTaskGettingResult):Unit", "kind" : "def"}, {"label" : "onTaskStart", "tail" : "(taskStart: SparkListenerTaskStart): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onTaskStart", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onTaskStart(taskStart:org.apache.spark.scheduler.SparkListenerTaskStart):Unit", "kind" : "def"}, {"label" : "onStageSubmitted", "tail" : "(stageSubmitted: SparkListenerStageSubmitted): Unit", "member" : "org.apache.spark.scheduler.SparkListener.onStageSubmitted", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#onStageSubmitted(stageSubmitted:org.apache.spark.scheduler.SparkListenerStageSubmitted):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/StatsReportListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/scheduler\/StatsReportListener.html", "kind" : "class"}, {"name" : "org.apache.spark.scheduler.TaskInfo", "shortDescription" : ":: DeveloperApi ::Information about a running task attempt inside a TaskSet.", "members_class" : [{"label" : "duration", "tail" : "(): Long", "member" : "org.apache.spark.scheduler.TaskInfo.duration", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#duration:Long", "kind" : "def"}, {"label" : "id", "tail" : "(): String", "member" : "org.apache.spark.scheduler.TaskInfo.id", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#id:String", "kind" : "def"}, {"label" : "status", "tail" : "(): String", "member" : "org.apache.spark.scheduler.TaskInfo.status", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#status:String", "kind" : "def"}, {"label" : "running", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.TaskInfo.running", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#running:Boolean", "kind" : "def"}, {"label" : "successful", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.TaskInfo.successful", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#successful:Boolean", "kind" : "def"}, {"label" : "finished", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.TaskInfo.finished", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#finished:Boolean", "kind" : "def"}, {"label" : "gettingResult", "tail" : "(): Boolean", "member" : "org.apache.spark.scheduler.TaskInfo.gettingResult", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#gettingResult:Boolean", "kind" : "def"}, {"label" : "killed", "tail" : ": Boolean", "member" : "org.apache.spark.scheduler.TaskInfo.killed", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#killed:Boolean", "kind" : "var"}, {"label" : "failed", "tail" : ": Boolean", "member" : "org.apache.spark.scheduler.TaskInfo.failed", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#failed:Boolean", "kind" : "var"}, {"label" : "finishTime", "tail" : ": Long", "member" : "org.apache.spark.scheduler.TaskInfo.finishTime", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#finishTime:Long", "kind" : "var"}, {"label" : "accumulables", "tail" : "(): Seq[AccumulableInfo]", "member" : "org.apache.spark.scheduler.TaskInfo.accumulables", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#accumulables:Seq[org.apache.spark.scheduler.AccumulableInfo]", "kind" : "def"}, {"label" : "gettingResultTime", "tail" : ": Long", "member" : "org.apache.spark.scheduler.TaskInfo.gettingResultTime", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#gettingResultTime:Long", "kind" : "var"}, {"member" : "org.apache.spark.scheduler.TaskInfo#<init>", "error" : "unsupported entity"}, {"label" : "speculative", "tail" : ": Boolean", "member" : "org.apache.spark.scheduler.TaskInfo.speculative", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#speculative:Boolean", "kind" : "val"}, {"label" : "taskLocality", "tail" : ": TaskLocality", "member" : "org.apache.spark.scheduler.TaskInfo.taskLocality", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#taskLocality:org.apache.spark.scheduler.TaskLocality.TaskLocality", "kind" : "val"}, {"label" : "host", "tail" : ": String", "member" : "org.apache.spark.scheduler.TaskInfo.host", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#host:String", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.scheduler.TaskInfo.executorId", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#executorId:String", "kind" : "val"}, {"label" : "launchTime", "tail" : ": Long", "member" : "org.apache.spark.scheduler.TaskInfo.launchTime", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#launchTime:Long", "kind" : "val"}, {"label" : "attemptNumber", "tail" : ": Int", "member" : "org.apache.spark.scheduler.TaskInfo.attemptNumber", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#attemptNumber:Int", "kind" : "val"}, {"label" : "index", "tail" : ": Int", "member" : "org.apache.spark.scheduler.TaskInfo.index", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#index:Int", "kind" : "val"}, {"label" : "taskId", "tail" : ": Long", "member" : "org.apache.spark.scheduler.TaskInfo.taskId", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#taskId:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/TaskInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/scheduler\/TaskInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.scheduler.TaskLocality", "shortDescription" : "", "object" : "org\/apache\/spark\/scheduler\/TaskLocality$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "isAllowed", "tail" : "(constraint: TaskLocality, condition: TaskLocality): Boolean", "member" : "org.apache.spark.scheduler.TaskLocality.isAllowed", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#isAllowed(constraint:org.apache.spark.scheduler.TaskLocality.TaskLocality,condition:org.apache.spark.scheduler.TaskLocality.TaskLocality):Boolean", "kind" : "def"}, {"label" : "TaskLocality", "tail" : "", "member" : "org.apache.spark.scheduler.TaskLocality.TaskLocality", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#TaskLocality=org.apache.spark.scheduler.TaskLocality.Value", "kind" : "type"}, {"label" : "ANY", "tail" : ": Value", "member" : "org.apache.spark.scheduler.TaskLocality.ANY", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#ANY:org.apache.spark.scheduler.TaskLocality.Value", "kind" : "val"}, {"label" : "RACK_LOCAL", "tail" : ": Value", "member" : "org.apache.spark.scheduler.TaskLocality.RACK_LOCAL", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#RACK_LOCAL:org.apache.spark.scheduler.TaskLocality.Value", "kind" : "val"}, {"label" : "NO_PREF", "tail" : ": Value", "member" : "org.apache.spark.scheduler.TaskLocality.NO_PREF", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#NO_PREF:org.apache.spark.scheduler.TaskLocality.Value", "kind" : "val"}, {"label" : "NODE_LOCAL", "tail" : ": Value", "member" : "org.apache.spark.scheduler.TaskLocality.NODE_LOCAL", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#NODE_LOCAL:org.apache.spark.scheduler.TaskLocality.Value", "kind" : "val"}, {"label" : "PROCESS_LOCAL", "tail" : ": Value", "member" : "org.apache.spark.scheduler.TaskLocality.PROCESS_LOCAL", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#PROCESS_LOCAL:org.apache.spark.scheduler.TaskLocality.Value", "kind" : "val"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/TaskLocality$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.memory" : [{"name" : "org.apache.spark.memory.MemoryConsumer", "shortDescription" : "A memory consumer of TaskMemoryManager that supports spilling.", "members_class" : [{"label" : "freeMemory", "tail" : "(size: Long): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freeMemory", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#freeMemory(size:Long):Unit", "kind" : "def"}, {"label" : "acquireMemory", "tail" : "(size: Long): Long", "member" : "org.apache.spark.memory.MemoryConsumer.acquireMemory", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#acquireMemory(size:Long):Long", "kind" : "def"}, {"label" : "freePage", "tail" : "(page: MemoryBlock): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freePage", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#freePage(page:org.apache.spark.unsafe.memory.MemoryBlock):Unit", "kind" : "def"}, {"label" : "allocatePage", "tail" : "(required: Long): MemoryBlock", "member" : "org.apache.spark.memory.MemoryConsumer.allocatePage", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#allocatePage(required:Long):org.apache.spark.unsafe.memory.MemoryBlock", "kind" : "def"}, {"label" : "freeArray", "tail" : "(array: LongArray): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freeArray", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#freeArray(array:org.apache.spark.unsafe.array.LongArray):Unit", "kind" : "def"}, {"label" : "allocateArray", "tail" : "(size: Long): LongArray", "member" : "org.apache.spark.memory.MemoryConsumer.allocateArray", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#allocateArray(size:Long):org.apache.spark.unsafe.array.LongArray", "kind" : "def"}, {"label" : "spill", "tail" : "(): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.spill", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#spill():Unit", "kind" : "def"}, {"label" : "getUsed", "tail" : "(): Long", "member" : "org.apache.spark.memory.MemoryConsumer.getUsed", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#getUsed():Long", "kind" : "def"}, {"label" : "getMode", "tail" : "(): MemoryMode", "member" : "org.apache.spark.memory.MemoryConsumer.getMode", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#getMode():org.apache.spark.memory.MemoryMode", "kind" : "def"}, {"member" : "org.apache.spark.memory.MemoryConsumer#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.memory.MemoryConsumer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spill", "tail" : "(size: Long, trigger: MemoryConsumer): Long", "member" : "org.apache.spark.memory.MemoryConsumer.spill", "link" : "org\/apache\/spark\/memory\/MemoryConsumer.html#spill(size:Long,trigger:org.apache.spark.memory.MemoryConsumer):Long", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/memory\/MemoryConsumer.html", "kind" : "class"}, {"name" : "org.apache.spark.memory.MemoryMode", "shortDescription" : "", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[MemoryMode]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: MemoryMode): Int", "member" : "java.lang.Enum.compareTo", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/memory\/MemoryMode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/memory\/MemoryMode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/memory\/MemoryMode.html", "kind" : "class"}, {"name" : "org.apache.spark.memory.SparkOutOfMemoryError", "shortDescription" : "This exception is thrown when a task can not acquire memory from the Memory manager.", "members_class" : [{"label" : "getSqlState", "tail" : "(): String", "member" : "org.apache.spark.memory.SparkOutOfMemoryError.getSqlState", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#getSqlState():String", "kind" : "def"}, {"label" : "getErrorClass", "tail" : "(): String", "member" : "org.apache.spark.memory.SparkOutOfMemoryError.getErrorClass", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#getErrorClass():String", "kind" : "def"}, {"member" : "org.apache.spark.memory.SparkOutOfMemoryError#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.memory.SparkOutOfMemoryError#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.memory.SparkOutOfMemoryError#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/memory\/SparkOutOfMemoryError.html", "kind" : "class"}, {"name" : "org.apache.spark.memory.TaskMemoryManager", "shortDescription" : "Manages the memory allocated by an individual task.", "members_class" : [{"label" : "getTungstenMemoryMode", "tail" : "(): MemoryMode", "member" : "org.apache.spark.memory.TaskMemoryManager.getTungstenMemoryMode", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#getTungstenMemoryMode():org.apache.spark.memory.MemoryMode", "kind" : "def"}, {"label" : "getMemoryConsumptionForThisTask", "tail" : "(): Long", "member" : "org.apache.spark.memory.TaskMemoryManager.getMemoryConsumptionForThisTask", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#getMemoryConsumptionForThisTask():Long", "kind" : "def"}, {"label" : "cleanUpAllAllocatedMemory", "tail" : "(): Long", "member" : "org.apache.spark.memory.TaskMemoryManager.cleanUpAllAllocatedMemory", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#cleanUpAllAllocatedMemory():Long", "kind" : "def"}, {"label" : "getOffsetInPage", "tail" : "(pagePlusOffsetAddress: Long): Long", "member" : "org.apache.spark.memory.TaskMemoryManager.getOffsetInPage", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#getOffsetInPage(pagePlusOffsetAddress:Long):Long", "kind" : "def"}, {"label" : "getPage", "tail" : "(pagePlusOffsetAddress: Long): AnyRef", "member" : "org.apache.spark.memory.TaskMemoryManager.getPage", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#getPage(pagePlusOffsetAddress:Long):Object", "kind" : "def"}, {"label" : "encodePageNumberAndOffset", "tail" : "(page: MemoryBlock, offsetInPage: Long): Long", "member" : "org.apache.spark.memory.TaskMemoryManager.encodePageNumberAndOffset", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#encodePageNumberAndOffset(page:org.apache.spark.unsafe.memory.MemoryBlock,offsetInPage:Long):Long", "kind" : "def"}, {"label" : "freePage", "tail" : "(page: MemoryBlock, consumer: MemoryConsumer): Unit", "member" : "org.apache.spark.memory.TaskMemoryManager.freePage", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#freePage(page:org.apache.spark.unsafe.memory.MemoryBlock,consumer:org.apache.spark.memory.MemoryConsumer):Unit", "kind" : "def"}, {"label" : "allocatePage", "tail" : "(size: Long, consumer: MemoryConsumer): MemoryBlock", "member" : "org.apache.spark.memory.TaskMemoryManager.allocatePage", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#allocatePage(size:Long,consumer:org.apache.spark.memory.MemoryConsumer):org.apache.spark.unsafe.memory.MemoryBlock", "kind" : "def"}, {"label" : "pageSizeBytes", "tail" : "(): Long", "member" : "org.apache.spark.memory.TaskMemoryManager.pageSizeBytes", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#pageSizeBytes():Long", "kind" : "def"}, {"label" : "showMemoryUsage", "tail" : "(): Unit", "member" : "org.apache.spark.memory.TaskMemoryManager.showMemoryUsage", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#showMemoryUsage():Unit", "kind" : "def"}, {"label" : "releaseExecutionMemory", "tail" : "(size: Long, consumer: MemoryConsumer): Unit", "member" : "org.apache.spark.memory.TaskMemoryManager.releaseExecutionMemory", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#releaseExecutionMemory(size:Long,consumer:org.apache.spark.memory.MemoryConsumer):Unit", "kind" : "def"}, {"label" : "acquireExecutionMemory", "tail" : "(required: Long, consumer: MemoryConsumer): Long", "member" : "org.apache.spark.memory.TaskMemoryManager.acquireExecutionMemory", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#acquireExecutionMemory(required:Long,consumer:org.apache.spark.memory.MemoryConsumer):Long", "kind" : "def"}, {"member" : "org.apache.spark.memory.TaskMemoryManager#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/memory\/TaskMemoryManager.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/memory\/TaskMemoryManager.html", "kind" : "class"}, {"name" : "org.apache.spark.memory.TooLargePageException", "shortDescription" : "", "members_class" : [{"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/memory\/TooLargePageException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/memory\/TooLargePageException.html", "kind" : "class"}, {"name" : "org.apache.spark.memory.UnifiedMemoryManager", "shortDescription" : "", "object" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html", "members_object" : [{"label" : "apply", "tail" : "(conf: SparkConf, numCores: Int): UnifiedMemoryManager", "member" : "org.apache.spark.memory.UnifiedMemoryManager.apply", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#apply(conf:org.apache.spark.SparkConf,numCores:Int):org.apache.spark.memory.UnifiedMemoryManager", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/memory\/UnifiedMemoryManager$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.executor" : [{"name" : "org.apache.spark.executor.DataReadMethod", "shortDescription" : ":: DeveloperApi ::Method by which input data was read.", "object" : "org\/apache\/spark\/executor\/DataReadMethod$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "Network", "tail" : ": Value", "member" : "org.apache.spark.executor.DataReadMethod.Network", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#Network:org.apache.spark.executor.DataReadMethod.Value", "kind" : "val"}, {"label" : "Hadoop", "tail" : ": Value", "member" : "org.apache.spark.executor.DataReadMethod.Hadoop", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#Hadoop:org.apache.spark.executor.DataReadMethod.Value", "kind" : "val"}, {"label" : "Disk", "tail" : ": Value", "member" : "org.apache.spark.executor.DataReadMethod.Disk", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#Disk:org.apache.spark.executor.DataReadMethod.Value", "kind" : "val"}, {"label" : "Memory", "tail" : ": Value", "member" : "org.apache.spark.executor.DataReadMethod.Memory", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#Memory:org.apache.spark.executor.DataReadMethod.Value", "kind" : "val"}, {"label" : "DataReadMethod", "tail" : "", "member" : "org.apache.spark.executor.DataReadMethod.DataReadMethod", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#DataReadMethod=org.apache.spark.executor.DataReadMethod.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/executor\/DataReadMethod$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.executor.DataWriteMethod", "shortDescription" : ":: DeveloperApi ::Method by which output data was written.", "object" : "org\/apache\/spark\/executor\/DataWriteMethod$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "Hadoop", "tail" : ": Value", "member" : "org.apache.spark.executor.DataWriteMethod.Hadoop", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#Hadoop:org.apache.spark.executor.DataWriteMethod.Value", "kind" : "val"}, {"label" : "DataWriteMethod", "tail" : "", "member" : "org.apache.spark.executor.DataWriteMethod.DataWriteMethod", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#DataWriteMethod=org.apache.spark.executor.DataWriteMethod.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/executor\/DataWriteMethod$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.executor.ExecutorMetrics", "shortDescription" : ":: DeveloperApi ::Metrics tracked for executors and the driver.", "members_class" : [{"label" : "isSet", "tail" : "(): Boolean", "member" : "org.apache.spark.executor.ExecutorMetrics.isSet", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#isSet():Boolean", "kind" : "def"}, {"label" : "getMetricValue", "tail" : "(metricName: String): Long", "member" : "org.apache.spark.executor.ExecutorMetrics.getMetricValue", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#getMetricValue(metricName:String):Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/executor\/ExecutorMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/executor\/ExecutorMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.executor.InputMetrics", "shortDescription" : ":: DeveloperApi ::A collection of accumulators that represents metrics about reading data from external systems.", "members_class" : [{"label" : "recordsRead", "tail" : "(): Long", "member" : "org.apache.spark.executor.InputMetrics.recordsRead", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#recordsRead:Long", "kind" : "def"}, {"label" : "bytesRead", "tail" : "(): Long", "member" : "org.apache.spark.executor.InputMetrics.bytesRead", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#bytesRead:Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/executor\/InputMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/executor\/InputMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/executor\/InputMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.executor.OutputMetrics", "shortDescription" : ":: DeveloperApi ::A collection of accumulators that represents metrics about writing data to external systems.", "members_class" : [{"label" : "recordsWritten", "tail" : "(): Long", "member" : "org.apache.spark.executor.OutputMetrics.recordsWritten", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#recordsWritten:Long", "kind" : "def"}, {"label" : "bytesWritten", "tail" : "(): Long", "member" : "org.apache.spark.executor.OutputMetrics.bytesWritten", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#bytesWritten:Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/executor\/OutputMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/executor\/OutputMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.executor.ShuffleReadMetrics", "shortDescription" : ":: DeveloperApi ::A collection of accumulators that represent metrics about reading shuffle data.", "members_class" : [{"label" : "totalBlocksFetched", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.totalBlocksFetched", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#totalBlocksFetched:Long", "kind" : "def"}, {"label" : "totalBytesRead", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.totalBytesRead", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#totalBytesRead:Long", "kind" : "def"}, {"label" : "recordsRead", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.recordsRead", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#recordsRead:Long", "kind" : "def"}, {"label" : "fetchWaitTime", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.fetchWaitTime", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#fetchWaitTime:Long", "kind" : "def"}, {"label" : "localBytesRead", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.localBytesRead", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#localBytesRead:Long", "kind" : "def"}, {"label" : "remoteBytesReadToDisk", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.remoteBytesReadToDisk", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#remoteBytesReadToDisk:Long", "kind" : "def"}, {"label" : "remoteBytesRead", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.remoteBytesRead", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#remoteBytesRead:Long", "kind" : "def"}, {"label" : "localBlocksFetched", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.localBlocksFetched", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#localBlocksFetched:Long", "kind" : "def"}, {"label" : "remoteBlocksFetched", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleReadMetrics.remoteBlocksFetched", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#remoteBlocksFetched:Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/executor\/ShuffleReadMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.executor.ShuffleWriteMetrics", "shortDescription" : ":: DeveloperApi ::A collection of accumulators that represent metrics about writing shuffle data.", "members_class" : [{"label" : "writeTime", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleWriteMetrics.writeTime", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#writeTime:Long", "kind" : "def"}, {"label" : "recordsWritten", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleWriteMetrics.recordsWritten", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#recordsWritten:Long", "kind" : "def"}, {"label" : "bytesWritten", "tail" : "(): Long", "member" : "org.apache.spark.executor.ShuffleWriteMetrics.bytesWritten", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#bytesWritten:Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/executor\/ShuffleWriteMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.executor.TaskMetrics", "shortDescription" : ":: DeveloperApi ::Metrics tracked during the execution of a task.", "members_class" : [{"label" : "shuffleWriteMetrics", "tail" : ": ShuffleWriteMetrics", "member" : "org.apache.spark.executor.TaskMetrics.shuffleWriteMetrics", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#shuffleWriteMetrics:org.apache.spark.executor.ShuffleWriteMetrics", "kind" : "val"}, {"label" : "shuffleReadMetrics", "tail" : ": ShuffleReadMetrics", "member" : "org.apache.spark.executor.TaskMetrics.shuffleReadMetrics", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#shuffleReadMetrics:org.apache.spark.executor.ShuffleReadMetrics", "kind" : "val"}, {"label" : "outputMetrics", "tail" : ": OutputMetrics", "member" : "org.apache.spark.executor.TaskMetrics.outputMetrics", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#outputMetrics:org.apache.spark.executor.OutputMetrics", "kind" : "val"}, {"label" : "inputMetrics", "tail" : ": InputMetrics", "member" : "org.apache.spark.executor.TaskMetrics.inputMetrics", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#inputMetrics:org.apache.spark.executor.InputMetrics", "kind" : "val"}, {"label" : "updatedBlockStatuses", "tail" : "(): Seq[(BlockId, BlockStatus)]", "member" : "org.apache.spark.executor.TaskMetrics.updatedBlockStatuses", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#updatedBlockStatuses:Seq[(org.apache.spark.storage.BlockId,org.apache.spark.storage.BlockStatus)]", "kind" : "def"}, {"label" : "peakExecutionMemory", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.peakExecutionMemory", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#peakExecutionMemory:Long", "kind" : "def"}, {"label" : "diskBytesSpilled", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.diskBytesSpilled", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#diskBytesSpilled:Long", "kind" : "def"}, {"label" : "memoryBytesSpilled", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.memoryBytesSpilled", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#memoryBytesSpilled:Long", "kind" : "def"}, {"label" : "resultSerializationTime", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.resultSerializationTime", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#resultSerializationTime:Long", "kind" : "def"}, {"label" : "jvmGCTime", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.jvmGCTime", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#jvmGCTime:Long", "kind" : "def"}, {"label" : "resultSize", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.resultSize", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#resultSize:Long", "kind" : "def"}, {"label" : "executorCpuTime", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.executorCpuTime", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#executorCpuTime:Long", "kind" : "def"}, {"label" : "executorRunTime", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.executorRunTime", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#executorRunTime:Long", "kind" : "def"}, {"label" : "executorDeserializeCpuTime", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.executorDeserializeCpuTime", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#executorDeserializeCpuTime:Long", "kind" : "def"}, {"label" : "executorDeserializeTime", "tail" : "(): Long", "member" : "org.apache.spark.executor.TaskMetrics.executorDeserializeTime", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#executorDeserializeTime:Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/executor\/TaskMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/executor\/TaskMetrics.html", "kind" : "class"}], "org.apache.spark.shuffle.api" : [{"name" : "org.apache.spark.shuffle.api.ShuffleDataIO", "members_trait" : [{"member" : "org.apache.spark.shuffle.api.ShuffleDataIO#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "driver", "tail" : "(): ShuffleDriverComponents", "member" : "org.apache.spark.shuffle.api.ShuffleDataIO.driver", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#driver():org.apache.spark.shuffle.api.ShuffleDriverComponents", "kind" : "abstract def"}, {"label" : "executor", "tail" : "(): ShuffleExecutorComponents", "member" : "org.apache.spark.shuffle.api.ShuffleDataIO.executor", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html#executor():org.apache.spark.shuffle.api.ShuffleExecutorComponents", "kind" : "abstract def"}], "shortDescription" : ":: Private ::An interface for plugging in modules for storing and reading temporary shuffle data.", "trait" : "org\/apache\/spark\/shuffle\/api\/ShuffleDataIO.html", "kind" : "trait"}, {"name" : "org.apache.spark.shuffle.api.ShuffleDriverComponents", "members_trait" : [{"label" : "removeShuffle", "tail" : "(shuffleId: Int, blocking: Boolean): Unit", "member" : "org.apache.spark.shuffle.api.ShuffleDriverComponents.removeShuffle", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#removeShuffle(shuffleId:Int,blocking:Boolean):Unit", "kind" : "def"}, {"label" : "registerShuffle", "tail" : "(shuffleId: Int): Unit", "member" : "org.apache.spark.shuffle.api.ShuffleDriverComponents.registerShuffle", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#registerShuffle(shuffleId:Int):Unit", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.api.ShuffleDriverComponents#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cleanupApplication", "tail" : "(): Unit", "member" : "org.apache.spark.shuffle.api.ShuffleDriverComponents.cleanupApplication", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#cleanupApplication():Unit", "kind" : "abstract def"}, {"label" : "initializeApplication", "tail" : "(): Map[String, String]", "member" : "org.apache.spark.shuffle.api.ShuffleDriverComponents.initializeApplication", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html#initializeApplication():java.util.Map[String,String]", "kind" : "abstract def"}], "shortDescription" : ":: Private ::An interface for building shuffle support modules for the Driver.", "trait" : "org\/apache\/spark\/shuffle\/api\/ShuffleDriverComponents.html", "kind" : "trait"}, {"name" : "org.apache.spark.shuffle.api.ShuffleExecutorComponents", "members_trait" : [{"label" : "createSingleFileMapOutputWriter", "tail" : "(shuffleId: Int, mapId: Long): Optional[SingleSpillShuffleMapOutputWriter]", "member" : "org.apache.spark.shuffle.api.ShuffleExecutorComponents.createSingleFileMapOutputWriter", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#createSingleFileMapOutputWriter(shuffleId:Int,mapId:Long):java.util.Optional[org.apache.spark.shuffle.api.SingleSpillShuffleMapOutputWriter]", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.api.ShuffleExecutorComponents#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createMapOutputWriter", "tail" : "(shuffleId: Int, mapTaskId: Long, numPartitions: Int): ShuffleMapOutputWriter", "member" : "org.apache.spark.shuffle.api.ShuffleExecutorComponents.createMapOutputWriter", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#createMapOutputWriter(shuffleId:Int,mapTaskId:Long,numPartitions:Int):org.apache.spark.shuffle.api.ShuffleMapOutputWriter", "kind" : "abstract def"}, {"label" : "initializeExecutor", "tail" : "(appId: String, execId: String, extraConfigs: Map[String, String]): Unit", "member" : "org.apache.spark.shuffle.api.ShuffleExecutorComponents.initializeExecutor", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html#initializeExecutor(appId:String,execId:String,extraConfigs:java.util.Map[String,String]):Unit", "kind" : "abstract def"}], "shortDescription" : ":: Private ::An interface for building shuffle support for Executors.", "trait" : "org\/apache\/spark\/shuffle\/api\/ShuffleExecutorComponents.html", "kind" : "trait"}, {"name" : "org.apache.spark.shuffle.api.ShuffleMapOutputWriter", "members_trait" : [{"member" : "org.apache.spark.shuffle.api.ShuffleMapOutputWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "abort", "tail" : "(error: Throwable): Unit", "member" : "org.apache.spark.shuffle.api.ShuffleMapOutputWriter.abort", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#abort(error:Throwable):Unit", "kind" : "abstract def"}, {"label" : "commitAllPartitions", "tail" : "(checksums: Array[Long]): MapOutputCommitMessage", "member" : "org.apache.spark.shuffle.api.ShuffleMapOutputWriter.commitAllPartitions", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#commitAllPartitions(checksums:Array[Long]):org.apache.spark.shuffle.api.metadata.MapOutputCommitMessage", "kind" : "abstract def"}, {"label" : "getPartitionWriter", "tail" : "(reducePartitionId: Int): ShufflePartitionWriter", "member" : "org.apache.spark.shuffle.api.ShuffleMapOutputWriter.getPartitionWriter", "link" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html#getPartitionWriter(reducePartitionId:Int):org.apache.spark.shuffle.api.ShufflePartitionWriter", "kind" : "abstract def"}], "shortDescription" : ":: Private ::A top-level writer that returns child writers for persisting the output of a map task,and then commits all of the writes as one atomic operation.", "trait" : "org\/apache\/spark\/shuffle\/api\/ShuffleMapOutputWriter.html", "kind" : "trait"}, {"name" : "org.apache.spark.shuffle.api.ShufflePartitionWriter", "members_trait" : [{"label" : "openChannelWrapper", "tail" : "(): Optional[WritableByteChannelWrapper]", "member" : "org.apache.spark.shuffle.api.ShufflePartitionWriter.openChannelWrapper", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#openChannelWrapper():java.util.Optional[org.apache.spark.shuffle.api.WritableByteChannelWrapper]", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.api.ShufflePartitionWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getNumBytesWritten", "tail" : "(): Long", "member" : "org.apache.spark.shuffle.api.ShufflePartitionWriter.getNumBytesWritten", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#getNumBytesWritten():Long", "kind" : "abstract def"}, {"label" : "openStream", "tail" : "(): OutputStream", "member" : "org.apache.spark.shuffle.api.ShufflePartitionWriter.openStream", "link" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html#openStream():java.io.OutputStream", "kind" : "abstract def"}], "shortDescription" : ":: Private ::An interface for opening streams to persist partition bytes to a backing data store.", "trait" : "org\/apache\/spark\/shuffle\/api\/ShufflePartitionWriter.html", "kind" : "trait"}, {"name" : "org.apache.spark.shuffle.api.SingleSpillShuffleMapOutputWriter", "members_trait" : [{"member" : "org.apache.spark.shuffle.api.SingleSpillShuffleMapOutputWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "transferMapSpillFile", "tail" : "(mapOutputFile: File, partitionLengths: Array[Long], checksums: Array[Long], lengthByMicroRddId: Map[Integer, Long]): Unit", "member" : "org.apache.spark.shuffle.api.SingleSpillShuffleMapOutputWriter.transferMapSpillFile", "link" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html#transferMapSpillFile(mapOutputFile:java.io.File,partitionLengths:Array[Long],checksums:Array[Long],lengthByMicroRddId:java.util.Map[Integer,Long]):Unit", "kind" : "abstract def"}], "shortDescription" : "Optional extension for partition writing that is optimized for transferring a singlefile to the backing store.", "trait" : "org\/apache\/spark\/shuffle\/api\/SingleSpillShuffleMapOutputWriter.html", "kind" : "trait"}, {"name" : "org.apache.spark.shuffle.api.WritableByteChannelWrapper", "members_trait" : [{"member" : "org.apache.spark.shuffle.api.WritableByteChannelWrapper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "channel", "tail" : "(): WritableByteChannel", "member" : "org.apache.spark.shuffle.api.WritableByteChannelWrapper.channel", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#channel():java.nio.channels.WritableByteChannel", "kind" : "abstract def"}, {"label" : "close", "tail" : "(): Unit", "member" : "java.io.Closeable.close", "link" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html#close():Unit", "kind" : "abstract def"}], "shortDescription" : ":: Private ::A thin wrapper around a WritableByteChannel.", "trait" : "org\/apache\/spark\/shuffle\/api\/WritableByteChannelWrapper.html", "kind" : "trait"}], "org.apache.spark.io" : [{"name" : "org.apache.spark.io.CompressionCodec", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/io\/CompressionCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compressedInputStream", "tail" : "(s: InputStream): InputStream", "member" : "org.apache.spark.io.CompressionCodec.compressedInputStream", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#compressedInputStream(s:java.io.InputStream):java.io.InputStream", "kind" : "abstract def"}, {"label" : "compressedOutputStream", "tail" : "(s: OutputStream): OutputStream", "member" : "org.apache.spark.io.CompressionCodec.compressedOutputStream", "link" : "org\/apache\/spark\/io\/CompressionCodec.html#compressedOutputStream(s:java.io.OutputStream):java.io.OutputStream", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::CompressionCodec allows the customization of choosing different compression implementationsto be used in block storage.", "trait" : "org\/apache\/spark\/io\/CompressionCodec.html", "kind" : "trait"}, {"name" : "org.apache.spark.io.LZ4CompressionCodec", "shortDescription" : ":: DeveloperApi ::LZ4 implementation of org.apache.spark.io.CompressionCodec.", "members_class" : [{"label" : "compressedInputStream", "tail" : "(s: InputStream): InputStream", "member" : "org.apache.spark.io.LZ4CompressionCodec.compressedInputStream", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#compressedInputStream(s:java.io.InputStream):java.io.InputStream", "kind" : "def"}, {"label" : "compressedOutputStream", "tail" : "(s: OutputStream): OutputStream", "member" : "org.apache.spark.io.LZ4CompressionCodec.compressedOutputStream", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#compressedOutputStream(s:java.io.OutputStream):java.io.OutputStream", "kind" : "def"}, {"member" : "org.apache.spark.io.LZ4CompressionCodec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/io\/LZ4CompressionCodec.html", "kind" : "class"}, {"name" : "org.apache.spark.io.LZFCompressionCodec", "shortDescription" : ":: DeveloperApi ::LZF implementation of org.apache.spark.io.CompressionCodec.", "members_class" : [{"label" : "compressedInputStream", "tail" : "(s: InputStream): InputStream", "member" : "org.apache.spark.io.LZFCompressionCodec.compressedInputStream", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#compressedInputStream(s:java.io.InputStream):java.io.InputStream", "kind" : "def"}, {"label" : "compressedOutputStream", "tail" : "(s: OutputStream): OutputStream", "member" : "org.apache.spark.io.LZFCompressionCodec.compressedOutputStream", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#compressedOutputStream(s:java.io.OutputStream):java.io.OutputStream", "kind" : "def"}, {"member" : "org.apache.spark.io.LZFCompressionCodec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/io\/LZFCompressionCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/io\/LZFCompressionCodec.html", "kind" : "class"}, {"name" : "org.apache.spark.io.NioBufferedFileInputStream", "shortDescription" : "InputStream implementation which uses direct bufferto read a file to avoid extra copy of data between Java andnative memory which happens when using java.io.BufferedInputStream.", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "org.apache.spark.io.NioBufferedFileInputStream.finalize", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#finalize():Unit", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.io.NioBufferedFileInputStream.close", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#close():Unit", "kind" : "def"}, {"label" : "skip", "tail" : "(n: Long): Long", "member" : "org.apache.spark.io.NioBufferedFileInputStream.skip", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#skip(n:Long):Long", "kind" : "def"}, {"label" : "available", "tail" : "(): Int", "member" : "org.apache.spark.io.NioBufferedFileInputStream.available", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#available():Int", "kind" : "def"}, {"label" : "read", "tail" : "(b: Array[Byte], offset: Int, len: Int): Int", "member" : "org.apache.spark.io.NioBufferedFileInputStream.read", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#read(b:Array[Byte],offset:Int,len:Int):Int", "kind" : "def"}, {"label" : "read", "tail" : "(): Int", "member" : "org.apache.spark.io.NioBufferedFileInputStream.read", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#read():Int", "kind" : "def"}, {"member" : "org.apache.spark.io.NioBufferedFileInputStream#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.io.NioBufferedFileInputStream#<init>", "error" : "unsupported entity"}, {"label" : "markSupported", "tail" : "(): Boolean", "member" : "java.io.InputStream.markSupported", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#markSupported():Boolean", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "java.io.InputStream.reset", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#reset():Unit", "kind" : "def"}, {"label" : "mark", "tail" : "(arg0: Int): Unit", "member" : "java.io.InputStream.mark", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#mark(x$1:Int):Unit", "kind" : "def"}, {"label" : "read", "tail" : "(arg0: Array[Byte]): Int", "member" : "java.io.InputStream.read", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#read(x$1:Array[Byte]):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/io\/NioBufferedFileInputStream.html", "kind" : "class"}, {"name" : "org.apache.spark.io.ReadAheadInputStream", "shortDescription" : "InputStream implementation which asynchronously reads ahead from the underlying inputstream when specified amount of data has been read from the current buffer.", "members_class" : [{"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.io.ReadAheadInputStream.close", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#close():Unit", "kind" : "def"}, {"label" : "skip", "tail" : "(n: Long): Long", "member" : "org.apache.spark.io.ReadAheadInputStream.skip", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#skip(n:Long):Long", "kind" : "def"}, {"label" : "available", "tail" : "(): Int", "member" : "org.apache.spark.io.ReadAheadInputStream.available", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#available():Int", "kind" : "def"}, {"label" : "read", "tail" : "(b: Array[Byte], offset: Int, len: Int): Int", "member" : "org.apache.spark.io.ReadAheadInputStream.read", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#read(b:Array[Byte],offset:Int,len:Int):Int", "kind" : "def"}, {"label" : "read", "tail" : "(): Int", "member" : "org.apache.spark.io.ReadAheadInputStream.read", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#read():Int", "kind" : "def"}, {"member" : "org.apache.spark.io.ReadAheadInputStream#<init>", "error" : "unsupported entity"}, {"label" : "markSupported", "tail" : "(): Boolean", "member" : "java.io.InputStream.markSupported", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#markSupported():Boolean", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "java.io.InputStream.reset", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#reset():Unit", "kind" : "def"}, {"label" : "mark", "tail" : "(arg0: Int): Unit", "member" : "java.io.InputStream.mark", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#mark(x$1:Int):Unit", "kind" : "def"}, {"label" : "read", "tail" : "(arg0: Array[Byte]): Int", "member" : "java.io.InputStream.read", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#read(x$1:Array[Byte]):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/io\/ReadAheadInputStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/io\/ReadAheadInputStream.html", "kind" : "class"}, {"name" : "org.apache.spark.io.SnappyCompressionCodec", "shortDescription" : ":: DeveloperApi ::Snappy implementation of org.apache.spark.io.CompressionCodec.", "members_class" : [{"label" : "compressedInputStream", "tail" : "(s: InputStream): InputStream", "member" : "org.apache.spark.io.SnappyCompressionCodec.compressedInputStream", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#compressedInputStream(s:java.io.InputStream):java.io.InputStream", "kind" : "def"}, {"label" : "compressedOutputStream", "tail" : "(s: OutputStream): OutputStream", "member" : "org.apache.spark.io.SnappyCompressionCodec.compressedOutputStream", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#compressedOutputStream(s:java.io.OutputStream):java.io.OutputStream", "kind" : "def"}, {"member" : "org.apache.spark.io.SnappyCompressionCodec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/io\/SnappyCompressionCodec.html", "kind" : "class"}, {"name" : "org.apache.spark.io.ZStdCompressionCodec", "shortDescription" : ":: DeveloperApi ::ZStandard implementation of org.apache.spark.io.CompressionCodec.", "members_class" : [{"label" : "compressedContinuousInputStream", "tail" : "(s: InputStream): InputStream", "member" : "org.apache.spark.io.ZStdCompressionCodec.compressedContinuousInputStream", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#compressedContinuousInputStream(s:java.io.InputStream):java.io.InputStream", "kind" : "def"}, {"label" : "compressedInputStream", "tail" : "(s: InputStream): InputStream", "member" : "org.apache.spark.io.ZStdCompressionCodec.compressedInputStream", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#compressedInputStream(s:java.io.InputStream):java.io.InputStream", "kind" : "def"}, {"label" : "compressedOutputStream", "tail" : "(s: OutputStream): OutputStream", "member" : "org.apache.spark.io.ZStdCompressionCodec.compressedOutputStream", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#compressedOutputStream(s:java.io.OutputStream):java.io.OutputStream", "kind" : "def"}, {"member" : "org.apache.spark.io.ZStdCompressionCodec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/io\/ZStdCompressionCodec.html", "kind" : "class"}], "org.apache.spark.deploy.master" : [{"name" : "org.apache.spark.deploy.master.LeaderElectable", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "revokedLeadership", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.master.LeaderElectable.revokedLeadership", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#revokedLeadership():Unit", "kind" : "abstract def"}, {"label" : "electedLeader", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.master.LeaderElectable.electedLeader", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html#electedLeader():Unit", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/deploy\/master\/LeaderElectable.html", "kind" : "trait"}, {"name" : "org.apache.spark.deploy.master.LeaderElectionAgent", "members_trait" : [{"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.master.LeaderElectionAgent.stop", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#stop():Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "masterInstance", "tail" : ": LeaderElectable", "member" : "org.apache.spark.deploy.master.LeaderElectionAgent.masterInstance", "link" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html#masterInstance:org.apache.spark.deploy.master.LeaderElectable", "kind" : "abstract val"}], "shortDescription" : ":: DeveloperApi ::", "trait" : "org\/apache\/spark\/deploy\/master\/LeaderElectionAgent.html", "kind" : "trait"}, {"name" : "org.apache.spark.deploy.master.MasterMessages", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/deploy\/master\/MasterMessages.html", "kind" : "trait"}, {"name" : "org.apache.spark.deploy.master.PersistenceEngine", "shortDescription" : "Allows Master to persist any state that is necessary in order to recover from a failure.", "members_class" : [{"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.close", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#close():Unit", "kind" : "def"}, {"label" : "readPersistedData", "tail" : "(rpcEnv: RpcEnv): (Seq[ApplicationInfo], Seq[DriverInfo], Seq[WorkerInfo])", "member" : "org.apache.spark.deploy.master.PersistenceEngine.readPersistedData", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#readPersistedData(rpcEnv:org.apache.spark.rpc.RpcEnv):(Seq[org.apache.spark.deploy.master.ApplicationInfo],Seq[org.apache.spark.deploy.master.DriverInfo],Seq[org.apache.spark.deploy.master.WorkerInfo])", "kind" : "final def"}, {"label" : "removeDriver", "tail" : "(driver: DriverInfo): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.removeDriver", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#removeDriver(driver:org.apache.spark.deploy.master.DriverInfo):Unit", "kind" : "final def"}, {"label" : "addDriver", "tail" : "(driver: DriverInfo): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.addDriver", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#addDriver(driver:org.apache.spark.deploy.master.DriverInfo):Unit", "kind" : "final def"}, {"label" : "removeWorker", "tail" : "(worker: WorkerInfo): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.removeWorker", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#removeWorker(worker:org.apache.spark.deploy.master.WorkerInfo):Unit", "kind" : "final def"}, {"label" : "addWorker", "tail" : "(worker: WorkerInfo): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.addWorker", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#addWorker(worker:org.apache.spark.deploy.master.WorkerInfo):Unit", "kind" : "final def"}, {"label" : "removeApplication", "tail" : "(app: ApplicationInfo): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.removeApplication", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#removeApplication(app:org.apache.spark.deploy.master.ApplicationInfo):Unit", "kind" : "final def"}, {"label" : "addApplication", "tail" : "(app: ApplicationInfo): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.addApplication", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#addApplication(app:org.apache.spark.deploy.master.ApplicationInfo):Unit", "kind" : "final def"}, {"member" : "org.apache.spark.deploy.master.PersistenceEngine#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "read", "tail" : "(prefix: String)(arg0: ClassTag[T]): Seq[T]", "member" : "org.apache.spark.deploy.master.PersistenceEngine.read", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#read[T](prefix:String)(implicitevidence$1:scala.reflect.ClassTag[T]):Seq[T]", "kind" : "abstract def"}, {"label" : "unpersist", "tail" : "(name: String): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.unpersist", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#unpersist(name:String):Unit", "kind" : "abstract def"}, {"label" : "persist", "tail" : "(name: String, obj: AnyRef): Unit", "member" : "org.apache.spark.deploy.master.PersistenceEngine.persist", "link" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html#persist(name:String,obj:Object):Unit", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/deploy\/master\/PersistenceEngine.html", "kind" : "class"}, {"name" : "org.apache.spark.deploy.master.StandaloneRecoveryModeFactory", "shortDescription" : "::DeveloperApi::", "members_class" : [{"member" : "org.apache.spark.deploy.master.StandaloneRecoveryModeFactory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createLeaderElectionAgent", "tail" : "(master: LeaderElectable): LeaderElectionAgent", "member" : "org.apache.spark.deploy.master.StandaloneRecoveryModeFactory.createLeaderElectionAgent", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#createLeaderElectionAgent(master:org.apache.spark.deploy.master.LeaderElectable):org.apache.spark.deploy.master.LeaderElectionAgent", "kind" : "abstract def"}, {"label" : "createPersistenceEngine", "tail" : "(): PersistenceEngine", "member" : "org.apache.spark.deploy.master.StandaloneRecoveryModeFactory.createPersistenceEngine", "link" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html#createPersistenceEngine():org.apache.spark.deploy.master.PersistenceEngine", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/deploy\/master\/StandaloneRecoveryModeFactory.html", "kind" : "class"}], "org.apache.spark.scheduler.cluster" : [{"name" : "org.apache.spark.scheduler.cluster.ExecutorInfo", "shortDescription" : ":: DeveloperApi ::Stores information about an executor to pass from the scheduler to SparkListeners.", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.hashCode", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.equals", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "canEqual", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.canEqual", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#canEqual(other:Any):Boolean", "kind" : "def"}, {"member" : "org.apache.spark.scheduler.cluster.ExecutorInfo#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.scheduler.cluster.ExecutorInfo#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.scheduler.cluster.ExecutorInfo#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.scheduler.cluster.ExecutorInfo#<init>", "error" : "unsupported entity"}, {"label" : "resourceProfileId", "tail" : ": Int", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.resourceProfileId", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#resourceProfileId:Int", "kind" : "val"}, {"label" : "resourcesInfo", "tail" : ": Map[String, ResourceInformation]", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.resourcesInfo", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#resourcesInfo:Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "val"}, {"label" : "attributes", "tail" : ": Map[String, String]", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.attributes", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#attributes:Map[String,String]", "kind" : "val"}, {"label" : "logUrlMap", "tail" : ": Map[String, String]", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.logUrlMap", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#logUrlMap:Map[String,String]", "kind" : "val"}, {"label" : "totalCores", "tail" : ": Int", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.totalCores", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#totalCores:Int", "kind" : "val"}, {"label" : "executorHost", "tail" : ": String", "member" : "org.apache.spark.scheduler.cluster.ExecutorInfo.executorHost", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#executorHost:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/scheduler\/cluster\/ExecutorInfo.html", "kind" : "class"}], "org.apache.spark.shuffle.api.metadata" : [{"name" : "org.apache.spark.shuffle.api.metadata.MapOutputCommitMessage", "shortDescription" : ":: Private ::Represents the result of writing map outputs for a shuffle map task.", "members_class" : [{"label" : "getMapOutputMetadata", "tail" : "(): Optional[MapOutputMetadata]", "member" : "org.apache.spark.shuffle.api.metadata.MapOutputCommitMessage.getMapOutputMetadata", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#getMapOutputMetadata():java.util.Optional[org.apache.spark.shuffle.api.metadata.MapOutputMetadata]", "kind" : "def"}, {"label" : "getLengthByMicroRddId", "tail" : "(): Map[Integer, Long]", "member" : "org.apache.spark.shuffle.api.metadata.MapOutputCommitMessage.getLengthByMicroRddId", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#getLengthByMicroRddId():java.util.Map[Integer,Long]", "kind" : "def"}, {"label" : "getPartitionLengths", "tail" : "(): Array[Long]", "member" : "org.apache.spark.shuffle.api.metadata.MapOutputCommitMessage.getPartitionLengths", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#getPartitionLengths():Array[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputCommitMessage.html", "kind" : "class"}, {"name" : "org.apache.spark.shuffle.api.metadata.MapOutputMetadata", "members_trait" : [{"member" : "org.apache.spark.shuffle.api.metadata.MapOutputMetadata#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ":: Private ::An opaque metadata tag for registering the result of committing the output of ashuffle map task.", "trait" : "org\/apache\/spark\/shuffle\/api\/metadata\/MapOutputMetadata.html", "kind" : "trait"}], "org.apache.spark.input" : [{"name" : "org.apache.spark.input.PortableDataStream", "shortDescription" : "A class that allows DataStreams to be serialized and moved around by not creating themuntil they need to be read", "members_class" : [{"label" : "getConfiguration", "tail" : "(): Configuration", "member" : "org.apache.spark.input.PortableDataStream.getConfiguration", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#getConfiguration:org.apache.hadoop.conf.Configuration", "kind" : "def"}, {"label" : "getPath", "tail" : "(): String", "member" : "org.apache.spark.input.PortableDataStream.getPath", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#getPath():String", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[Byte]", "member" : "org.apache.spark.input.PortableDataStream.toArray", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#toArray():Array[Byte]", "kind" : "def"}, {"label" : "open", "tail" : "(): DataInputStream", "member" : "org.apache.spark.input.PortableDataStream.open", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#open():java.io.DataInputStream", "kind" : "def"}, {"member" : "org.apache.spark.input.PortableDataStream#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/input\/PortableDataStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/input\/PortableDataStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/input\/PortableDataStream.html", "kind" : "class"}], "org.apache.spark.api.java" : [{"name" : "org.apache.spark.api.java.JavaDoubleRDD", "shortDescription" : "", "object" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html", "members_class" : [{"label" : "setName", "tail" : "(name: String): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.setName", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#setName(name:String):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "histogram", "tail" : "(buckets: Array[Double], evenBuckets: Boolean): Array[Long]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.histogram", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#histogram(buckets:Array[Double],evenBuckets:Boolean):Array[Long]", "kind" : "def"}, {"label" : "histogram", "tail" : "(buckets: Array[Double]): Array[Long]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.histogram", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#histogram(buckets:Array[Double]):Array[Long]", "kind" : "def"}, {"label" : "histogram", "tail" : "(bucketCount: Int): (Array[Double], Array[Long])", "member" : "org.apache.spark.api.java.JavaDoubleRDD.histogram", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#histogram(bucketCount:Int):(Array[Double],Array[Long])", "kind" : "def"}, {"label" : "sumApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.sumApprox", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#sumApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "sumApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.sumApprox", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#sumApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "meanApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.meanApprox", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#meanApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "meanApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.meanApprox", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#meanApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "popVariance", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.popVariance", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#popVariance():Double", "kind" : "def"}, {"label" : "popStdev", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.popStdev", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#popStdev():Double", "kind" : "def"}, {"label" : "sampleVariance", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.sampleVariance", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#sampleVariance():Double", "kind" : "def"}, {"label" : "sampleStdev", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.sampleStdev", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#sampleStdev():Double", "kind" : "def"}, {"label" : "stdev", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.stdev", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#stdev():Double", "kind" : "def"}, {"label" : "variance", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.variance", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#variance():Double", "kind" : "def"}, {"label" : "mean", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.mean", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mean():Double", "kind" : "def"}, {"label" : "stats", "tail" : "(): StatCounter", "member" : "org.apache.spark.api.java.JavaDoubleRDD.stats", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#stats():org.apache.spark.util.StatCounter", "kind" : "def"}, {"label" : "max", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.max", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#max():Double", "kind" : "def"}, {"label" : "min", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.min", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#min():Double", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.sum", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#sum():Double", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaDoubleRDD): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.intersection", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#intersection(other:org.apache.spark.api.java.JavaDoubleRDD):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaDoubleRDD): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.union", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#union(other:org.apache.spark.api.java.JavaDoubleRDD):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaDoubleRDD, p: Partitioner): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#subtract(other:org.apache.spark.api.java.JavaDoubleRDD,p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaDoubleRDD, numPartitions: Int): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#subtract(other:org.apache.spark.api.java.JavaDoubleRDD,numPartitions:Int):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaDoubleRDD): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#subtract(other:org.apache.spark.api.java.JavaDoubleRDD):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.repartition", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[Double, Boolean]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.filter", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#filter(f:org.apache.spark.api.java.function.Function[Double,Boolean]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#distinct():org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "first", "tail" : "(): Double", "member" : "org.apache.spark.api.java.JavaDoubleRDD.first", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#first():Double", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#unpersist():org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.persist", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.cache", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#cache():org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[Double]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.wrapRDD", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[Double]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "rdd", "tail" : ": RDD[Double]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.rdd", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#rdd:org.apache.spark.rdd.RDD[Double]", "kind" : "val"}, {"label" : "classTag", "tail" : ": ClassTag[Double]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.classTag", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#classTag:scala.reflect.ClassTag[Double]", "kind" : "val"}, {"member" : "org.apache.spark.api.java.JavaDoubleRDD#<init>", "error" : "unsupported entity"}, {"label" : "srdd", "tail" : ": RDD[Double]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.srdd", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#srdd:org.apache.spark.rdd.RDD[Double]", "kind" : "val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[Double]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[Double]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[Double]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[Double]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[Double]): Double", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[Double]): Double", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[Double]): List[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[Double]): List[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[Double, U]): JavaPairRDD[U, Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[Double, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[Double, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[Double, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, Double, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, Double, U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, Double, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: Double)(f: Function2[Double, Double, Double]): Double", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[Double, Double, Double]): Double", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[Double, Double, Double], depth: Int): Double", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[Double, Double, Double]): Double", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[Double]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[Double]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[Double, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[Double, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[Double], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[Double, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[Double, U], numPartitions: Int): JavaPairRDD[U, Iterable[Double]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[Double, U]): JavaPairRDD[U, Iterable[Double]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[Double, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[Double]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[Double]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[Double], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[Double]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[Double], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[Double]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[Double], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[Double], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[Double, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[Double]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[Double, U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[Double, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[Double]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapToDouble[R](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[Double], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[Double, R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[Double]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toRDD", "tail" : "(rdd: JavaDoubleRDD): RDD[Double]", "member" : "org.apache.spark.api.java.JavaDoubleRDD.toRDD", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#toRDD(rdd:org.apache.spark.api.java.JavaDoubleRDD):org.apache.spark.rdd.RDD[Double]", "kind" : "implicit def"}, {"label" : "fromRDD", "tail" : "(rdd: RDD[Double]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaDoubleRDD.fromRDD", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#fromRDD(rdd:org.apache.spark.rdd.RDD[Double]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/JavaDoubleRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.api.java.JavaFutureAction", "members_trait" : [{"member" : "org.apache.spark.api.java.JavaFutureAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "jobIds", "tail" : "(): List[Integer]", "member" : "org.apache.spark.api.java.JavaFutureAction.jobIds", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#jobIds():java.util.List[Integer]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(arg0: Long, arg1: TimeUnit): T", "member" : "java.util.concurrent.Future.get", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#get(x$1:Long,x$2:java.util.concurrent.TimeUnit):V", "kind" : "abstract def"}, {"label" : "get", "tail" : "(): T", "member" : "java.util.concurrent.Future.get", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#get():V", "kind" : "abstract def"}, {"label" : "isDone", "tail" : "(): Boolean", "member" : "java.util.concurrent.Future.isDone", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#isDone():Boolean", "kind" : "abstract def"}, {"label" : "isCancelled", "tail" : "(): Boolean", "member" : "java.util.concurrent.Future.isCancelled", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#isCancelled():Boolean", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(arg0: Boolean): Boolean", "member" : "java.util.concurrent.Future.cancel", "link" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html#cancel(x$1:Boolean):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/api\/java\/JavaFutureAction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.JavaHadoopRDD", "shortDescription" : "", "members_class" : [{"label" : "mapPartitionsWithInputSplit", "tail" : "(f: Function2[InputSplit, Iterator[(K, V)], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaHadoopRDD.mapPartitionsWithInputSplit", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapPartitionsWithInputSplit[R](f:org.apache.spark.api.java.function.Function2[org.apache.hadoop.mapred.InputSplit,java.util.Iterator[(K,V)],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"member" : "org.apache.spark.api.java.JavaHadoopRDD#<init>", "error" : "unsupported entity"}, {"label" : "vClassTag", "tail" : ": ClassTag[V]", "member" : "org.apache.spark.api.java.JavaHadoopRDD.vClassTag", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#vClassTag:scala.reflect.ClassTag[V]", "kind" : "implicit val"}, {"label" : "kClassTag", "tail" : ": ClassTag[K]", "member" : "org.apache.spark.api.java.JavaHadoopRDD.kClassTag", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#kClassTag:scala.reflect.ClassTag[K]", "kind" : "implicit val"}, {"label" : "setName", "tail" : "(name: String): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.setName", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#setName(name:String):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countApproxDistinctByKey(relativeSD:Double):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, numPartitions: Int): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countApproxDistinctByKey(relativeSD:Double,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, partitioner: Partitioner): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countApproxDistinctByKey(relativeSD:Double,partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "values", "tail" : "(): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.values", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#values():org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): JavaRDD[K]", "member" : "org.apache.spark.api.java.JavaPairRDD.keys", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#keys():org.apache.spark.api.java.JavaRDD[K]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(comp: Comparator[K], lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#filterByRange(comp:java.util.Comparator[K],lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#filterByRange(lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sortByKey(comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sortByKey(ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sortByKey(ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sortByKey():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner, comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner,comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "saveAsHadoopDataset", "tail" : "(conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopDataset", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsHadoopDataset(conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopDataset", "tail" : "(conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopDataset", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsNewAPIHadoopDataset(conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "lookup", "tail" : "(key: K): List[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.lookup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#lookup(key:K):java.util.List[V]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#groupWith[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#groupWith[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#groupWith[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "flatMapValues", "tail" : "(f: FlatMapFunction[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.flatMapValues", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#flatMapValues[U](f:org.apache.spark.api.java.function.FlatMapFunction[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: Function[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.mapValues", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapValues[U](f:org.apache.spark.api.java.function.Function[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "collectAsMap", "tail" : "(): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.collectAsMap", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#collectAsMap():java.util.Map[K,V]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#groupByKey():org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C]): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C]):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "partitionBy", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.partitionBy", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#partitionBy(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(numPartitions: Int): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#groupByKey(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#groupByKey(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#foldByKey(zeroValue:V,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, numPartitions: Int, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#foldByKey(zeroValue:V,numPartitions:Int,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#foldByKey(zeroValue:V,partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#aggregateByKey[U](zeroValue:U,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, numPartitions: Int, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#aggregateByKey[U](zeroValue:U,numPartitions:Int,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, partitioner: Partitioner, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#aggregateByKey[U](zeroValue:U,partitioner:org.apache.spark.Partitioner,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countByKeyApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countByKeyApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKey", "tail" : "(): Map[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countByKey():java.util.Map[K,Long]", "kind" : "def"}, {"label" : "reduceByKeyLocally", "tail" : "(func: Function2[V, V, V]): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKeyLocally", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#reduceByKeyLocally(func:org.apache.spark.api.java.function.Function2[V,V,V]):java.util.Map[K,V]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#reduceByKey(partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], numPartitions: Int): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner, mapSideCombine: Boolean, serializer: Serializer): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner,mapSideCombine:Boolean,serializer:org.apache.spark.serializer.Serializer):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, V)", "member" : "org.apache.spark.api.java.JavaPairRDD.first", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#first():(K,V)", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.intersection", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#intersection(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.union", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#union(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartition", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[(K, V), Boolean]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filter", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#filter(f:org.apache.spark.api.java.function.Function[(K,V),Boolean]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#distinct():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#unpersist():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.persist", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.cache", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cache():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "classTag", "tail" : ": ClassTag[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.classTag", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#classTag:scala.reflect.ClassTag[(K,V)]", "kind" : "val"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[(K, V)]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.wrapRDD", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[(K,V)]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "rdd", "tail" : ": RDD[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rdd", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#rdd:org.apache.spark.rdd.RDD[(K,V)]", "kind" : "val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[(K, V)]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, (K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, V))(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)], depth: Int): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[(K, V)]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[(K, V)], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U], numPartitions: Int): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[(K, V), U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapToDouble[R](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[(K, V)], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[(K, V), R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/JavaHadoopRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.api.java.JavaNewHadoopRDD", "shortDescription" : "", "members_class" : [{"label" : "mapPartitionsWithInputSplit", "tail" : "(f: Function2[InputSplit, Iterator[(K, V)], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaNewHadoopRDD.mapPartitionsWithInputSplit", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapPartitionsWithInputSplit[R](f:org.apache.spark.api.java.function.Function2[org.apache.hadoop.mapreduce.InputSplit,java.util.Iterator[(K,V)],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"member" : "org.apache.spark.api.java.JavaNewHadoopRDD#<init>", "error" : "unsupported entity"}, {"label" : "vClassTag", "tail" : ": ClassTag[V]", "member" : "org.apache.spark.api.java.JavaNewHadoopRDD.vClassTag", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#vClassTag:scala.reflect.ClassTag[V]", "kind" : "implicit val"}, {"label" : "kClassTag", "tail" : ": ClassTag[K]", "member" : "org.apache.spark.api.java.JavaNewHadoopRDD.kClassTag", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#kClassTag:scala.reflect.ClassTag[K]", "kind" : "implicit val"}, {"label" : "setName", "tail" : "(name: String): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.setName", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#setName(name:String):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countApproxDistinctByKey(relativeSD:Double):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, numPartitions: Int): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countApproxDistinctByKey(relativeSD:Double,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, partitioner: Partitioner): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countApproxDistinctByKey(relativeSD:Double,partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "values", "tail" : "(): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.values", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#values():org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): JavaRDD[K]", "member" : "org.apache.spark.api.java.JavaPairRDD.keys", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#keys():org.apache.spark.api.java.JavaRDD[K]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(comp: Comparator[K], lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#filterByRange(comp:java.util.Comparator[K],lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#filterByRange(lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sortByKey(comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sortByKey(ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sortByKey(ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sortByKey():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner, comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner,comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "saveAsHadoopDataset", "tail" : "(conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopDataset", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsHadoopDataset(conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopDataset", "tail" : "(conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopDataset", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsNewAPIHadoopDataset(conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "lookup", "tail" : "(key: K): List[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.lookup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#lookup(key:K):java.util.List[V]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#groupWith[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#groupWith[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#groupWith[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "flatMapValues", "tail" : "(f: FlatMapFunction[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.flatMapValues", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#flatMapValues[U](f:org.apache.spark.api.java.function.FlatMapFunction[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: Function[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.mapValues", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapValues[U](f:org.apache.spark.api.java.function.Function[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "collectAsMap", "tail" : "(): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.collectAsMap", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#collectAsMap():java.util.Map[K,V]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#groupByKey():org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C]): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C]):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "partitionBy", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.partitionBy", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#partitionBy(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(numPartitions: Int): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#groupByKey(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#groupByKey(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#foldByKey(zeroValue:V,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, numPartitions: Int, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#foldByKey(zeroValue:V,numPartitions:Int,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#foldByKey(zeroValue:V,partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#aggregateByKey[U](zeroValue:U,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, numPartitions: Int, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#aggregateByKey[U](zeroValue:U,numPartitions:Int,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, partitioner: Partitioner, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#aggregateByKey[U](zeroValue:U,partitioner:org.apache.spark.Partitioner,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countByKeyApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countByKeyApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKey", "tail" : "(): Map[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countByKey():java.util.Map[K,Long]", "kind" : "def"}, {"label" : "reduceByKeyLocally", "tail" : "(func: Function2[V, V, V]): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKeyLocally", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#reduceByKeyLocally(func:org.apache.spark.api.java.function.Function2[V,V,V]):java.util.Map[K,V]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#reduceByKey(partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], numPartitions: Int): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner, mapSideCombine: Boolean, serializer: Serializer): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner,mapSideCombine:Boolean,serializer:org.apache.spark.serializer.Serializer):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, V)", "member" : "org.apache.spark.api.java.JavaPairRDD.first", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#first():(K,V)", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.intersection", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#intersection(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.union", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#union(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartition", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[(K, V), Boolean]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filter", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#filter(f:org.apache.spark.api.java.function.Function[(K,V),Boolean]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#distinct():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#unpersist():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.persist", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.cache", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cache():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "classTag", "tail" : ": ClassTag[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.classTag", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#classTag:scala.reflect.ClassTag[(K,V)]", "kind" : "val"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[(K, V)]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.wrapRDD", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[(K,V)]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "rdd", "tail" : ": RDD[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rdd", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#rdd:org.apache.spark.rdd.RDD[(K,V)]", "kind" : "val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[(K, V)]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, (K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, V))(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)], depth: Int): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[(K, V)]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[(K, V)], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U], numPartitions: Int): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[(K, V), U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapToDouble[R](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[(K, V)], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[(K, V), R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/JavaNewHadoopRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.api.java.JavaPairRDD", "shortDescription" : "", "object" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html", "members_class" : [{"label" : "setName", "tail" : "(name: String): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.setName", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#setName(name:String):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countApproxDistinctByKey(relativeSD:Double):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, numPartitions: Int): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countApproxDistinctByKey(relativeSD:Double,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, partitioner: Partitioner): JavaPairRDD[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countApproxDistinctByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countApproxDistinctByKey(relativeSD:Double,partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Long]", "kind" : "def"}, {"label" : "values", "tail" : "(): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.values", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#values():org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): JavaRDD[K]", "member" : "org.apache.spark.api.java.JavaPairRDD.keys", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#keys():org.apache.spark.api.java.JavaRDD[K]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(comp: Comparator[K], lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#filterByRange(comp:java.util.Comparator[K],lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filterByRange", "tail" : "(lower: K, upper: K): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filterByRange", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#filterByRange(lower:K,upper:K):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K], ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sortByKey(comp:java.util.Comparator[K],ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sortByKey(comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean, numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sortByKey(ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sortByKey(ascending:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sortByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sortByKey():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner, comp: Comparator[K]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner,comp:java.util.Comparator[K]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartitionAndSortWithinPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "saveAsHadoopDataset", "tail" : "(conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopDataset", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsHadoopDataset(conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopDataset", "tail" : "(conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopDataset", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsNewAPIHadoopDataset(conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: Configuration): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsNewAPIHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F]): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[F], conf: JobConf): Unit", "member" : "org.apache.spark.api.java.JavaPairRDD.saveAsHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[_,_]](path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[F],conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "lookup", "tail" : "(key: K): List[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.lookup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#lookup(key:K):java.util.List[V]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#groupWith[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#groupWith[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupWith", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#groupWith[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2]): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], other3: JavaPairRDD[K, W3], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W1,W2,W3](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],other3:org.apache.spark.api.java.JavaPairRDD[K,W3],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: JavaPairRDD[K, W1], other2: JavaPairRDD[K, W2], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W1], Iterable[W2])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W1,W2](other1:org.apache.spark.api.java.JavaPairRDD[K,W1],other2:org.apache.spark.api.java.JavaPairRDD[K,W2],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W1],Iterable[W2])]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Iterable[V], Iterable[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.cogroup", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cogroup[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(Iterable[V],Iterable[W])]", "kind" : "def"}, {"label" : "flatMapValues", "tail" : "(f: FlatMapFunction[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.flatMapValues", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#flatMapValues[U](f:org.apache.spark.api.java.function.FlatMapFunction[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: Function[V, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.mapValues", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapValues[U](f:org.apache.spark.api.java.function.Function[V,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "collectAsMap", "tail" : "(): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.collectAsMap", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#collectAsMap():java.util.Map[K,V]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#groupByKey():org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C]): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C]):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.fullOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#fullOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (Optional[V], W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rightOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#rightOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(org.apache.spark.api.java.Optional[V],W)]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, Optional[W])]", "member" : "org.apache.spark.api.java.JavaPairRDD.leftOuterJoin", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#leftOuterJoin[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,org.apache.spark.api.java.Optional[W])]", "kind" : "def"}, {"label" : "join", "tail" : "(other: JavaPairRDD[K, W], partitioner: Partitioner): JavaPairRDD[K, (V, W)]", "member" : "org.apache.spark.api.java.JavaPairRDD.join", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#join[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,(V,W)]", "kind" : "def"}, {"label" : "partitionBy", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.partitionBy", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#partitionBy(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: JavaPairRDD[K, W]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtractByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#subtractByKey[W](other:org.apache.spark.api.java.JavaPairRDD[K,W]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], p: Partitioner): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#subtract(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(numPartitions: Int): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#groupByKey(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(partitioner: Partitioner): JavaPairRDD[K, Iterable[V]]", "member" : "org.apache.spark.api.java.JavaPairRDD.groupByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#groupByKey(partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,Iterable[V]]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: Function2[V, V, V], numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#reduceByKey(func:org.apache.spark.api.java.function.Function2[V,V,V],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#foldByKey(zeroValue:V,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, numPartitions: Int, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#foldByKey(zeroValue:V,numPartitions:Int,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.foldByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#foldByKey(zeroValue:V,partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#aggregateByKey[U](zeroValue:U,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, numPartitions: Int, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#aggregateByKey[U](zeroValue:U,numPartitions:Int,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, partitioner: Partitioner, seqFunc: Function2[U, V, U], combFunc: Function2[U, U, U]): JavaPairRDD[K, U]", "member" : "org.apache.spark.api.java.JavaPairRDD.aggregateByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#aggregateByKey[U](zeroValue:U,partitioner:org.apache.spark.Partitioner,seqFunc:org.apache.spark.api.java.function.Function2[U,V,U],combFunc:org.apache.spark.api.java.function.Function2[U,U,U]):org.apache.spark.api.java.JavaPairRDD[K,U]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countByKeyApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKeyApprox", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countByKeyApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKey", "tail" : "(): Map[K, Long]", "member" : "org.apache.spark.api.java.JavaPairRDD.countByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countByKey():java.util.Map[K,Long]", "kind" : "def"}, {"label" : "reduceByKeyLocally", "tail" : "(func: Function2[V, V, V]): Map[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKeyLocally", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#reduceByKeyLocally(func:org.apache.spark.api.java.function.Function2[V,V,V]):java.util.Map[K,V]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(partitioner: Partitioner, func: Function2[V, V, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.reduceByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#reduceByKey(partitioner:org.apache.spark.Partitioner,func:org.apache.spark.api.java.function.Function2[V,V,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], numPartitions: Int): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: Function[V, C], mergeValue: Function2[C, V, C], mergeCombiners: Function2[C, C, C], partitioner: Partitioner, mapSideCombine: Boolean, serializer: Serializer): JavaPairRDD[K, C]", "member" : "org.apache.spark.api.java.JavaPairRDD.combineByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#combineByKey[C](createCombiner:org.apache.spark.api.java.function.Function[V,C],mergeValue:org.apache.spark.api.java.function.Function2[C,V,C],mergeCombiners:org.apache.spark.api.java.function.Function2[C,C,C],partitioner:org.apache.spark.Partitioner,mapSideCombine:Boolean,serializer:org.apache.spark.serializer.Serializer):org.apache.spark.api.java.JavaPairRDD[K,C]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, V)", "member" : "org.apache.spark.api.java.JavaPairRDD.first", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#first():(K,V)", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.intersection", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#intersection(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaPairRDD[K, V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.union", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#union(other:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKeyExact", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sampleByKeyExact(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sampleByKey", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sampleByKey(withReplacement:Boolean,fractions:java.util.Map[K,Double],seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.repartition", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[(K, V), Boolean]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.filter", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#filter(f:org.apache.spark.api.java.function.Function[(K,V),Boolean]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#distinct():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#unpersist():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.persist", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.cache", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cache():org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "classTag", "tail" : ": ClassTag[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.classTag", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#classTag:scala.reflect.ClassTag[(K,V)]", "kind" : "val"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[(K, V)]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.wrapRDD", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[(K,V)]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"member" : "org.apache.spark.api.java.JavaPairRDD#<init>", "error" : "unsupported entity"}, {"label" : "vClassTag", "tail" : ": ClassTag[V]", "member" : "org.apache.spark.api.java.JavaPairRDD.vClassTag", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#vClassTag:scala.reflect.ClassTag[V]", "kind" : "implicit val"}, {"label" : "kClassTag", "tail" : ": ClassTag[K]", "member" : "org.apache.spark.api.java.JavaPairRDD.kClassTag", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#kClassTag:scala.reflect.ClassTag[K]", "kind" : "implicit val"}, {"label" : "rdd", "tail" : ": RDD[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.rdd", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#rdd:org.apache.spark.rdd.RDD[(K,V)]", "kind" : "val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[(K, V)]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[(K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[(K, V)]): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, (K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, (K, V), U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, V))(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)], depth: Int): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[(K, V), (K, V), (K, V)]): (K, V)", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[(K, V)]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[(K, V), Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[(K, V)], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U], numPartitions: Int): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[(K, V), U]): JavaPairRDD[U, Iterable[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[(K, V), U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[(K, V)]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[(K, V)]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[(K, V)], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[(K, V)]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[(K, V)], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[(K, V), U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[(K, V), K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[(K, V)]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapToDouble[R](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[(K, V)], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[(K, V), R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromJavaRDD", "tail" : "(rdd: JavaRDD[(K, V)]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.fromJavaRDD", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#fromJavaRDD[K,V](rdd:org.apache.spark.api.java.JavaRDD[(K,V)]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "toRDD", "tail" : "(rdd: JavaPairRDD[K, V]): RDD[(K, V)]", "member" : "org.apache.spark.api.java.JavaPairRDD.toRDD", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#toRDD[K,V](rdd:org.apache.spark.api.java.JavaPairRDD[K,V]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "implicit def"}, {"label" : "fromRDD", "tail" : "(rdd: RDD[(K, V)])(arg0: ClassTag[K], arg1: ClassTag[V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaPairRDD.fromRDD", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#fromRDD[K,V](rdd:org.apache.spark.rdd.RDD[(K,V)])(implicitevidence$5:scala.reflect.ClassTag[K],implicitevidence$6:scala.reflect.ClassTag[V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaPairRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/JavaPairRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.api.java.JavaRDD", "shortDescription" : "", "object" : "org\/apache\/spark\/api\/java\/JavaRDD$.html", "members_class" : [{"label" : "sortBy", "tail" : "(f: Function[T, S], ascending: Boolean, numPartitions: Int): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.sortBy", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#sortBy[S](f:org.apache.spark.api.java.function.Function[T,S],ascending:Boolean,numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "setName", "tail" : "(name: String): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.setName", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#setName(name:String):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDD.toString", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#toString():String", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[T], p: Partitioner): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T],p:org.apache.spark.Partitioner):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[T], numPartitions: Int): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T],numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: JavaRDD[T]): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.subtract", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#subtract(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: JavaRDD[T]): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.intersection", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#intersection(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: JavaRDD[T]): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.union", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#union(other:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[JavaRDD[T]]", "member" : "org.apache.spark.api.java.JavaRDD.randomSplit", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.api.java.JavaRDD[T]]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double]): Array[JavaRDD[T]]", "member" : "org.apache.spark.api.java.JavaRDD.randomSplit", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#randomSplit(weights:Array[Double]):Array[org.apache.spark.api.java.JavaRDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.sample", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#sample(withReplacement:Boolean,fraction:Double):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.repartition", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#repartition(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#coalesce(numPartitions:Int,shuffle:Boolean):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.coalesce", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#coalesce(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: Function[T, Boolean]): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.filter", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#filter(f:org.apache.spark.api.java.function.Function[T,Boolean]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#distinct(numPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.distinct", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#distinct():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#unpersist(blocking:Boolean):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.unpersist", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#unpersist():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.api.java.JavaRDD.getResourceProfile", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.withResources", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.persist", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "cache", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.cache", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#cache():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[T]): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.wrapRDD", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"member" : "org.apache.spark.api.java.JavaRDD#<init>", "error" : "unsupported entity"}, {"label" : "classTag", "tail" : ": ClassTag[T]", "member" : "org.apache.spark.api.java.JavaRDD.classTag", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#classTag:scala.reflect.ClassTag[T]", "kind" : "implicit val"}, {"label" : "rdd", "tail" : ": RDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.rdd", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#rdd:org.apache.spark.rdd.RDD[T]", "kind" : "val"}, {"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[T]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[T]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[T]): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[T]): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[T, U]): JavaPairRDD[U, T]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "first", "tail" : "(): T", "member" : "org.apache.spark.api.java.JavaRDDLike.first", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#first():T", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[T, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, T, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, T, U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, T, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: T)(f: Function2[T, T, T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[T, T, T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[T, T, T], depth: Int): T", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[T, T, T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[T]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[T, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[T, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[T], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[T, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[T, U], numPartitions: Int): JavaPairRDD[U, Iterable[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[T, U]): JavaPairRDD[U, Iterable[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[T, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[T]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[T], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[T]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[T], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[T]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[T], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[T], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[T, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[T]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[T, U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[T, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[T]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapToDouble[R](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[T], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[T, R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toRDD", "tail" : "(rdd: JavaRDD[T]): RDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.toRDD", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#toRDD[T](rdd:org.apache.spark.api.java.JavaRDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "implicit def"}, {"label" : "fromRDD", "tail" : "(rdd: RDD[T])(arg0: ClassTag[T]): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaRDD.fromRDD", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#fromRDD[T](rdd:org.apache.spark.rdd.RDD[T])(implicitevidence$1:scala.reflect.ClassTag[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/JavaRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.api.java.JavaRDDLike", "members_trait" : [{"label" : "foreachPartitionAsync", "tail" : "(f: VoidFunction[Iterator[T]]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartitionAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#foreachPartitionAsync(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: VoidFunction[T]): JavaFutureAction[Void]", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#foreachAsync(f:org.apache.spark.api.java.function.VoidFunction[T]):org.apache.spark.api.java.JavaFutureAction[Void]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): JavaFutureAction[List[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#takeAsync(num:Int):org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): JavaFutureAction[List[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#collectAsync():org.apache.spark.api.java.JavaFutureAction[java.util.List[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): JavaFutureAction[Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countAsync", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#countAsync():org.apache.spark.api.java.JavaFutureAction[Long]", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.name", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#name():String", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.countApproxDistinct", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#takeOrdered(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "min", "tail" : "(comp: Comparator[T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.min", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#min(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(comp: Comparator[T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.max", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#max(comp:java.util.Comparator[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int, comp: Comparator[T]): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeOrdered", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#takeOrdered(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#top(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int, comp: Comparator[T]): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.top", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#top(num:Int,comp:java.util.Comparator[T]):java.util.List[T]", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaRDDLike.toDebugString", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#toDebugString():String", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.getCheckpointFile", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#getCheckpointFile():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isCheckpointed", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.checkpoint", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: Function[T, U]): JavaPairRDD[U, T]", "member" : "org.apache.spark.api.java.JavaRDDLike.keyBy", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#keyBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,T]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsObjectFile", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.saveAsTextFile", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaRDDLike.isEmpty", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "first", "tail" : "(): T", "member" : "org.apache.spark.api.java.JavaRDDLike.first", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#first():T", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):java.util.List[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.takeSample", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#takeSample(withReplacement:Boolean,num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.take", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#take(num:Int):java.util.List[T]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#countByValueApprox(timeout:Long):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValueApprox", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#countByValueApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[java.util.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "(): Map[T, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.countByValue", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#countByValue():java.util.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#countApprox(timeout:Long):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.api.java.JavaRDDLike.countApprox", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaRDDLike.count", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, T, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U, seqOp: Function2[U, T, U], combOp: Function2[U, U, U], depth: Int): U", "member" : "org.apache.spark.api.java.JavaRDDLike.treeAggregate", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#treeAggregate[U](zeroValue:U,seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U],depth:Int):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: Function2[U, T, U], combOp: Function2[U, U, U]): U", "member" : "org.apache.spark.api.java.JavaRDDLike.aggregate", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#aggregate[U](zeroValue:U)(seqOp:org.apache.spark.api.java.function.Function2[U,T,U],combOp:org.apache.spark.api.java.function.Function2[U,U,U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: T)(f: Function2[T, T, T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.fold", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#fold(zeroValue:T)(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[T, T, T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: Function2[T, T, T], depth: Int): T", "member" : "org.apache.spark.api.java.JavaRDDLike.treeReduce", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#treeReduce(f:org.apache.spark.api.java.function.Function2[T,T,T],depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: Function2[T, T, T]): T", "member" : "org.apache.spark.api.java.JavaRDDLike.reduce", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#reduce(f:org.apache.spark.api.java.function.Function2[T,T,T]):T", "kind" : "def"}, {"label" : "collectPartitions", "tail" : "(partitionIds: Array[Int]): Array[List[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.collectPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#collectPartitions(partitionIds:Array[Int]):Array[java.util.List[T]]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.toLocalIterator", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#toLocalIterator():java.util.Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): List[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.collect", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#collect():java.util.List[T]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: VoidFunction[T]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreach", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#foreach(f:org.apache.spark.api.java.function.VoidFunction[T]):Unit", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): JavaPairRDD[T, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#zipWithIndex():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): JavaPairRDD[T, Long]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipWithUniqueId", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#zipWithUniqueId():org.apache.spark.api.java.JavaPairRDD[T,Long]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(other: JavaRDDLike[U, _], f: FlatMapFunction2[Iterator[T], Iterator[U], V]): JavaRDD[V]", "member" : "org.apache.spark.api.java.JavaRDDLike.zipPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#zipPartitions[U,V](other:org.apache.spark.api.java.JavaRDDLike[U,_],f:org.apache.spark.api.java.function.FlatMapFunction2[java.util.Iterator[T],java.util.Iterator[U],V]):org.apache.spark.api.java.JavaRDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[T, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.zip", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#zip[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int, encoding: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String], separateWorkingDir: Boolean, bufferSize: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#pipe(command:java.util.List[String],env:java.util.Map[String,String],separateWorkingDir:Boolean,bufferSize:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String], env: Map[String, String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#pipe(command:java.util.List[String],env:java.util.Map[String,String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: List[String]): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#pipe(command:java.util.List[String]):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaRDDLike.pipe", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#pipe(command:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[T, U], numPartitions: Int): JavaPairRDD[U, Iterable[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U],numPartitions:Int):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: Function[T, U]): JavaPairRDD[U, Iterable[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.groupBy", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#groupBy[U](f:org.apache.spark.api.java.function.Function[T,U]):org.apache.spark.api.java.JavaPairRDD[U,Iterable[T]]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: JavaRDDLike[U, _]): JavaPairRDD[T, U]", "member" : "org.apache.spark.api.java.JavaRDDLike.cartesian", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#cartesian[U](other:org.apache.spark.api.java.JavaRDDLike[U,_]):org.apache.spark.api.java.JavaPairRDD[T,U]", "kind" : "def"}, {"label" : "glom", "tail" : "(): JavaRDD[List[T]]", "member" : "org.apache.spark.api.java.JavaRDDLike.glom", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#glom():org.apache.spark.api.java.JavaRDD[java.util.List[T]]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: VoidFunction[Iterator[T]]): Unit", "member" : "org.apache.spark.api.java.JavaRDDLike.foreachPartition", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#foreachPartition(f:org.apache.spark.api.java.function.VoidFunction[java.util.Iterator[T]]):Unit", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[T], K2, V2], preservesPartitioning: Boolean): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[T]], preservesPartitioning: Boolean): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsToPair", "tail" : "(f: PairFlatMapFunction[Iterator[T], K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToPair", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapPartitionsToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[java.util.Iterator[T],K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapPartitionsToDouble", "tail" : "(f: DoubleFlatMapFunction[Iterator[T]]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapPartitionsToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[java.util.Iterator[T]]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[T], U], preservesPartitioning: Boolean): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: FlatMapFunction[Iterator[T], U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapPartitions[U](f:org.apache.spark.api.java.function.FlatMapFunction[java.util.Iterator[T],U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "flatMapToPair", "tail" : "(f: PairFlatMapFunction[T, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#flatMapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFlatMapFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "flatMapToDouble", "tail" : "(f: DoubleFlatMapFunction[T]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#flatMapToDouble(f:org.apache.spark.api.java.function.DoubleFlatMapFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: FlatMapFunction[T, U]): JavaRDD[U]", "member" : "org.apache.spark.api.java.JavaRDDLike.flatMap", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#flatMap[U](f:org.apache.spark.api.java.function.FlatMapFunction[T,U]):org.apache.spark.api.java.JavaRDD[U]", "kind" : "def"}, {"label" : "mapToPair", "tail" : "(f: PairFunction[T, K2, V2]): JavaPairRDD[K2, V2]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToPair", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapToPair[K2,V2](f:org.apache.spark.api.java.function.PairFunction[T,K2,V2]):org.apache.spark.api.java.JavaPairRDD[K2,V2]", "kind" : "def"}, {"label" : "mapToDouble", "tail" : "(f: DoubleFunction[T]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaRDDLike.mapToDouble", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapToDouble[R](f:org.apache.spark.api.java.function.DoubleFunction[T]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: Function2[Integer, Iterator[T], Iterator[R]], preservesPartitioning: Boolean): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#mapPartitionsWithIndex[R](f:org.apache.spark.api.java.function.Function2[Integer,java.util.Iterator[T],java.util.Iterator[R]],preservesPartitioning:Boolean):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "map", "tail" : "(f: Function[T, R]): JavaRDD[R]", "member" : "org.apache.spark.api.java.JavaRDDLike.map", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#map[R](f:org.apache.spark.api.java.function.Function[T,R]):org.apache.spark.api.java.JavaRDD[R]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, taskContext: TaskContext): Iterator[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.iterator", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#iterator(split:org.apache.spark.Partition,taskContext:org.apache.spark.TaskContext):java.util.Iterator[T]", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.api.java.JavaRDDLike.getStorageLevel", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.id", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#id:Int", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.api.java.JavaRDDLike.context", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "partitioner", "tail" : "(): Optional[Partitioner]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitioner", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#partitioner:org.apache.spark.api.java.Optional[org.apache.spark.Partitioner]", "kind" : "def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.api.java.JavaRDDLike.getNumPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#getNumPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : "(): List[Partition]", "member" : "org.apache.spark.api.java.JavaRDDLike.partitions", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#partitions:java.util.List[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rdd", "tail" : "(): RDD[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.rdd", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#rdd:org.apache.spark.rdd.RDD[T]", "kind" : "abstract def"}, {"label" : "classTag", "tail" : ": ClassTag[T]", "member" : "org.apache.spark.api.java.JavaRDDLike.classTag", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#classTag:scala.reflect.ClassTag[T]", "kind" : "implicit abstract val"}, {"label" : "wrapRDD", "tail" : "(rdd: RDD[T]): This", "member" : "org.apache.spark.api.java.JavaRDDLike.wrapRDD", "link" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html#wrapRDD(rdd:org.apache.spark.rdd.RDD[T]):This", "kind" : "abstract def"}], "shortDescription" : "Defines operations common to several Java RDD implementations.", "trait" : "org\/apache\/spark\/api\/java\/JavaRDDLike.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.JavaSparkContext", "shortDescription" : "A Java-friendly version of org.apache.spark.SparkContext that returnsorg.apache.spark.api.java.JavaRDDs and works with Java collections instead of Scala ones.", "object" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html", "members_class" : [{"label" : "getPersistentRDDs", "tail" : "(): Map[Integer, JavaRDD[_]]", "member" : "org.apache.spark.api.java.JavaSparkContext.getPersistentRDDs", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#getPersistentRDDs:java.util.Map[Integer,org.apache.spark.api.java.JavaRDD[_]]", "kind" : "def"}, {"label" : "cancelAllJobs", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.cancelAllJobs", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#cancelAllJobs():Unit", "kind" : "def"}, {"label" : "cancelJobGroup", "tail" : "(groupId: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.cancelJobGroup", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#cancelJobGroup(groupId:String):Unit", "kind" : "def"}, {"label" : "clearJobGroup", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.clearJobGroup", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#clearJobGroup():Unit", "kind" : "def"}, {"label" : "setJobGroup", "tail" : "(groupId: String, description: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.setJobGroup", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#setJobGroup(groupId:String,description:String):Unit", "kind" : "def"}, {"label" : "setJobGroup", "tail" : "(groupId: String, description: String, interruptOnCancel: Boolean): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.setJobGroup", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#setJobGroup(groupId:String,description:String,interruptOnCancel:Boolean):Unit", "kind" : "def"}, {"label" : "setLogLevel", "tail" : "(logLevel: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.setLogLevel", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#setLogLevel(logLevel:String):Unit", "kind" : "def"}, {"label" : "setJobDescription", "tail" : "(value: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.setJobDescription", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#setJobDescription(value:String):Unit", "kind" : "def"}, {"label" : "getLocalProperty", "tail" : "(key: String): String", "member" : "org.apache.spark.api.java.JavaSparkContext.getLocalProperty", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#getLocalProperty(key:String):String", "kind" : "def"}, {"label" : "setLocalProperty", "tail" : "(key: String, value: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.setLocalProperty", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#setLocalProperty(key:String,value:String):Unit", "kind" : "def"}, {"label" : "clearCallSite", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.clearCallSite", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#clearCallSite():Unit", "kind" : "def"}, {"label" : "setCallSite", "tail" : "(site: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.setCallSite", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#setCallSite(site:String):Unit", "kind" : "def"}, {"label" : "getConf", "tail" : "(): SparkConf", "member" : "org.apache.spark.api.java.JavaSparkContext.getConf", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#getConf:org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "checkpointFile", "tail" : "(path: String): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaSparkContext.checkpointFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#checkpointFile[T](path:String):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "getCheckpointDir", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaSparkContext.getCheckpointDir", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#getCheckpointDir:org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "setCheckpointDir", "tail" : "(dir: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.setCheckpointDir", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#setCheckpointDir(dir:String):Unit", "kind" : "def"}, {"label" : "hadoopConfiguration", "tail" : "(): Configuration", "member" : "org.apache.spark.api.java.JavaSparkContext.hadoopConfiguration", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#hadoopConfiguration():org.apache.hadoop.conf.Configuration", "kind" : "def"}, {"label" : "addJar", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.addJar", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#addJar(path:String):Unit", "kind" : "def"}, {"label" : "addFile", "tail" : "(path: String, recursive: Boolean): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.addFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#addFile(path:String,recursive:Boolean):Unit", "kind" : "def"}, {"label" : "addFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.addFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#addFile(path:String):Unit", "kind" : "def"}, {"label" : "getSparkHome", "tail" : "(): Optional[String]", "member" : "org.apache.spark.api.java.JavaSparkContext.getSparkHome", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#getSparkHome():org.apache.spark.api.java.Optional[String]", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.close", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#close():Unit", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.spark.api.java.JavaSparkContext.stop", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#stop():Unit", "kind" : "def"}, {"label" : "broadcast", "tail" : "(value: T): Broadcast[T]", "member" : "org.apache.spark.api.java.JavaSparkContext.broadcast", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#broadcast[T](value:T):org.apache.spark.broadcast.Broadcast[T]", "kind" : "def"}, {"label" : "union", "tail" : "(rdds: JavaDoubleRDD*): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaSparkContext.union", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#union(rdds:org.apache.spark.api.java.JavaDoubleRDD*):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "union", "tail" : "(rdds: JavaPairRDD[K, V]*): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.union", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#union[K,V](rdds:org.apache.spark.api.java.JavaPairRDD[K,V]*):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "union", "tail" : "(rdds: JavaRDD[T]*): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaSparkContext.union", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#union[T](rdds:org.apache.spark.api.java.JavaRDD[T]*):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "newAPIHadoopRDD", "tail" : "(conf: Configuration, fClass: Class[F], kClass: Class[K], vClass: Class[V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.newAPIHadoopRDD", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#newAPIHadoopRDD[K,V,F<:org.apache.hadoop.mapreduce.InputFormat[K,V]](conf:org.apache.hadoop.conf.Configuration,fClass:Class[F],kClass:Class[K],vClass:Class[V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "newAPIHadoopFile", "tail" : "(path: String, fClass: Class[F], kClass: Class[K], vClass: Class[V], conf: Configuration): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.newAPIHadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#newAPIHadoopFile[K,V,F<:org.apache.hadoop.mapreduce.InputFormat[K,V]](path:String,fClass:Class[F],kClass:Class[K],vClass:Class[V],conf:org.apache.hadoop.conf.Configuration):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "hadoopFile", "tail" : "(path: String, inputFormatClass: Class[F], keyClass: Class[K], valueClass: Class[V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.hadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#hadoopFile[K,V,F<:org.apache.hadoop.mapred.InputFormat[K,V]](path:String,inputFormatClass:Class[F],keyClass:Class[K],valueClass:Class[V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "hadoopFile", "tail" : "(path: String, inputFormatClass: Class[F], keyClass: Class[K], valueClass: Class[V], minPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.hadoopFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#hadoopFile[K,V,F<:org.apache.hadoop.mapred.InputFormat[K,V]](path:String,inputFormatClass:Class[F],keyClass:Class[K],valueClass:Class[V],minPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "hadoopRDD", "tail" : "(conf: JobConf, inputFormatClass: Class[F], keyClass: Class[K], valueClass: Class[V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.hadoopRDD", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#hadoopRDD[K,V,F<:org.apache.hadoop.mapred.InputFormat[K,V]](conf:org.apache.hadoop.mapred.JobConf,inputFormatClass:Class[F],keyClass:Class[K],valueClass:Class[V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "hadoopRDD", "tail" : "(conf: JobConf, inputFormatClass: Class[F], keyClass: Class[K], valueClass: Class[V], minPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.hadoopRDD", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#hadoopRDD[K,V,F<:org.apache.hadoop.mapred.InputFormat[K,V]](conf:org.apache.hadoop.mapred.JobConf,inputFormatClass:Class[F],keyClass:Class[K],valueClass:Class[V],minPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "objectFile", "tail" : "(path: String): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaSparkContext.objectFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#objectFile[T](path:String):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "objectFile", "tail" : "(path: String, minPartitions: Int): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaSparkContext.objectFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#objectFile[T](path:String,minPartitions:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "sequenceFile", "tail" : "(path: String, keyClass: Class[K], valueClass: Class[V]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.sequenceFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#sequenceFile[K,V](path:String,keyClass:Class[K],valueClass:Class[V]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "sequenceFile", "tail" : "(path: String, keyClass: Class[K], valueClass: Class[V], minPartitions: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.sequenceFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#sequenceFile[K,V](path:String,keyClass:Class[K],valueClass:Class[V],minPartitions:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "binaryRecords", "tail" : "(path: String, recordLength: Int): JavaRDD[Array[Byte]]", "member" : "org.apache.spark.api.java.JavaSparkContext.binaryRecords", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#binaryRecords(path:String,recordLength:Int):org.apache.spark.api.java.JavaRDD[Array[Byte]]", "kind" : "def"}, {"label" : "binaryFiles", "tail" : "(path: String): JavaPairRDD[String, PortableDataStream]", "member" : "org.apache.spark.api.java.JavaSparkContext.binaryFiles", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#binaryFiles(path:String):org.apache.spark.api.java.JavaPairRDD[String,org.apache.spark.input.PortableDataStream]", "kind" : "def"}, {"label" : "binaryFiles", "tail" : "(path: String, minPartitions: Int): JavaPairRDD[String, PortableDataStream]", "member" : "org.apache.spark.api.java.JavaSparkContext.binaryFiles", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#binaryFiles(path:String,minPartitions:Int):org.apache.spark.api.java.JavaPairRDD[String,org.apache.spark.input.PortableDataStream]", "kind" : "def"}, {"label" : "wholeTextFiles", "tail" : "(path: String): JavaPairRDD[String, String]", "member" : "org.apache.spark.api.java.JavaSparkContext.wholeTextFiles", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#wholeTextFiles(path:String):org.apache.spark.api.java.JavaPairRDD[String,String]", "kind" : "def"}, {"label" : "wholeTextFiles", "tail" : "(path: String, minPartitions: Int): JavaPairRDD[String, String]", "member" : "org.apache.spark.api.java.JavaSparkContext.wholeTextFiles", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#wholeTextFiles(path:String,minPartitions:Int):org.apache.spark.api.java.JavaPairRDD[String,String]", "kind" : "def"}, {"label" : "textFile", "tail" : "(path: String, minPartitions: Int): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaSparkContext.textFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#textFile(path:String,minPartitions:Int):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "textFile", "tail" : "(path: String): JavaRDD[String]", "member" : "org.apache.spark.api.java.JavaSparkContext.textFile", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#textFile(path:String):org.apache.spark.api.java.JavaRDD[String]", "kind" : "def"}, {"label" : "parallelizeDoubles", "tail" : "(list: List[Double]): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaSparkContext.parallelizeDoubles", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#parallelizeDoubles(list:java.util.List[Double]):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "parallelizeDoubles", "tail" : "(list: List[Double], numSlices: Int): JavaDoubleRDD", "member" : "org.apache.spark.api.java.JavaSparkContext.parallelizeDoubles", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#parallelizeDoubles(list:java.util.List[Double],numSlices:Int):org.apache.spark.api.java.JavaDoubleRDD", "kind" : "def"}, {"label" : "parallelizePairs", "tail" : "(list: List[(K, V)]): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.parallelizePairs", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#parallelizePairs[K,V](list:java.util.List[(K,V)]):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "parallelizePairs", "tail" : "(list: List[(K, V)], numSlices: Int): JavaPairRDD[K, V]", "member" : "org.apache.spark.api.java.JavaSparkContext.parallelizePairs", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#parallelizePairs[K,V](list:java.util.List[(K,V)],numSlices:Int):org.apache.spark.api.java.JavaPairRDD[K,V]", "kind" : "def"}, {"label" : "parallelize", "tail" : "(list: List[T]): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaSparkContext.parallelize", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#parallelize[T](list:java.util.List[T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "emptyRDD", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaSparkContext.emptyRDD", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#emptyRDD[T]:org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "parallelize", "tail" : "(list: List[T], numSlices: Int): JavaRDD[T]", "member" : "org.apache.spark.api.java.JavaSparkContext.parallelize", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#parallelize[T](list:java.util.List[T],numSlices:Int):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "defaultMinPartitions", "tail" : "(): Integer", "member" : "org.apache.spark.api.java.JavaSparkContext.defaultMinPartitions", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#defaultMinPartitions:Integer", "kind" : "def"}, {"label" : "defaultParallelism", "tail" : "(): Integer", "member" : "org.apache.spark.api.java.JavaSparkContext.defaultParallelism", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#defaultParallelism:Integer", "kind" : "def"}, {"label" : "version", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaSparkContext.version", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#version:String", "kind" : "def"}, {"label" : "startTime", "tail" : "(): Long", "member" : "org.apache.spark.api.java.JavaSparkContext.startTime", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#startTime:Long", "kind" : "def"}, {"label" : "jars", "tail" : "(): List[String]", "member" : "org.apache.spark.api.java.JavaSparkContext.jars", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#jars:java.util.List[String]", "kind" : "def"}, {"label" : "resources", "tail" : "(): Map[String, ResourceInformation]", "member" : "org.apache.spark.api.java.JavaSparkContext.resources", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#resources:java.util.Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "def"}, {"label" : "appName", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaSparkContext.appName", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#appName:String", "kind" : "def"}, {"label" : "master", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaSparkContext.master", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#master:String", "kind" : "def"}, {"label" : "sparkUser", "tail" : "(): String", "member" : "org.apache.spark.api.java.JavaSparkContext.sparkUser", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#sparkUser:String", "kind" : "def"}, {"label" : "isLocal", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.JavaSparkContext.isLocal", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#isLocal:Boolean", "kind" : "def"}, {"label" : "statusTracker", "tail" : "(): JavaSparkStatusTracker", "member" : "org.apache.spark.api.java.JavaSparkContext.statusTracker", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#statusTracker:org.apache.spark.api.java.JavaSparkStatusTracker", "kind" : "def"}, {"member" : "org.apache.spark.api.java.JavaSparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.api.java.JavaSparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.api.java.JavaSparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.api.java.JavaSparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.api.java.JavaSparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.api.java.JavaSparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.api.java.JavaSparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.api.java.JavaSparkContext#<init>", "error" : "unsupported entity"}, {"label" : "sc", "tail" : ": SparkContext", "member" : "org.apache.spark.api.java.JavaSparkContext.sc", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#sc:org.apache.spark.SparkContext", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "jarOfObject", "tail" : "(obj: AnyRef): Array[String]", "member" : "org.apache.spark.api.java.JavaSparkContext.jarOfObject", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#jarOfObject(obj:AnyRef):Array[String]", "kind" : "def"}, {"label" : "jarOfClass", "tail" : "(cls: Class[_]): Array[String]", "member" : "org.apache.spark.api.java.JavaSparkContext.jarOfClass", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#jarOfClass(cls:Class[_]):Array[String]", "kind" : "def"}, {"label" : "toSparkContext", "tail" : "(jsc: JavaSparkContext): SparkContext", "member" : "org.apache.spark.api.java.JavaSparkContext.toSparkContext", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#toSparkContext(jsc:org.apache.spark.api.java.JavaSparkContext):org.apache.spark.SparkContext", "kind" : "implicit def"}, {"label" : "fromSparkContext", "tail" : "(sc: SparkContext): JavaSparkContext", "member" : "org.apache.spark.api.java.JavaSparkContext.fromSparkContext", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#fromSparkContext(sc:org.apache.spark.SparkContext):org.apache.spark.api.java.JavaSparkContext", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaSparkContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/JavaSparkContext.html", "kind" : "class"}, {"name" : "org.apache.spark.api.java.JavaSparkStatusTracker", "shortDescription" : "Low-level status reporting APIs for monitoring job and stage progress.", "members_class" : [{"label" : "getStageInfo", "tail" : "(stageId: Int): SparkStageInfo", "member" : "org.apache.spark.api.java.JavaSparkStatusTracker.getStageInfo", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#getStageInfo(stageId:Int):org.apache.spark.SparkStageInfo", "kind" : "def"}, {"label" : "getJobInfo", "tail" : "(jobId: Int): SparkJobInfo", "member" : "org.apache.spark.api.java.JavaSparkStatusTracker.getJobInfo", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#getJobInfo(jobId:Int):org.apache.spark.SparkJobInfo", "kind" : "def"}, {"label" : "getActiveJobIds", "tail" : "(): Array[Int]", "member" : "org.apache.spark.api.java.JavaSparkStatusTracker.getActiveJobIds", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#getActiveJobIds():Array[Int]", "kind" : "def"}, {"label" : "getActiveStageIds", "tail" : "(): Array[Int]", "member" : "org.apache.spark.api.java.JavaSparkStatusTracker.getActiveStageIds", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#getActiveStageIds():Array[Int]", "kind" : "def"}, {"label" : "getJobIdsForGroup", "tail" : "(jobGroup: String): Array[Int]", "member" : "org.apache.spark.api.java.JavaSparkStatusTracker.getJobIdsForGroup", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#getJobIdsForGroup(jobGroup:String):Array[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/JavaSparkStatusTracker.html", "kind" : "class"}, {"name" : "org.apache.spark.api.java.Optional", "shortDescription" : "Like java.util.Optional in Java 8, scala.Option in Scala, andcom.google.common.base.Optional in Google Guava, this class represents avalue of a given type that may or may not exist.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.api.java.Optional.toString", "link" : "org\/apache\/spark\/api\/java\/Optional.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.api.java.Optional.hashCode", "link" : "org\/apache\/spark\/api\/java\/Optional.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "org.apache.spark.api.java.Optional.equals", "link" : "org\/apache\/spark\/api\/java\/Optional.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "orNull", "tail" : "(): T", "member" : "org.apache.spark.api.java.Optional.orNull", "link" : "org\/apache\/spark\/api\/java\/Optional.html#orNull():T", "kind" : "def"}, {"label" : "or", "tail" : "(other: T): T", "member" : "org.apache.spark.api.java.Optional.or", "link" : "org\/apache\/spark\/api\/java\/Optional.html#or(other:T):T", "kind" : "def"}, {"label" : "isPresent", "tail" : "(): Boolean", "member" : "org.apache.spark.api.java.Optional.isPresent", "link" : "org\/apache\/spark\/api\/java\/Optional.html#isPresent():Boolean", "kind" : "def"}, {"label" : "orElse", "tail" : "(other: T): T", "member" : "org.apache.spark.api.java.Optional.orElse", "link" : "org\/apache\/spark\/api\/java\/Optional.html#orElse(other:T):T", "kind" : "def"}, {"label" : "get", "tail" : "(): T", "member" : "org.apache.spark.api.java.Optional.get", "link" : "org\/apache\/spark\/api\/java\/Optional.html#get():T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/Optional.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/Optional.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/Optional.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/Optional.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/Optional.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/Optional.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/Optional.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/Optional.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/Optional.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/Optional.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/Optional.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/Optional.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/Optional.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/Optional.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/Optional.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/Optional.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/Optional.html", "kind" : "class"}, {"name" : "org.apache.spark.api.java.StorageLevels", "shortDescription" : "Expose some commonly useful storage level constants.", "members_class" : [{"member" : "org.apache.spark.api.java.StorageLevels#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/StorageLevels.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/api\/java\/StorageLevels.html", "kind" : "class"}], "org.apache.spark.util.collection.unsafe.sort" : [{"name" : "org.apache.spark.util.collection.unsafe.sort.PrefixComparator", "shortDescription" : "Compares 8-byte key prefixes in prefix sort.", "members_class" : [{"member" : "org.apache.spark.util.collection.unsafe.sort.PrefixComparator#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compare", "tail" : "(prefix1: Long, prefix2: Long): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.PrefixComparator.compare", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html#compare(prefix1:Long,prefix2:Long):Int", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparator.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.PrefixComparators", "shortDescription" : "", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/PrefixComparators.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.RadixSort", "shortDescription" : "", "members_class" : [{"member" : "org.apache.spark.util.collection.unsafe.sort.RadixSort#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RadixSort.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.RecordComparator", "shortDescription" : "Compares records for ordering.", "members_class" : [{"member" : "org.apache.spark.util.collection.unsafe.sort.RecordComparator#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compare", "tail" : "(leftBaseObject: Any, leftBaseOffset: Long, leftBaseLength: Int, rightBaseObject: Any, rightBaseOffset: Long, rightBaseLength: Int): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.RecordComparator.compare", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html#compare(leftBaseObject:Any,leftBaseOffset:Long,leftBaseLength:Int,rightBaseObject:Any,rightBaseOffset:Long,rightBaseLength:Int):Int", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordComparator.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.RecordPointerAndKeyPrefix", "shortDescription" : "", "members_class" : [{"member" : "org.apache.spark.util.collection.unsafe.sort.RecordPointerAndKeyPrefix#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/RecordPointerAndKeyPrefix.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter", "shortDescription" : "External sorter based on UnsafeInMemorySorter.", "members_class" : [{"label" : "getIterator", "tail" : "(startIndex: Int): UnsafeSorterIterator", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.getIterator", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getIterator(startIndex:Int):org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator", "kind" : "def"}, {"label" : "getSortedIterator", "tail" : "(): UnsafeSorterIterator", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.getSortedIterator", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getSortedIterator():org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator", "kind" : "def"}, {"label" : "merge", "tail" : "(other: UnsafeExternalSorter): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.merge", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#merge(other:org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter):Unit", "kind" : "def"}, {"label" : "insertKVRecord", "tail" : "(keyBase: Any, keyOffset: Long, keyLen: Int, valueBase: Any, valueOffset: Long, valueLen: Int, prefix: Long, prefixIsNull: Boolean): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.insertKVRecord", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#insertKVRecord(keyBase:Any,keyOffset:Long,keyLen:Int,valueBase:Any,valueOffset:Long,valueLen:Int,prefix:Long,prefixIsNull:Boolean):Unit", "kind" : "def"}, {"label" : "insertRecord", "tail" : "(recordBase: Any, recordOffset: Long, length: Int, prefix: Long, prefixIsNull: Boolean): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.insertRecord", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#insertRecord(recordBase:Any,recordOffset:Long,length:Int,prefix:Long,prefixIsNull:Boolean):Unit", "kind" : "def"}, {"label" : "cleanupResources", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.cleanupResources", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#cleanupResources():Unit", "kind" : "def"}, {"label" : "getNumberOfAllocatedPages", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.getNumberOfAllocatedPages", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getNumberOfAllocatedPages():Int", "kind" : "def"}, {"label" : "getSpillSize", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.getSpillSize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getSpillSize():Long", "kind" : "def"}, {"label" : "getSortTimeNanos", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.getSortTimeNanos", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getSortTimeNanos():Long", "kind" : "def"}, {"label" : "getPeakMemoryUsedBytes", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.getPeakMemoryUsedBytes", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getPeakMemoryUsedBytes():Long", "kind" : "def"}, {"label" : "spill", "tail" : "(size: Long, trigger: MemoryConsumer): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.spill", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#spill(size:Long,trigger:org.apache.spark.memory.MemoryConsumer):Long", "kind" : "def"}, {"label" : "closeCurrentPage", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeExternalSorter.closeCurrentPage", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#closeCurrentPage():Unit", "kind" : "def"}, {"label" : "freeMemory", "tail" : "(size: Long): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freeMemory", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#freeMemory(size:Long):Unit", "kind" : "def"}, {"label" : "acquireMemory", "tail" : "(size: Long): Long", "member" : "org.apache.spark.memory.MemoryConsumer.acquireMemory", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#acquireMemory(size:Long):Long", "kind" : "def"}, {"label" : "freePage", "tail" : "(page: MemoryBlock): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freePage", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#freePage(page:org.apache.spark.unsafe.memory.MemoryBlock):Unit", "kind" : "def"}, {"label" : "allocatePage", "tail" : "(required: Long): MemoryBlock", "member" : "org.apache.spark.memory.MemoryConsumer.allocatePage", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#allocatePage(required:Long):org.apache.spark.unsafe.memory.MemoryBlock", "kind" : "def"}, {"label" : "freeArray", "tail" : "(array: LongArray): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freeArray", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#freeArray(array:org.apache.spark.unsafe.array.LongArray):Unit", "kind" : "def"}, {"label" : "allocateArray", "tail" : "(size: Long): LongArray", "member" : "org.apache.spark.memory.MemoryConsumer.allocateArray", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#allocateArray(size:Long):org.apache.spark.unsafe.array.LongArray", "kind" : "def"}, {"label" : "spill", "tail" : "(): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.spill", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#spill():Unit", "kind" : "def"}, {"label" : "getUsed", "tail" : "(): Long", "member" : "org.apache.spark.memory.MemoryConsumer.getUsed", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getUsed():Long", "kind" : "def"}, {"label" : "getMode", "tail" : "(): MemoryMode", "member" : "org.apache.spark.memory.MemoryConsumer.getMode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getMode():org.apache.spark.memory.MemoryMode", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeExternalSorter.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter", "shortDescription" : "Sorts records using an AlphaSort-style key-prefix sort.", "members_class" : [{"label" : "getSortedIterator", "tail" : "(): UnsafeSorterIterator", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.getSortedIterator", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#getSortedIterator():org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator", "kind" : "def"}, {"label" : "SortedIterator", "tail" : "", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.SortedIterator", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#SortedIteratorextendsUnsafeSorterIteratorwithCloneable", "kind" : "final class"}, {"label" : "insertRecord", "tail" : "(recordPointer: Long, keyPrefix: Long, prefixIsNull: Boolean): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.insertRecord", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#insertRecord(recordPointer:Long,keyPrefix:Long,prefixIsNull:Boolean):Unit", "kind" : "def"}, {"label" : "expandPointerArray", "tail" : "(newArray: LongArray): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.expandPointerArray", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#expandPointerArray(newArray:org.apache.spark.unsafe.array.LongArray):Unit", "kind" : "def"}, {"label" : "hasSpaceForAnotherRecord", "tail" : "(): Boolean", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.hasSpaceForAnotherRecord", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#hasSpaceForAnotherRecord():Boolean", "kind" : "def"}, {"label" : "getMemoryUsage", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.getMemoryUsage", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#getMemoryUsage():Long", "kind" : "def"}, {"label" : "getSortTimeNanos", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.getSortTimeNanos", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#getSortTimeNanos():Long", "kind" : "def"}, {"label" : "numRecords", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.numRecords", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#numRecords():Int", "kind" : "def"}, {"label" : "freeMemory", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.freeMemory", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#freeMemory():Unit", "kind" : "def"}, {"label" : "getInitialSize", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter.getInitialSize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#getInitialSize():Long", "kind" : "def"}, {"member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeInMemorySorter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeInMemorySorter.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat", "shortDescription" : "Supports sorting an array of (record pointer, key prefix) pairs.", "members_class" : [{"label" : "allocate", "tail" : "(length: Int): LongArray", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat.allocate", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#allocate(length:Int):org.apache.spark.unsafe.array.LongArray", "kind" : "def"}, {"label" : "copyRange", "tail" : "(src: LongArray, srcPos: Int, dst: LongArray, dstPos: Int, length: Int): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat.copyRange", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#copyRange(src:org.apache.spark.unsafe.array.LongArray,srcPos:Int,dst:org.apache.spark.unsafe.array.LongArray,dstPos:Int,length:Int):Unit", "kind" : "def"}, {"label" : "copyElement", "tail" : "(src: LongArray, srcPos: Int, dst: LongArray, dstPos: Int): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat.copyElement", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#copyElement(src:org.apache.spark.unsafe.array.LongArray,srcPos:Int,dst:org.apache.spark.unsafe.array.LongArray,dstPos:Int):Unit", "kind" : "def"}, {"label" : "swap", "tail" : "(data: LongArray, pos0: Int, pos1: Int): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat.swap", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#swap(data:org.apache.spark.unsafe.array.LongArray,pos0:Int,pos1:Int):Unit", "kind" : "def"}, {"label" : "getKey", "tail" : "(data: LongArray, pos: Int, reuse: RecordPointerAndKeyPrefix): RecordPointerAndKeyPrefix", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat.getKey", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#getKey(data:org.apache.spark.unsafe.array.LongArray,pos:Int,reuse:org.apache.spark.util.collection.unsafe.sort.RecordPointerAndKeyPrefix):org.apache.spark.util.collection.unsafe.sort.RecordPointerAndKeyPrefix", "kind" : "def"}, {"label" : "newKey", "tail" : "(): RecordPointerAndKeyPrefix", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat.newKey", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#newKey():org.apache.spark.util.collection.unsafe.sort.RecordPointerAndKeyPrefix", "kind" : "def"}, {"label" : "getKey", "tail" : "(data: LongArray, pos: Int): RecordPointerAndKeyPrefix", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat.getKey", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#getKey(data:org.apache.spark.unsafe.array.LongArray,pos:Int):org.apache.spark.util.collection.unsafe.sort.RecordPointerAndKeyPrefix", "kind" : "def"}, {"member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSortDataFormat#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSortDataFormat.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator", "shortDescription" : "", "members_class" : [{"member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getCurrentPageNumber", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator.getCurrentPageNumber", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#getCurrentPageNumber():Long", "kind" : "abstract def"}, {"label" : "getNumRecords", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator.getNumRecords", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#getNumRecords():Int", "kind" : "abstract def"}, {"label" : "getKeyPrefix", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator.getKeyPrefix", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#getKeyPrefix():Long", "kind" : "abstract def"}, {"label" : "getRecordLength", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator.getRecordLength", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#getRecordLength():Int", "kind" : "abstract def"}, {"label" : "getBaseOffset", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator.getBaseOffset", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#getBaseOffset():Long", "kind" : "abstract def"}, {"label" : "getBaseObject", "tail" : "(): AnyRef", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator.getBaseObject", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#getBaseObject():Object", "kind" : "abstract def"}, {"label" : "loadNext", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator.loadNext", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#loadNext():Unit", "kind" : "abstract def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterIterator.hasNext", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html#hasNext():Boolean", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterIterator.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader", "shortDescription" : "Reads spill files written by UnsafeSorterSpillWriter (see that class for a descriptionof the file format).", "members_class" : [{"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.close", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#close():Unit", "kind" : "def"}, {"label" : "getKeyPrefix", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.getKeyPrefix", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#getKeyPrefix():Long", "kind" : "def"}, {"label" : "getRecordLength", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.getRecordLength", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#getRecordLength():Int", "kind" : "def"}, {"label" : "getBaseOffset", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.getBaseOffset", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#getBaseOffset():Long", "kind" : "def"}, {"label" : "getBaseObject", "tail" : "(): AnyRef", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.getBaseObject", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#getBaseObject():Object", "kind" : "def"}, {"label" : "loadNext", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.loadNext", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#loadNext():Unit", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.hasNext", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#hasNext():Boolean", "kind" : "def"}, {"label" : "getCurrentPageNumber", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.getCurrentPageNumber", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#getCurrentPageNumber():Long", "kind" : "def"}, {"label" : "getNumRecords", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader.getNumRecords", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#getNumRecords():Int", "kind" : "def"}, {"member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillReader.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillWriter", "shortDescription" : "Spills a list of sorted records to disk.", "members_class" : [{"label" : "recordsSpilled", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillWriter.recordsSpilled", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#recordsSpilled():Int", "kind" : "def"}, {"label" : "getReader", "tail" : "(serializerManager: SerializerManager): UnsafeSorterSpillReader", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillWriter.getReader", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#getReader(serializerManager:org.apache.spark.serializer.SerializerManager):org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillReader", "kind" : "def"}, {"label" : "getFile", "tail" : "(): File", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillWriter.getFile", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#getFile():java.io.File", "kind" : "def"}, {"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillWriter.close", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#close():Unit", "kind" : "def"}, {"label" : "write", "tail" : "(baseObject: Any, baseOffset: Long, recordLength: Int, keyPrefix: Long): Unit", "member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillWriter.write", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#write(baseObject:Any,baseOffset:Long,recordLength:Int,keyPrefix:Long):Unit", "kind" : "def"}, {"member" : "org.apache.spark.util.collection.unsafe.sort.UnsafeSorterSpillWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/unsafe\/sort\/UnsafeSorterSpillWriter.html", "kind" : "class"}], "org.apache.spark.api.python" : [{"name" : "org.apache.spark.api.python.Converter", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/python\/Converter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/python\/Converter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/python\/Converter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/python\/Converter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/python\/Converter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/python\/Converter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/python\/Converter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/Converter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/Converter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/Converter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/python\/Converter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/python\/Converter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/python\/Converter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/python\/Converter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/python\/Converter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/python\/Converter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/python\/Converter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/python\/Converter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/python\/Converter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "convert", "tail" : "(obj: T): U", "member" : "org.apache.spark.api.python.Converter.convert", "link" : "org\/apache\/spark\/api\/python\/Converter.html#convert(obj:T):U", "kind" : "abstract def"}], "shortDescription" : "A trait for use with reading custom classes in PySpark.", "trait" : "org\/apache\/spark\/api\/python\/Converter.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.python.TestWritable", "shortDescription" : "A class to test Pyrolite serialization on the Scala side, that will be deserializedin Python", "members_case class" : [{"label" : "readFields", "tail" : "(in: DataInput): Unit", "member" : "org.apache.spark.api.python.TestWritable.readFields", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#readFields(in:java.io.DataInput):Unit", "kind" : "def"}, {"label" : "write", "tail" : "(out: DataOutput): Unit", "member" : "org.apache.spark.api.python.TestWritable.write", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#write(out:java.io.DataOutput):Unit", "kind" : "def"}, {"label" : "setDouble", "tail" : "(double: Double): Unit", "member" : "org.apache.spark.api.python.TestWritable.setDouble", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#setDouble(double:Double):Unit", "kind" : "def"}, {"label" : "getDouble", "tail" : "(): Double", "member" : "org.apache.spark.api.python.TestWritable.getDouble", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#getDouble:Double", "kind" : "def"}, {"label" : "setInt", "tail" : "(int: Int): Unit", "member" : "org.apache.spark.api.python.TestWritable.setInt", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#setInt(int:Int):Unit", "kind" : "def"}, {"label" : "getInt", "tail" : "(): Int", "member" : "org.apache.spark.api.python.TestWritable.getInt", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#getInt:Int", "kind" : "def"}, {"label" : "setStr", "tail" : "(str: String): Unit", "member" : "org.apache.spark.api.python.TestWritable.setStr", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#setStr(str:String):Unit", "kind" : "def"}, {"label" : "getStr", "tail" : "(): String", "member" : "org.apache.spark.api.python.TestWritable.getStr", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#getStr:String", "kind" : "def"}, {"member" : "org.apache.spark.api.python.TestWritable#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.api.python.TestWritable#<init>", "error" : "unsupported entity"}, {"label" : "double", "tail" : ": Double", "member" : "org.apache.spark.api.python.TestWritable.double", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#double:Double", "kind" : "var"}, {"label" : "int", "tail" : ": Int", "member" : "org.apache.spark.api.python.TestWritable.int", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#int:Int", "kind" : "var"}, {"label" : "str", "tail" : ": String", "member" : "org.apache.spark.api.python.TestWritable.str", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#str:String", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/python\/TestWritable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/api\/python\/TestWritable.html", "kind" : "case class"}, {"name" : "org.apache.spark.api.python.WriteInputFormatTestDataGenerator", "shortDescription" : "This object contains method to generate SequenceFile test data and write it to agiven directory (probably a temp directory)", "object" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html", "members_object" : [{"label" : "generateData", "tail" : "(path: String, jsc: JavaSparkContext): Unit", "member" : "org.apache.spark.api.python.WriteInputFormatTestDataGenerator.generateData", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#generateData(path:String,jsc:org.apache.spark.api.java.JavaSparkContext):Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.apache.spark.api.python.WriteInputFormatTestDataGenerator.main", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/python\/WriteInputFormatTestDataGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.rdd" : [{"name" : "org.apache.spark.rdd.AsyncRDDActions", "shortDescription" : "A set of asynchronous RDD actions available through an implicit conversion.", "members_class" : [{"label" : "foreachPartitionAsync", "tail" : "(f: (Iterator[T]) ⇒ Unit): FutureAction[Unit]", "member" : "org.apache.spark.rdd.AsyncRDDActions.foreachPartitionAsync", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#foreachPartitionAsync(f:Iterator[T]=>Unit):org.apache.spark.FutureAction[Unit]", "kind" : "def"}, {"label" : "foreachAsync", "tail" : "(f: (T) ⇒ Unit): FutureAction[Unit]", "member" : "org.apache.spark.rdd.AsyncRDDActions.foreachAsync", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#foreachAsync(f:T=>Unit):org.apache.spark.FutureAction[Unit]", "kind" : "def"}, {"label" : "takeAsync", "tail" : "(num: Int): FutureAction[Seq[T]]", "member" : "org.apache.spark.rdd.AsyncRDDActions.takeAsync", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#takeAsync(num:Int):org.apache.spark.FutureAction[Seq[T]]", "kind" : "def"}, {"label" : "collectAsync", "tail" : "(): FutureAction[Seq[T]]", "member" : "org.apache.spark.rdd.AsyncRDDActions.collectAsync", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#collectAsync():org.apache.spark.FutureAction[Seq[T]]", "kind" : "def"}, {"label" : "countAsync", "tail" : "(): FutureAction[Long]", "member" : "org.apache.spark.rdd.AsyncRDDActions.countAsync", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#countAsync():org.apache.spark.FutureAction[Long]", "kind" : "def"}, {"member" : "org.apache.spark.rdd.AsyncRDDActions#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/AsyncRDDActions.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.CoGroupedRDD", "shortDescription" : ":: DeveloperApi ::An RDD that cogroups its parents.", "members_class" : [{"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.CoGroupedRDD.clearDependencies", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "compute", "tail" : "(s: Partition, context: TaskContext): Iterator[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.CoGroupedRDD.compute", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#compute(s:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[(K,Array[Iterable[_]])]", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Some[Partitioner]", "member" : "org.apache.spark.rdd.CoGroupedRDD.partitioner", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#partitioner:Some[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.CoGroupedRDD.getPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.CoGroupedRDD.getDependencies", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "setSerializer", "tail" : "(serializer: Serializer): CoGroupedRDD[K]", "member" : "org.apache.spark.rdd.CoGroupedRDD.setSerializer", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#setSerializer(serializer:org.apache.spark.serializer.Serializer):org.apache.spark.rdd.CoGroupedRDD[K]", "kind" : "def"}, {"member" : "org.apache.spark.rdd.CoGroupedRDD#<init>", "error" : "unsupported entity"}, {"label" : "part", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.CoGroupedRDD.part", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#part:org.apache.spark.Partitioner", "kind" : "val"}, {"label" : "rdds", "tail" : ": Seq[RDD[_ <: Product2[K, _]]]", "member" : "org.apache.spark.rdd.CoGroupedRDD.rdds", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#rdds:Seq[org.apache.spark.rdd.RDD[_<:Product2[K,_]]]", "kind" : "var"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): CoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): CoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ K): RDD[(K, (K, Array[Iterable[_]]))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(K, Array[Iterable[_]])]): (K, Array[Iterable[_]])", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(K, Array[Iterable[_]])]): (K, Array[Iterable[_]])", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(K, Array[Iterable[_]])]): Array[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(K, Array[Iterable[_]])]): Array[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, Array[Iterable[_]])", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((K, Array[Iterable[_]]), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((K, Array[Iterable[_]]), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(K, Array[Iterable[_]])]): PartialResult[Map[(K, Array[Iterable[_]]), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(K, Array[Iterable[_]])]): Map[(K, Array[Iterable[_]]), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (K, Array[Iterable[_]])) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (K, Array[Iterable[_]])) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, Array[Iterable[_]]))(op: ((K, Array[Iterable[_]]), (K, Array[Iterable[_]])) ⇒ (K, Array[Iterable[_]])): (K, Array[Iterable[_]])", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((K, Array[Iterable[_]]), (K, Array[Iterable[_]])) ⇒ (K, Array[Iterable[_]]), depth: Int): (K, Array[Iterable[_]])", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((K, Array[Iterable[_]]), (K, Array[Iterable[_]])) ⇒ (K, Array[Iterable[_]])): (K, Array[Iterable[_]])", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, Array[Iterable[_]])], p: Partitioner)(ord: Ordering[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, Array[Iterable[_]])], numPartitions: Int): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(K, Array[Iterable[_]]), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(K, Array[Iterable[_]])]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(K, Array[Iterable[_]])], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(K, Array[Iterable[_]])], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(K, Array[Iterable[_]])], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(K, Array[Iterable[_]])], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(K, Array[Iterable[_]])], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(K, Array[Iterable[_]])], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((K, Array[Iterable[_]]), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(K, Array[Iterable[_]])]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(K, Array[Iterable[_]])]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((K, Array[Iterable[_]]), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(K, Array[Iterable[_]])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(K, Array[Iterable[_]])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(K, Array[Iterable[_]])])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((K, Array[Iterable[_]]), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(K, Array[Iterable[_]])]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, Array[Iterable[_]])], numPartitions: Int): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, Array[Iterable[_]])], partitioner: Partitioner)(ord: Ordering[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(K, Array[Iterable[_]])]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(K, Array[Iterable[_]])]): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ Boolean): RDD[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((K, Array[Iterable[_]])) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(K, Array[Iterable[_]])]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): CoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): CoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): CoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): CoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): CoGroupedRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/CoGroupedRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.DoubleRDDFunctions", "shortDescription" : "Extra functions available on RDDs of Doubles through an implicit conversion.", "members_class" : [{"label" : "histogram", "tail" : "(buckets: Array[Double], evenBuckets: Boolean): Array[Long]", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.histogram", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#histogram(buckets:Array[Double],evenBuckets:Boolean):Array[Long]", "kind" : "def"}, {"label" : "histogram", "tail" : "(bucketCount: Int): (Array[Double], Array[Long])", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.histogram", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#histogram(bucketCount:Int):(Array[Double],Array[Long])", "kind" : "def"}, {"label" : "sumApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.sumApprox", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#sumApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "meanApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.meanApprox", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#meanApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "popVariance", "tail" : "(): Double", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.popVariance", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#popVariance():Double", "kind" : "def"}, {"label" : "popStdev", "tail" : "(): Double", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.popStdev", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#popStdev():Double", "kind" : "def"}, {"label" : "sampleVariance", "tail" : "(): Double", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.sampleVariance", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#sampleVariance():Double", "kind" : "def"}, {"label" : "sampleStdev", "tail" : "(): Double", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.sampleStdev", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#sampleStdev():Double", "kind" : "def"}, {"label" : "stdev", "tail" : "(): Double", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.stdev", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#stdev():Double", "kind" : "def"}, {"label" : "variance", "tail" : "(): Double", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.variance", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#variance():Double", "kind" : "def"}, {"label" : "mean", "tail" : "(): Double", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.mean", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#mean():Double", "kind" : "def"}, {"label" : "stats", "tail" : "(): StatCounter", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.stats", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#stats():org.apache.spark.util.StatCounter", "kind" : "def"}, {"label" : "sum", "tail" : "(): Double", "member" : "org.apache.spark.rdd.DoubleRDDFunctions.sum", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#sum():Double", "kind" : "def"}, {"member" : "org.apache.spark.rdd.DoubleRDDFunctions#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/DoubleRDDFunctions.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.HadoopRDD", "shortDescription" : ":: DeveloperApi ::An RDD that provides core functionality for reading data stored in Hadoop (e.g., files in HDFS,sources in HBase, or S3), using the older MapReduce API (org.apache.hadoop.mapred).", "members_class" : [{"label" : "getConf", "tail" : "(): Configuration", "member" : "org.apache.spark.rdd.HadoopRDD.getConf", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getConf:org.apache.hadoop.conf.Configuration", "kind" : "def"}, {"label" : "persist", "tail" : "(storageLevel: StorageLevel): HadoopRDD.this.type", "member" : "org.apache.spark.rdd.HadoopRDD.persist", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#persist(storageLevel:org.apache.spark.storage.StorageLevel):HadoopRDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.HadoopRDD.checkpoint", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.HadoopRDD.getPreferredLocations", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "mapPartitionsWithInputSplit", "tail" : "(f: (InputSplit, Iterator[(K, V)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.HadoopRDD.mapPartitionsWithInputSplit", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#mapPartitionsWithInputSplit[U](f:(org.apache.hadoop.mapred.InputSplit,Iterator[(K,V)])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$1:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "compute", "tail" : "(theSplit: Partition, context: TaskContext): InterruptibleIterator[(K, V)]", "member" : "org.apache.spark.rdd.HadoopRDD.compute", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#compute(theSplit:org.apache.spark.Partition,context:org.apache.spark.TaskContext):org.apache.spark.InterruptibleIterator[(K,V)]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.HadoopRDD.getPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "getInputFormat", "tail" : "(conf: JobConf): InputFormat[K, V]", "member" : "org.apache.spark.rdd.HadoopRDD.getInputFormat", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getInputFormat(conf:org.apache.hadoop.mapred.JobConf):org.apache.hadoop.mapred.InputFormat[K,V]", "kind" : "def"}, {"label" : "getJobConf", "tail" : "(): JobConf", "member" : "org.apache.spark.rdd.HadoopRDD.getJobConf", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getJobConf():org.apache.hadoop.mapred.JobConf", "kind" : "def"}, {"label" : "inputFormatCacheKey", "tail" : ": String", "member" : "org.apache.spark.rdd.HadoopRDD.inputFormatCacheKey", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#inputFormatCacheKey:String", "kind" : "val"}, {"label" : "jobConfCacheKey", "tail" : ": String", "member" : "org.apache.spark.rdd.HadoopRDD.jobConfCacheKey", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#jobConfCacheKey:String", "kind" : "val"}, {"member" : "org.apache.spark.rdd.HadoopRDD#<init>", "error" : "unsupported entity"}, {"label" : "myLogger", "tail" : ": Logger", "member" : "org.apache.spark.rdd.HadoopRDD.myLogger", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#myLogger:org.apache.log4j.Logger", "kind" : "lazy val"}, {"member" : "org.apache.spark.rdd.HadoopRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): HadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(K, V)]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): HadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((K, V)) ⇒ K): RDD[(K, (K, V))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(K, V)]): (K, V)", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(K, V)]): (K, V)", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(K, V)]): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(K, V)]): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, V)", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((K, V), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((K, V), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(K, V)]): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(K, V)]): Map[(K, V), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (K, V)) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (K, V)) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, V))(op: ((K, V), (K, V)) ⇒ (K, V)): (K, V)", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((K, V), (K, V)) ⇒ (K, V), depth: Int): (K, V)", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((K, V), (K, V)) ⇒ (K, V)): (K, V)", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, V)], p: Partitioner)(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, V)], numPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(K, V), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, V)]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(K, V)]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((K, V)) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(K, V)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(K, V)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(K, V)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(K, V)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(K, V)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(K, V)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((K, V), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(K, V)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(K, V)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((K, V), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, V)) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(K, V)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, V)) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(K, V)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, V)) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(K, V)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((K, V), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(K, V)]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, V)], numPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, V)], partitioner: Partitioner)(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((K, V)) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(K, V)]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: ((K, V)) ⇒ Boolean): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((K, V)) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((K, V)) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(K, V)]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): HadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): HadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): HadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): HadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/HadoopRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/HadoopRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.JdbcRDD", "shortDescription" : "An RDD that executes a SQL query on a JDBC connection and reads results.", "object" : "org\/apache\/spark\/rdd\/JdbcRDD$.html", "members_class" : [{"label" : "compute", "tail" : "(thePart: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.JdbcRDD.compute", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#compute(thePart:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.JdbcRDD.getPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"member" : "org.apache.spark.rdd.JdbcRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): JdbcRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[T]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): JdbcRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (T) ⇒ K): RDD[(K, T)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): T", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[T]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[T]): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[T]): Map[T, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: T)(op: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (T, T) ⇒ T, depth: Int): T", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], p: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[T, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[T]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[T]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (T, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[T]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], partitioner: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (T) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[T]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (T) ⇒ Boolean): RDD[T]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): JdbcRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): JdbcRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): JdbcRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): JdbcRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): JdbcRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/JdbcRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "create", "tail" : "(sc: JavaSparkContext, connectionFactory: ConnectionFactory, sql: String, lowerBound: Long, upperBound: Long, numPartitions: Int): JavaRDD[Array[AnyRef]]", "member" : "org.apache.spark.rdd.JdbcRDD.create", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#create(sc:org.apache.spark.api.java.JavaSparkContext,connectionFactory:org.apache.spark.rdd.JdbcRDD.ConnectionFactory,sql:String,lowerBound:Long,upperBound:Long,numPartitions:Int):org.apache.spark.api.java.JavaRDD[Array[Object]]", "kind" : "def"}, {"label" : "create", "tail" : "(sc: JavaSparkContext, connectionFactory: ConnectionFactory, sql: String, lowerBound: Long, upperBound: Long, numPartitions: Int, mapRow: Function[ResultSet, T]): JavaRDD[T]", "member" : "org.apache.spark.rdd.JdbcRDD.create", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#create[T](sc:org.apache.spark.api.java.JavaSparkContext,connectionFactory:org.apache.spark.rdd.JdbcRDD.ConnectionFactory,sql:String,lowerBound:Long,upperBound:Long,numPartitions:Int,mapRow:org.apache.spark.api.java.function.Function[java.sql.ResultSet,T]):org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "ConnectionFactory", "tail" : "", "member" : "org.apache.spark.rdd.JdbcRDD.ConnectionFactory", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#ConnectionFactoryextendsSerializable", "kind" : "trait"}, {"label" : "resultSetToObjectArray", "tail" : "(rs: ResultSet): Array[AnyRef]", "member" : "org.apache.spark.rdd.JdbcRDD.resultSetToObjectArray", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#resultSetToObjectArray(rs:java.sql.ResultSet):Array[Object]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/JdbcRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/JdbcRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.NewHadoopRDD", "shortDescription" : ":: DeveloperApi ::An RDD that provides core functionality for reading data stored in Hadoop (e.g., files in HDFS,sources in HBase, or S3), using the new MapReduce API (org.apache.hadoop.mapreduce).", "members_class" : [{"label" : "persist", "tail" : "(storageLevel: StorageLevel): NewHadoopRDD.this.type", "member" : "org.apache.spark.rdd.NewHadoopRDD.persist", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#persist(storageLevel:org.apache.spark.storage.StorageLevel):NewHadoopRDD.this.type", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(hsplit: Partition): Seq[String]", "member" : "org.apache.spark.rdd.NewHadoopRDD.getPreferredLocations", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getPreferredLocations(hsplit:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "mapPartitionsWithInputSplit", "tail" : "(f: (InputSplit, Iterator[(K, V)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.NewHadoopRDD.mapPartitionsWithInputSplit", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#mapPartitionsWithInputSplit[U](f:(org.apache.hadoop.mapreduce.InputSplit,Iterator[(K,V)])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$1:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "compute", "tail" : "(theSplit: Partition, context: TaskContext): InterruptibleIterator[(K, V)]", "member" : "org.apache.spark.rdd.NewHadoopRDD.compute", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#compute(theSplit:org.apache.spark.Partition,context:org.apache.spark.TaskContext):org.apache.spark.InterruptibleIterator[(K,V)]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.NewHadoopRDD.getPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "getConf", "tail" : "(): Configuration", "member" : "org.apache.spark.rdd.NewHadoopRDD.getConf", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getConf:org.apache.hadoop.conf.Configuration", "kind" : "def"}, {"label" : "jobId", "tail" : ": JobID", "member" : "org.apache.spark.rdd.NewHadoopRDD.jobId", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#jobId:org.apache.hadoop.mapreduce.JobID", "kind" : "val"}, {"member" : "org.apache.spark.rdd.NewHadoopRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): NewHadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(K, V)]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): NewHadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((K, V)) ⇒ K): RDD[(K, (K, V))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(K, V)]): (K, V)", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(K, V)]): (K, V)", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(K, V)]): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(K, V)]): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, V)", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((K, V), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((K, V), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(K, V)]): PartialResult[Map[(K, V), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(K, V)]): Map[(K, V), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (K, V)) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (K, V)) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, V))(op: ((K, V), (K, V)) ⇒ (K, V)): (K, V)", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((K, V), (K, V)) ⇒ (K, V), depth: Int): (K, V)", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((K, V), (K, V)) ⇒ (K, V)): (K, V)", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, V)], p: Partitioner)(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, V)], numPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(K, V), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, V)]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(K, V)]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((K, V)) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(K, V)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(K, V)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(K, V)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(K, V)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(K, V)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(K, V)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((K, V), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(K, V)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(K, V)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((K, V), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, V)) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(K, V)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, V)) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(K, V)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, V)) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(K, V)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((K, V), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(K, V)]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, V)], numPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, V)], partitioner: Partitioner)(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((K, V)) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(K, V)]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(K, V)]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(K, V)]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: ((K, V)) ⇒ Boolean): RDD[(K, V)]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((K, V)) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((K, V)) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(K, V)]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): NewHadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): NewHadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): NewHadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): NewHadoopRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/NewHadoopRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.OrderedRDDFunctions", "shortDescription" : "Extra functions available on RDDs of (key, value) pairs where the key is sortable throughan implicit conversion.", "members_class" : [{"label" : "filterByRange", "tail" : "(lower: K, upper: K): RDD[P]", "member" : "org.apache.spark.rdd.OrderedRDDFunctions.filterByRange", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#filterByRange(lower:K,upper:K):org.apache.spark.rdd.RDD[P]", "kind" : "def"}, {"label" : "repartitionAndSortWithinPartitions", "tail" : "(partitioner: Partitioner): RDD[(K, V)]", "member" : "org.apache.spark.rdd.OrderedRDDFunctions.repartitionAndSortWithinPartitions", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#repartitionAndSortWithinPartitions(partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "sortByKey", "tail" : "(ascending: Boolean, numPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.rdd.OrderedRDDFunctions.sortByKey", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#sortByKey(ascending:Boolean,numPartitions:Int):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"member" : "org.apache.spark.rdd.OrderedRDDFunctions#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/OrderedRDDFunctions.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.PairRDDFunctions", "shortDescription" : "Extra functions available on RDDs of (key, value) pairs through an implicit conversion.", "members_class" : [{"label" : "values", "tail" : "(): RDD[V]", "member" : "org.apache.spark.rdd.PairRDDFunctions.values", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#values:org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "keys", "tail" : "(): RDD[K]", "member" : "org.apache.spark.rdd.PairRDDFunctions.keys", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#keys:org.apache.spark.rdd.RDD[K]", "kind" : "def"}, {"label" : "saveAsHadoopDataset", "tail" : "(conf: JobConf): Unit", "member" : "org.apache.spark.rdd.PairRDDFunctions.saveAsHadoopDataset", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#saveAsHadoopDataset(conf:org.apache.hadoop.mapred.JobConf):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopDataset", "tail" : "(conf: Configuration): Unit", "member" : "org.apache.spark.rdd.PairRDDFunctions.saveAsNewAPIHadoopDataset", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#saveAsNewAPIHadoopDataset(conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[_ <: OutputFormat[_, _]], conf: JobConf, codec: Option[Class[_ <: CompressionCodec]]): Unit", "member" : "org.apache.spark.rdd.PairRDDFunctions.saveAsHadoopFile", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#saveAsHadoopFile(path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[_<:org.apache.hadoop.mapred.OutputFormat[_,_]],conf:org.apache.hadoop.mapred.JobConf,codec:Option[Class[_<:org.apache.hadoop.io.compress.CompressionCodec]]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[_ <: OutputFormat[_, _]], codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.PairRDDFunctions.saveAsHadoopFile", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#saveAsHadoopFile(path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[_<:org.apache.hadoop.mapred.OutputFormat[_,_]],codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String, keyClass: Class[_], valueClass: Class[_], outputFormatClass: Class[_ <: OutputFormat[_, _]], conf: Configuration): Unit", "member" : "org.apache.spark.rdd.PairRDDFunctions.saveAsNewAPIHadoopFile", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#saveAsNewAPIHadoopFile(path:String,keyClass:Class[_],valueClass:Class[_],outputFormatClass:Class[_<:org.apache.hadoop.mapreduce.OutputFormat[_,_]],conf:org.apache.hadoop.conf.Configuration):Unit", "kind" : "def"}, {"label" : "saveAsNewAPIHadoopFile", "tail" : "(path: String)(fm: ClassTag[F]): Unit", "member" : "org.apache.spark.rdd.PairRDDFunctions.saveAsNewAPIHadoopFile", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#saveAsNewAPIHadoopFile[F<:org.apache.hadoop.mapreduce.OutputFormat[K,V]](path:String)(implicitfm:scala.reflect.ClassTag[F]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec])(fm: ClassTag[F]): Unit", "member" : "org.apache.spark.rdd.PairRDDFunctions.saveAsHadoopFile", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[K,V]](path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec])(implicitfm:scala.reflect.ClassTag[F]):Unit", "kind" : "def"}, {"label" : "saveAsHadoopFile", "tail" : "(path: String)(fm: ClassTag[F]): Unit", "member" : "org.apache.spark.rdd.PairRDDFunctions.saveAsHadoopFile", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#saveAsHadoopFile[F<:org.apache.hadoop.mapred.OutputFormat[K,V]](path:String)(implicitfm:scala.reflect.ClassTag[F]):Unit", "kind" : "def"}, {"label" : "lookup", "tail" : "(key: K): Seq[V]", "member" : "org.apache.spark.rdd.PairRDDFunctions.lookup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#lookup(key:K):Seq[V]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: RDD[(K, W)], p: Partitioner)(arg0: ClassTag[W]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.subtractByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#subtractByKey[W](other:org.apache.spark.rdd.RDD[(K,W)],p:org.apache.spark.Partitioner)(implicitevidence$6:scala.reflect.ClassTag[W]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: RDD[(K, W)], numPartitions: Int)(arg0: ClassTag[W]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.subtractByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#subtractByKey[W](other:org.apache.spark.rdd.RDD[(K,W)],numPartitions:Int)(implicitevidence$5:scala.reflect.ClassTag[W]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "subtractByKey", "tail" : "(other: RDD[(K, W)])(arg0: ClassTag[W]): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.subtractByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#subtractByKey[W](other:org.apache.spark.rdd.RDD[(K,W)])(implicitevidence$4:scala.reflect.ClassTag[W]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: RDD[(K, W1)], other2: RDD[(K, W2)], other3: RDD[(K, W3)]): RDD[(K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.groupWith", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#groupWith[W1,W2,W3](other1:org.apache.spark.rdd.RDD[(K,W1)],other2:org.apache.spark.rdd.RDD[(K,W2)],other3:org.apache.spark.rdd.RDD[(K,W3)]):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3]))]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other1: RDD[(K, W1)], other2: RDD[(K, W2)]): RDD[(K, (Iterable[V], Iterable[W1], Iterable[W2]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.groupWith", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#groupWith[W1,W2](other1:org.apache.spark.rdd.RDD[(K,W1)],other2:org.apache.spark.rdd.RDD[(K,W2)]):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W1],Iterable[W2]))]", "kind" : "def"}, {"label" : "groupWith", "tail" : "(other: RDD[(K, W)]): RDD[(K, (Iterable[V], Iterable[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.groupWith", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#groupWith[W](other:org.apache.spark.rdd.RDD[(K,W)]):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: RDD[(K, W1)], other2: RDD[(K, W2)], other3: RDD[(K, W3)], numPartitions: Int): RDD[(K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W1,W2,W3](other1:org.apache.spark.rdd.RDD[(K,W1)],other2:org.apache.spark.rdd.RDD[(K,W2)],other3:org.apache.spark.rdd.RDD[(K,W3)],numPartitions:Int):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: RDD[(K, W1)], other2: RDD[(K, W2)], numPartitions: Int): RDD[(K, (Iterable[V], Iterable[W1], Iterable[W2]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W1,W2](other1:org.apache.spark.rdd.RDD[(K,W1)],other2:org.apache.spark.rdd.RDD[(K,W2)],numPartitions:Int):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W1],Iterable[W2]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: RDD[(K, W)], numPartitions: Int): RDD[(K, (Iterable[V], Iterable[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W](other:org.apache.spark.rdd.RDD[(K,W)],numPartitions:Int):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: RDD[(K, W1)], other2: RDD[(K, W2)]): RDD[(K, (Iterable[V], Iterable[W1], Iterable[W2]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W1,W2](other1:org.apache.spark.rdd.RDD[(K,W1)],other2:org.apache.spark.rdd.RDD[(K,W2)]):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W1],Iterable[W2]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: RDD[(K, W)]): RDD[(K, (Iterable[V], Iterable[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W](other:org.apache.spark.rdd.RDD[(K,W)]):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: RDD[(K, W1)], other2: RDD[(K, W2)], other3: RDD[(K, W3)]): RDD[(K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W1,W2,W3](other1:org.apache.spark.rdd.RDD[(K,W1)],other2:org.apache.spark.rdd.RDD[(K,W2)],other3:org.apache.spark.rdd.RDD[(K,W3)]):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: RDD[(K, W1)], other2: RDD[(K, W2)], partitioner: Partitioner): RDD[(K, (Iterable[V], Iterable[W1], Iterable[W2]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W1,W2](other1:org.apache.spark.rdd.RDD[(K,W1)],other2:org.apache.spark.rdd.RDD[(K,W2)],partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W1],Iterable[W2]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other: RDD[(K, W)], partitioner: Partitioner): RDD[(K, (Iterable[V], Iterable[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W](other:org.apache.spark.rdd.RDD[(K,W)],partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W]))]", "kind" : "def"}, {"label" : "cogroup", "tail" : "(other1: RDD[(K, W1)], other2: RDD[(K, W2)], other3: RDD[(K, W3)], partitioner: Partitioner): RDD[(K, (Iterable[V], Iterable[W1], Iterable[W2], Iterable[W3]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.cogroup", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#cogroup[W1,W2,W3](other1:org.apache.spark.rdd.RDD[(K,W1)],other2:org.apache.spark.rdd.RDD[(K,W2)],other3:org.apache.spark.rdd.RDD[(K,W3)],partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,(Iterable[V],Iterable[W1],Iterable[W2],Iterable[W3]))]", "kind" : "def"}, {"label" : "flatMapValues", "tail" : "(f: (V) ⇒ TraversableOnce[U]): RDD[(K, U)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.flatMapValues", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#flatMapValues[U](f:V=>TraversableOnce[U]):org.apache.spark.rdd.RDD[(K,U)]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (V) ⇒ U): RDD[(K, U)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.mapValues", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#mapValues[U](f:V=>U):org.apache.spark.rdd.RDD[(K,U)]", "kind" : "def"}, {"label" : "collectAsMap", "tail" : "(): Map[K, V]", "member" : "org.apache.spark.rdd.PairRDDFunctions.collectAsMap", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#collectAsMap():scala.collection.Map[K,V]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: RDD[(K, W)], numPartitions: Int): RDD[(K, (Option[V], Option[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.fullOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#fullOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)],numPartitions:Int):org.apache.spark.rdd.RDD[(K,(Option[V],Option[W]))]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: RDD[(K, W)]): RDD[(K, (Option[V], Option[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.fullOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#fullOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)]):org.apache.spark.rdd.RDD[(K,(Option[V],Option[W]))]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: RDD[(K, W)], numPartitions: Int): RDD[(K, (Option[V], W))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.rightOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#rightOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)],numPartitions:Int):org.apache.spark.rdd.RDD[(K,(Option[V],W))]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: RDD[(K, W)]): RDD[(K, (Option[V], W))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.rightOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#rightOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)]):org.apache.spark.rdd.RDD[(K,(Option[V],W))]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: RDD[(K, W)], numPartitions: Int): RDD[(K, (V, Option[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.leftOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#leftOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)],numPartitions:Int):org.apache.spark.rdd.RDD[(K,(V,Option[W]))]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: RDD[(K, W)]): RDD[(K, (V, Option[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.leftOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#leftOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)]):org.apache.spark.rdd.RDD[(K,(V,Option[W]))]", "kind" : "def"}, {"label" : "join", "tail" : "(other: RDD[(K, W)], numPartitions: Int): RDD[(K, (V, W))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.join", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#join[W](other:org.apache.spark.rdd.RDD[(K,W)],numPartitions:Int):org.apache.spark.rdd.RDD[(K,(V,W))]", "kind" : "def"}, {"label" : "join", "tail" : "(other: RDD[(K, W)]): RDD[(K, (V, W))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.join", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#join[W](other:org.apache.spark.rdd.RDD[(K,W)]):org.apache.spark.rdd.RDD[(K,(V,W))]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(): RDD[(K, Iterable[V])]", "member" : "org.apache.spark.rdd.PairRDDFunctions.groupByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#groupByKey():org.apache.spark.rdd.RDD[(K,Iterable[V])]", "kind" : "def"}, {"label" : "combineByKeyWithClassTag", "tail" : "(createCombiner: (V) ⇒ C, mergeValue: (C, V) ⇒ C, mergeCombiners: (C, C) ⇒ C)(ct: ClassTag[C]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.combineByKeyWithClassTag", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#combineByKeyWithClassTag[C](createCombiner:V=>C,mergeValue:(C,V)=>C,mergeCombiners:(C,C)=>C)(implicitct:scala.reflect.ClassTag[C]):org.apache.spark.rdd.RDD[(K,C)]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: (V) ⇒ C, mergeValue: (C, V) ⇒ C, mergeCombiners: (C, C) ⇒ C): RDD[(K, C)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.combineByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#combineByKey[C](createCombiner:V=>C,mergeValue:(C,V)=>C,mergeCombiners:(C,C)=>C):org.apache.spark.rdd.RDD[(K,C)]", "kind" : "def"}, {"label" : "fullOuterJoin", "tail" : "(other: RDD[(K, W)], partitioner: Partitioner): RDD[(K, (Option[V], Option[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.fullOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#fullOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)],partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,(Option[V],Option[W]))]", "kind" : "def"}, {"label" : "rightOuterJoin", "tail" : "(other: RDD[(K, W)], partitioner: Partitioner): RDD[(K, (Option[V], W))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.rightOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#rightOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)],partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,(Option[V],W))]", "kind" : "def"}, {"label" : "leftOuterJoin", "tail" : "(other: RDD[(K, W)], partitioner: Partitioner): RDD[(K, (V, Option[W]))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.leftOuterJoin", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#leftOuterJoin[W](other:org.apache.spark.rdd.RDD[(K,W)],partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,(V,Option[W]))]", "kind" : "def"}, {"label" : "join", "tail" : "(other: RDD[(K, W)], partitioner: Partitioner): RDD[(K, (V, W))]", "member" : "org.apache.spark.rdd.PairRDDFunctions.join", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#join[W](other:org.apache.spark.rdd.RDD[(K,W)],partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,(V,W))]", "kind" : "def"}, {"label" : "partitionBy", "tail" : "(partitioner: Partitioner): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.partitionBy", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#partitionBy(partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(numPartitions: Int): RDD[(K, Iterable[V])]", "member" : "org.apache.spark.rdd.PairRDDFunctions.groupByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#groupByKey(numPartitions:Int):org.apache.spark.rdd.RDD[(K,Iterable[V])]", "kind" : "def"}, {"label" : "groupByKey", "tail" : "(partitioner: Partitioner): RDD[(K, Iterable[V])]", "member" : "org.apache.spark.rdd.PairRDDFunctions.groupByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#groupByKey(partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,Iterable[V])]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double): RDD[(K, Long)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.countApproxDistinctByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#countApproxDistinctByKey(relativeSD:Double):org.apache.spark.rdd.RDD[(K,Long)]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, numPartitions: Int): RDD[(K, Long)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.countApproxDistinctByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#countApproxDistinctByKey(relativeSD:Double,numPartitions:Int):org.apache.spark.rdd.RDD[(K,Long)]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(relativeSD: Double, partitioner: Partitioner): RDD[(K, Long)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.countApproxDistinctByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#countApproxDistinctByKey(relativeSD:Double,partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,Long)]", "kind" : "def"}, {"label" : "countApproxDistinctByKey", "tail" : "(p: Int, sp: Int, partitioner: Partitioner): RDD[(K, Long)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.countApproxDistinctByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#countApproxDistinctByKey(p:Int,sp:Int,partitioner:org.apache.spark.Partitioner):org.apache.spark.rdd.RDD[(K,Long)]", "kind" : "def"}, {"label" : "countByKeyApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[Map[K, BoundedDouble]]", "member" : "org.apache.spark.rdd.PairRDDFunctions.countByKeyApprox", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#countByKeyApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[scala.collection.Map[K,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByKey", "tail" : "(): Map[K, Long]", "member" : "org.apache.spark.rdd.PairRDDFunctions.countByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#countByKey():scala.collection.Map[K,Long]", "kind" : "def"}, {"label" : "reduceByKeyLocally", "tail" : "(func: (V, V) ⇒ V): Map[K, V]", "member" : "org.apache.spark.rdd.PairRDDFunctions.reduceByKeyLocally", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#reduceByKeyLocally(func:(V,V)=>V):scala.collection.Map[K,V]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: (V, V) ⇒ V): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.reduceByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#reduceByKey(func:(V,V)=>V):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(func: (V, V) ⇒ V, numPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.reduceByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#reduceByKey(func:(V,V)=>V,numPartitions:Int):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "reduceByKey", "tail" : "(partitioner: Partitioner, func: (V, V) ⇒ V): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.reduceByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#reduceByKey(partitioner:org.apache.spark.Partitioner,func:(V,V)=>V):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "sampleByKeyExact", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.sampleByKeyExact", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#sampleByKeyExact(withReplacement:Boolean,fractions:scala.collection.Map[K,Double],seed:Long):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "sampleByKey", "tail" : "(withReplacement: Boolean, fractions: Map[K, Double], seed: Long): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.sampleByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#sampleByKey(withReplacement:Boolean,fractions:scala.collection.Map[K,Double],seed:Long):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V)(func: (V, V) ⇒ V): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.foldByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#foldByKey(zeroValue:V)(func:(V,V)=>V):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, numPartitions: Int)(func: (V, V) ⇒ V): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.foldByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#foldByKey(zeroValue:V,numPartitions:Int)(func:(V,V)=>V):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "foldByKey", "tail" : "(zeroValue: V, partitioner: Partitioner)(func: (V, V) ⇒ V): RDD[(K, V)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.foldByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#foldByKey(zeroValue:V,partitioner:org.apache.spark.Partitioner)(func:(V,V)=>V):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U)(seqOp: (U, V) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): RDD[(K, U)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.aggregateByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#aggregateByKey[U](zeroValue:U)(seqOp:(U,V)=>U,combOp:(U,U)=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(K,U)]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, numPartitions: Int)(seqOp: (U, V) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): RDD[(K, U)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.aggregateByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#aggregateByKey[U](zeroValue:U,numPartitions:Int)(seqOp:(U,V)=>U,combOp:(U,U)=>U)(implicitevidence$2:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(K,U)]", "kind" : "def"}, {"label" : "aggregateByKey", "tail" : "(zeroValue: U, partitioner: Partitioner)(seqOp: (U, V) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): RDD[(K, U)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.aggregateByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#aggregateByKey[U](zeroValue:U,partitioner:org.apache.spark.Partitioner)(seqOp:(U,V)=>U,combOp:(U,U)=>U)(implicitevidence$1:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(K,U)]", "kind" : "def"}, {"label" : "combineByKeyWithClassTag", "tail" : "(createCombiner: (V) ⇒ C, mergeValue: (C, V) ⇒ C, mergeCombiners: (C, C) ⇒ C, numPartitions: Int)(ct: ClassTag[C]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.combineByKeyWithClassTag", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#combineByKeyWithClassTag[C](createCombiner:V=>C,mergeValue:(C,V)=>C,mergeCombiners:(C,C)=>C,numPartitions:Int)(implicitct:scala.reflect.ClassTag[C]):org.apache.spark.rdd.RDD[(K,C)]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: (V) ⇒ C, mergeValue: (C, V) ⇒ C, mergeCombiners: (C, C) ⇒ C, numPartitions: Int): RDD[(K, C)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.combineByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#combineByKey[C](createCombiner:V=>C,mergeValue:(C,V)=>C,mergeCombiners:(C,C)=>C,numPartitions:Int):org.apache.spark.rdd.RDD[(K,C)]", "kind" : "def"}, {"label" : "combineByKey", "tail" : "(createCombiner: (V) ⇒ C, mergeValue: (C, V) ⇒ C, mergeCombiners: (C, C) ⇒ C, partitioner: Partitioner, mapSideCombine: Boolean, serializer: Serializer): RDD[(K, C)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.combineByKey", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#combineByKey[C](createCombiner:V=>C,mergeValue:(C,V)=>C,mergeCombiners:(C,C)=>C,partitioner:org.apache.spark.Partitioner,mapSideCombine:Boolean,serializer:org.apache.spark.serializer.Serializer):org.apache.spark.rdd.RDD[(K,C)]", "kind" : "def"}, {"label" : "combineByKeyWithClassTag", "tail" : "(createCombiner: (V) ⇒ C, mergeValue: (C, V) ⇒ C, mergeCombiners: (C, C) ⇒ C, partitioner: Partitioner, mapSideCombine: Boolean, serializer: Serializer)(ct: ClassTag[C]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.PairRDDFunctions.combineByKeyWithClassTag", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#combineByKeyWithClassTag[C](createCombiner:V=>C,mergeValue:(C,V)=>C,mergeCombiners:(C,C)=>C,partitioner:org.apache.spark.Partitioner,mapSideCombine:Boolean,serializer:org.apache.spark.serializer.Serializer)(implicitct:scala.reflect.ClassTag[C]):org.apache.spark.rdd.RDD[(K,C)]", "kind" : "def"}, {"member" : "org.apache.spark.rdd.PairRDDFunctions#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/PairRDDFunctions.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.PartitionCoalescer", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "coalesce", "tail" : "(maxPartitions: Int, parent: RDD[_]): Array[PartitionGroup]", "member" : "org.apache.spark.rdd.PartitionCoalescer.coalesce", "link" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html#coalesce(maxPartitions:Int,parent:org.apache.spark.rdd.RDD[_]):Array[org.apache.spark.rdd.PartitionGroup]", "kind" : "abstract def"}], "shortDescription" : "::DeveloperApi::A PartitionCoalescer defines how to coalesce the partitions of a given RDD.", "trait" : "org\/apache\/spark\/rdd\/PartitionCoalescer.html", "kind" : "trait"}, {"name" : "org.apache.spark.rdd.PartitionGroup", "shortDescription" : "::DeveloperApi::A group of Partitions", "members_class" : [{"label" : "numPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.PartitionGroup.numPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#numPartitions:Int", "kind" : "def"}, {"label" : "partitions", "tail" : ": ArrayBuffer[Partition]", "member" : "org.apache.spark.rdd.PartitionGroup.partitions", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#partitions:scala.collection.mutable.ArrayBuffer[org.apache.spark.Partition]", "kind" : "val"}, {"member" : "org.apache.spark.rdd.PartitionGroup#<init>", "error" : "unsupported entity"}, {"label" : "prefLoc", "tail" : ": Option[String]", "member" : "org.apache.spark.rdd.PartitionGroup.prefLoc", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#prefLoc:Option[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/PartitionGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/PartitionGroup.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.PartitionPruningRDD", "shortDescription" : ":: DeveloperApi ::An RDD used to prune RDD partitions\/partitions so we can avoid launching tasks onall partitions.", "object" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html", "members_class" : [{"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.PartitionPruningRDD.getPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.PartitionPruningRDD.compute", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "def"}, {"member" : "org.apache.spark.rdd.PartitionPruningRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): PartitionPruningRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[T]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): PartitionPruningRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (T) ⇒ K): RDD[(K, T)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): T", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[T]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[T]): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[T]): Map[T, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: T)(op: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (T, T) ⇒ T, depth: Int): T", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], p: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[T, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[T]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[T]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (T, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[T]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], partitioner: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (T) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[T]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (T) ⇒ Boolean): RDD[T]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): PartitionPruningRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): PartitionPruningRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): PartitionPruningRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): PartitionPruningRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): PartitionPruningRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "create", "tail" : "(rdd: RDD[T], partitionFilterFunc: (Int) ⇒ Boolean): PartitionPruningRDD[T]", "member" : "org.apache.spark.rdd.PartitionPruningRDD.create", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#create[T](rdd:org.apache.spark.rdd.RDD[T],partitionFilterFunc:Int=>Boolean):org.apache.spark.rdd.PartitionPruningRDD[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/PartitionPruningRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/PartitionPruningRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.RDD", "shortDescription" : "A Resilient Distributed Dataset (RDD), the basic abstraction in Spark.", "object" : "org\/apache\/spark\/rdd\/RDD$.html", "members_class" : [{"label" : "getOutputDeterministicLevel", "tail" : "(): DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/rdd\/RDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/rdd\/RDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/rdd\/RDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/rdd\/RDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/rdd\/RDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/rdd\/RDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/rdd\/RDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/rdd\/RDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/rdd\/RDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/rdd\/RDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): RDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/rdd\/RDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[T]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/rdd\/RDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/rdd\/RDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/rdd\/RDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/rdd\/RDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): RDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/rdd\/RDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/rdd\/RDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (T) ⇒ K): RDD[(K, T)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/rdd\/RDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/rdd\/RDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/RDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/RDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/rdd\/RDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/rdd\/RDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/rdd\/RDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/rdd\/RDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/rdd\/RDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): T", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/rdd\/RDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[T]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/rdd\/RDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/rdd\/RDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/rdd\/RDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/RDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/RDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[T]): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/rdd\/RDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[T]): Map[T, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/rdd\/RDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/rdd\/RDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/rdd\/RDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/rdd\/RDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/rdd\/RDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: T)(op: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/rdd\/RDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (T, T) ⇒ T, depth: Int): T", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/rdd\/RDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/rdd\/RDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], p: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/RDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/RDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/RDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[T, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/RDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/rdd\/RDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[T]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/RDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[T]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/rdd\/RDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/rdd\/RDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/rdd\/RDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/RDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (T, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/RDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/RDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/RDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/RDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/RDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/RDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/rdd\/RDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[T]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/rdd\/RDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/RDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], partitioner: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/RDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/RDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (T) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/rdd\/RDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/rdd\/RDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/rdd\/RDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/rdd\/RDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[T]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/rdd\/RDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/rdd\/RDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/rdd\/RDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/rdd\/RDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/RDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/RDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (T) ⇒ Boolean): RDD[T]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/rdd\/RDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/rdd\/RDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/rdd\/RDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/rdd\/RDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/rdd\/RDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/rdd\/RDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/rdd\/RDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): RDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/rdd\/RDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): RDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/rdd\/RDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): RDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/RDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): RDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/RDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): RDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/rdd\/RDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/rdd\/RDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/rdd\/RDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/rdd\/RDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/rdd\/RDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "org\/apache\/spark\/rdd\/RDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "org\/apache\/spark\/rdd\/RDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/rdd\/RDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"member" : "org.apache.spark.rdd.RDD#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.rdd.RDD#<init>", "error" : "unsupported entity"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/rdd\/RDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/rdd\/RDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/RDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/RDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/RDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/RDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/RDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/RDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/RDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/RDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/RDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/RDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/RDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/RDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/RDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/RDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/RDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/RDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/RDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/RDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/RDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/RDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/RDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/RDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/RDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/RDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/RDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/RDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/RDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/RDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/RDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/RDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.getPartitions", "link" : "org\/apache\/spark\/rdd\/RDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "abstract def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.compute", "link" : "org\/apache\/spark\/rdd\/RDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "abstract def"}], "members_object" : [{"label" : "numericRDDToDoubleRDDFunctions", "tail" : "(rdd: RDD[T])(num: Numeric[T]): DoubleRDDFunctions", "member" : "org.apache.spark.rdd.RDD.numericRDDToDoubleRDDFunctions", "link" : "org\/apache\/spark\/rdd\/RDD$.html#numericRDDToDoubleRDDFunctions[T](rdd:org.apache.spark.rdd.RDD[T])(implicitnum:Numeric[T]):org.apache.spark.rdd.DoubleRDDFunctions", "kind" : "implicit def"}, {"label" : "doubleRDDToDoubleRDDFunctions", "tail" : "(rdd: RDD[Double]): DoubleRDDFunctions", "member" : "org.apache.spark.rdd.RDD.doubleRDDToDoubleRDDFunctions", "link" : "org\/apache\/spark\/rdd\/RDD$.html#doubleRDDToDoubleRDDFunctions(rdd:org.apache.spark.rdd.RDD[Double]):org.apache.spark.rdd.DoubleRDDFunctions", "kind" : "implicit def"}, {"label" : "rddToOrderedRDDFunctions", "tail" : "(rdd: RDD[(K, V)])(arg0: Ordering[K], arg1: ClassTag[K], arg2: ClassTag[V]): OrderedRDDFunctions[K, V, (K, V)]", "member" : "org.apache.spark.rdd.RDD.rddToOrderedRDDFunctions", "link" : "org\/apache\/spark\/rdd\/RDD$.html#rddToOrderedRDDFunctions[K,V](rdd:org.apache.spark.rdd.RDD[(K,V)])(implicitevidence$36:Ordering[K],implicitevidence$37:scala.reflect.ClassTag[K],implicitevidence$38:scala.reflect.ClassTag[V]):org.apache.spark.rdd.OrderedRDDFunctions[K,V,(K,V)]", "kind" : "implicit def"}, {"label" : "rddToSequenceFileRDDFunctions", "tail" : "(rdd: RDD[(K, V)])(kt: ClassTag[K], vt: ClassTag[V], keyWritableFactory: WritableFactory[K], valueWritableFactory: WritableFactory[V]): SequenceFileRDDFunctions[K, V]", "member" : "org.apache.spark.rdd.RDD.rddToSequenceFileRDDFunctions", "link" : "org\/apache\/spark\/rdd\/RDD$.html#rddToSequenceFileRDDFunctions[K,V](rdd:org.apache.spark.rdd.RDD[(K,V)])(implicitkt:scala.reflect.ClassTag[K],implicitvt:scala.reflect.ClassTag[V],implicitkeyWritableFactory:org.apache.spark.WritableFactory[K],implicitvalueWritableFactory:org.apache.spark.WritableFactory[V]):org.apache.spark.rdd.SequenceFileRDDFunctions[K,V]", "kind" : "implicit def"}, {"label" : "rddToAsyncRDDActions", "tail" : "(rdd: RDD[T])(arg0: ClassTag[T]): AsyncRDDActions[T]", "member" : "org.apache.spark.rdd.RDD.rddToAsyncRDDActions", "link" : "org\/apache\/spark\/rdd\/RDD$.html#rddToAsyncRDDActions[T](rdd:org.apache.spark.rdd.RDD[T])(implicitevidence$35:scala.reflect.ClassTag[T]):org.apache.spark.rdd.AsyncRDDActions[T]", "kind" : "implicit def"}, {"label" : "rddToPairRDDFunctions", "tail" : "(rdd: RDD[(K, V)])(kt: ClassTag[K], vt: ClassTag[V], ord: Ordering[K]): PairRDDFunctions[K, V]", "member" : "org.apache.spark.rdd.RDD.rddToPairRDDFunctions", "link" : "org\/apache\/spark\/rdd\/RDD$.html#rddToPairRDDFunctions[K,V](rdd:org.apache.spark.rdd.RDD[(K,V)])(implicitkt:scala.reflect.ClassTag[K],implicitvt:scala.reflect.ClassTag[V],implicitord:Ordering[K]):org.apache.spark.rdd.PairRDDFunctions[K,V]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/RDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/RDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/RDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/RDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/RDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/RDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/RDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/RDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/RDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/RDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/RDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/RDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/RDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/RDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/RDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/RDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/RDD.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.RDDBarrier", "shortDescription" : ":: Experimental ::Wraps an RDD in a barrier stage, which forces Spark to launch tasks of this stage together.", "members_class" : [{"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[T]) ⇒ Iterator[S], preservesPartitioning: Boolean)(arg0: ClassTag[S]): RDD[S]", "member" : "org.apache.spark.rdd.RDDBarrier.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#mapPartitionsWithIndex[S](f:(Int,Iterator[T])=>Iterator[S],preservesPartitioning:Boolean)(implicitevidence$3:scala.reflect.ClassTag[S]):org.apache.spark.rdd.RDD[S]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[T]) ⇒ Iterator[S], preservesPartitioning: Boolean)(arg0: ClassTag[S]): RDD[S]", "member" : "org.apache.spark.rdd.RDDBarrier.mapPartitions", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#mapPartitions[S](f:Iterator[T]=>Iterator[S],preservesPartitioning:Boolean)(implicitevidence$2:scala.reflect.ClassTag[S]):org.apache.spark.rdd.RDD[S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/RDDBarrier.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/RDDBarrier.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.SequenceFileRDDFunctions", "shortDescription" : "Extra functions available on RDDs of (key, value) pairs to create a Hadoop SequenceFile,through an implicit conversion.", "members_class" : [{"label" : "saveAsSequenceFile", "tail" : "(path: String, codec: Option[Class[_ <: CompressionCodec]]): Unit", "member" : "org.apache.spark.rdd.SequenceFileRDDFunctions.saveAsSequenceFile", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#saveAsSequenceFile(path:String,codec:Option[Class[_<:org.apache.hadoop.io.compress.CompressionCodec]]):Unit", "kind" : "def"}, {"member" : "org.apache.spark.rdd.SequenceFileRDDFunctions#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/SequenceFileRDDFunctions.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.ShuffledRDD", "shortDescription" : ":: DeveloperApi ::The resulting RDD from a shuffle (e.g.", "members_class" : [{"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.ShuffledRDD.clearDependencies", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "compute", "tail" : "(split: Partition, context: TaskContext): Iterator[(K, C)]", "member" : "org.apache.spark.rdd.ShuffledRDD.compute", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#compute(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[(K,C)]", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(partition: Partition): Seq[String]", "member" : "org.apache.spark.rdd.ShuffledRDD.getPreferredLocations", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getPreferredLocations(partition:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.ShuffledRDD.getPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "updatedParittioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.ShuffledRDD.updatedParittioner", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#updatedParittioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Some[Partitioner]", "member" : "org.apache.spark.rdd.ShuffledRDD.partitioner", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#partitioner:Some[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.ShuffledRDD.getDependencies", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "setMapSideCombine", "tail" : "(mapSideCombine: Boolean): ShuffledRDD[K, V, C]", "member" : "org.apache.spark.rdd.ShuffledRDD.setMapSideCombine", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#setMapSideCombine(mapSideCombine:Boolean):org.apache.spark.rdd.ShuffledRDD[K,V,C]", "kind" : "def"}, {"label" : "setAggregator", "tail" : "(aggregator: Aggregator[K, V, C]): ShuffledRDD[K, V, C]", "member" : "org.apache.spark.rdd.ShuffledRDD.setAggregator", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#setAggregator(aggregator:org.apache.spark.Aggregator[K,V,C]):org.apache.spark.rdd.ShuffledRDD[K,V,C]", "kind" : "def"}, {"label" : "setKeyOrdering", "tail" : "(keyOrdering: Ordering[K]): ShuffledRDD[K, V, C]", "member" : "org.apache.spark.rdd.ShuffledRDD.setKeyOrdering", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#setKeyOrdering(keyOrdering:Ordering[K]):org.apache.spark.rdd.ShuffledRDD[K,V,C]", "kind" : "def"}, {"label" : "setSerializer", "tail" : "(serializer: Serializer): ShuffledRDD[K, V, C]", "member" : "org.apache.spark.rdd.ShuffledRDD.setSerializer", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#setSerializer(serializer:org.apache.spark.serializer.Serializer):org.apache.spark.rdd.ShuffledRDD[K,V,C]", "kind" : "def"}, {"label" : "myLogger", "tail" : ": Logger", "member" : "org.apache.spark.rdd.ShuffledRDD.myLogger", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#myLogger:org.apache.log4j.Logger", "kind" : "lazy val"}, {"member" : "org.apache.spark.rdd.ShuffledRDD#<init>", "error" : "unsupported entity"}, {"label" : "part", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.ShuffledRDD.part", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#part:org.apache.spark.Partitioner", "kind" : "val"}, {"label" : "prev", "tail" : ": RDD[_ <: Product2[K, V]]", "member" : "org.apache.spark.rdd.ShuffledRDD.prev", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#prev:org.apache.spark.rdd.RDD[_<:Product2[K,V]]", "kind" : "var"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): ShuffledRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(K, C)]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): ShuffledRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((K, C)) ⇒ K): RDD[(K, (K, C))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(K, C)]): (K, C)", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(K, C)]): (K, C)", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(K, C)]): Array[(K, C)]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(K, C)]): Array[(K, C)]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (K, C)", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(K, C)]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((K, C), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((K, C), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(K, C)]): PartialResult[Map[(K, C), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(K, C)]): Map[(K, C), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (K, C)) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (K, C)) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (K, C))(op: ((K, C), (K, C)) ⇒ (K, C)): (K, C)", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((K, C), (K, C)) ⇒ (K, C), depth: Int): (K, C)", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((K, C), (K, C)) ⇒ (K, C)): (K, C)", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, C)], p: Partitioner)(ord: Ordering[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, C)], numPartitions: Int): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(K, C), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(K, C)]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(K, C)]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(K, C)]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((K, C)) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(K, C)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(K, C)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(K, C)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(K, C)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(K, C)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(K, C)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((K, C), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(K, C)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(K, C)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((K, C), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, C)) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(K, C)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, C)) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(K, C)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, C)) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(K, C)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((K, C), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(K, C)]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, C)], numPartitions: Int): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, C)], partitioner: Partitioner)(ord: Ordering[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((K, C)) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(K, C)]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(K, C)]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(K, C)]): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: ((K, C)) ⇒ Boolean): RDD[(K, C)]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((K, C)) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((K, C)) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(K, C)]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): ShuffledRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): ShuffledRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): ShuffledRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): ShuffledRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): ShuffledRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/ShuffledRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/ShuffledRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.rdd.UnionRDD", "shortDescription" : "", "object" : "org\/apache\/spark\/rdd\/UnionRDD$.html", "members_class" : [{"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.UnionRDD.clearDependencies", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(s: Partition): Seq[String]", "member" : "org.apache.spark.rdd.UnionRDD.getPreferredLocations", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getPreferredLocations(s:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "compute", "tail" : "(s: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.UnionRDD.compute", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#compute(s:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.UnionRDD.getDependencies", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.UnionRDD.getPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"member" : "org.apache.spark.rdd.UnionRDD#<init>", "error" : "unsupported entity"}, {"label" : "rdds", "tail" : ": Seq[RDD[T]]", "member" : "org.apache.spark.rdd.UnionRDD.rdds", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#rdds:Seq[org.apache.spark.rdd.RDD[T]]", "kind" : "var"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[T]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): UnionRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[T]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): UnionRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (T) ⇒ K): RDD[(K, T)]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[T]): T", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[T]): Array[T]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): T", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[T]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(T, Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[T]): PartialResult[Map[T, BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[T]): Map[T, Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: T)(op: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (T, T) ⇒ T, depth: Int): T", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (T, T) ⇒ T): T", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], p: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[T, U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[T]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[T]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[T], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[T]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (T, (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (T) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[T])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(T, U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[T]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], numPartitions: Int): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T], partitioner: Partitioner)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (T) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[T]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[T]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[T]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[T]): RDD[T]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (T) ⇒ Boolean): RDD[T]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[T]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): UnionRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): UnionRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): UnionRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): UnionRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): UnionRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/UnionRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/rdd\/UnionRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/rdd\/UnionRDD.html", "kind" : "object"}], "org.apache.spark.status.api.v1" : [{"name" : "org.apache.spark.status.api.v1.AccumulableInfo", "shortDescription" : "", "members_class" : [{"label" : "value", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.AccumulableInfo.value", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#value:String", "kind" : "val"}, {"label" : "update", "tail" : ": Option[String]", "member" : "org.apache.spark.status.api.v1.AccumulableInfo.update", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#update:Option[String]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.AccumulableInfo.name", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#name:String", "kind" : "val"}, {"label" : "id", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.AccumulableInfo.id", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#id:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/AccumulableInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo", "shortDescription" : "", "members_case class" : [{"label" : "getLastUpdatedEpoch", "tail" : "(): Long", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.getLastUpdatedEpoch", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#getLastUpdatedEpoch:Long", "kind" : "def"}, {"label" : "getEndTimeEpoch", "tail" : "(): Long", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.getEndTimeEpoch", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#getEndTimeEpoch:Long", "kind" : "def"}, {"label" : "getStartTimeEpoch", "tail" : "(): Long", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.getStartTimeEpoch", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#getStartTimeEpoch:Long", "kind" : "def"}, {"label" : "appSparkVersion", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.appSparkVersion", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#appSparkVersion:String", "kind" : "val"}, {"label" : "completed", "tail" : ": Boolean", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.completed", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#completed:Boolean", "kind" : "val"}, {"label" : "sparkUser", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.sparkUser", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#sparkUser:String", "kind" : "val"}, {"label" : "duration", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.duration", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#duration:Long", "kind" : "val"}, {"label" : "lastUpdated", "tail" : ": Date", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.lastUpdated", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#lastUpdated:java.util.Date", "kind" : "val"}, {"label" : "endTime", "tail" : ": Date", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.endTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#endTime:java.util.Date", "kind" : "val"}, {"label" : "startTime", "tail" : ": Date", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.startTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#startTime:java.util.Date", "kind" : "val"}, {"label" : "attemptId", "tail" : ": Option[String]", "member" : "org.apache.spark.status.api.v1.ApplicationAttemptInfo.attemptId", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#attemptId:Option[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/status\/api\/v1\/ApplicationAttemptInfo.html", "kind" : "case class"}, {"name" : "org.apache.spark.status.api.v1.ApplicationEnvironmentInfo", "shortDescription" : "", "members_class" : [{"label" : "resourceProfiles", "tail" : ": Seq[ResourceProfileInfo]", "member" : "org.apache.spark.status.api.v1.ApplicationEnvironmentInfo.resourceProfiles", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#resourceProfiles:Seq[org.apache.spark.status.api.v1.ResourceProfileInfo]", "kind" : "val"}, {"label" : "classpathEntries", "tail" : ": Seq[(String, String)]", "member" : "org.apache.spark.status.api.v1.ApplicationEnvironmentInfo.classpathEntries", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#classpathEntries:Seq[(String,String)]", "kind" : "val"}, {"label" : "systemProperties", "tail" : ": Seq[(String, String)]", "member" : "org.apache.spark.status.api.v1.ApplicationEnvironmentInfo.systemProperties", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#systemProperties:Seq[(String,String)]", "kind" : "val"}, {"label" : "hadoopProperties", "tail" : ": Seq[(String, String)]", "member" : "org.apache.spark.status.api.v1.ApplicationEnvironmentInfo.hadoopProperties", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#hadoopProperties:Seq[(String,String)]", "kind" : "val"}, {"label" : "sparkProperties", "tail" : ": Seq[(String, String)]", "member" : "org.apache.spark.status.api.v1.ApplicationEnvironmentInfo.sparkProperties", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#sparkProperties:Seq[(String,String)]", "kind" : "val"}, {"label" : "runtime", "tail" : ": RuntimeInfo", "member" : "org.apache.spark.status.api.v1.ApplicationEnvironmentInfo.runtime", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#runtime:org.apache.spark.status.api.v1.RuntimeInfo", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ApplicationEnvironmentInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ApplicationInfo", "shortDescription" : "", "members_case class" : [{"label" : "attempts", "tail" : ": Seq[ApplicationAttemptInfo]", "member" : "org.apache.spark.status.api.v1.ApplicationInfo.attempts", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#attempts:Seq[org.apache.spark.status.api.v1.ApplicationAttemptInfo]", "kind" : "val"}, {"label" : "memoryPerExecutorMB", "tail" : ": Option[Int]", "member" : "org.apache.spark.status.api.v1.ApplicationInfo.memoryPerExecutorMB", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#memoryPerExecutorMB:Option[Int]", "kind" : "val"}, {"label" : "coresPerExecutor", "tail" : ": Option[Int]", "member" : "org.apache.spark.status.api.v1.ApplicationInfo.coresPerExecutor", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#coresPerExecutor:Option[Int]", "kind" : "val"}, {"label" : "maxCores", "tail" : ": Option[Int]", "member" : "org.apache.spark.status.api.v1.ApplicationInfo.maxCores", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#maxCores:Option[Int]", "kind" : "val"}, {"label" : "coresGranted", "tail" : ": Option[Int]", "member" : "org.apache.spark.status.api.v1.ApplicationInfo.coresGranted", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#coresGranted:Option[Int]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ApplicationInfo.name", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#name:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ApplicationInfo.id", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#id:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/status\/api\/v1\/ApplicationInfo.html", "kind" : "case class"}, {"name" : "org.apache.spark.status.api.v1.ApplicationStatus", "shortDescription" : "", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[ApplicationStatus]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: ApplicationStatus): Int", "member" : "java.lang.Enum.compareTo", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ApplicationStatus.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions", "shortDescription" : "", "members_class" : [{"label" : "peakMemoryMetrics", "tail" : ": ExecutorPeakMetricsDistributions", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.peakMemoryMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#peakMemoryMetrics:org.apache.spark.status.api.v1.ExecutorPeakMetricsDistributions", "kind" : "val"}, {"label" : "diskBytesSpilled", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.diskBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#diskBytesSpilled:IndexedSeq[Double]", "kind" : "val"}, {"label" : "memoryBytesSpilled", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.memoryBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#memoryBytesSpilled:IndexedSeq[Double]", "kind" : "val"}, {"label" : "shuffleWriteRecords", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.shuffleWriteRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#shuffleWriteRecords:IndexedSeq[Double]", "kind" : "val"}, {"label" : "shuffleWrite", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.shuffleWrite", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#shuffleWrite:IndexedSeq[Double]", "kind" : "val"}, {"label" : "shuffleReadRecords", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.shuffleReadRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#shuffleReadRecords:IndexedSeq[Double]", "kind" : "val"}, {"label" : "shuffleRead", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.shuffleRead", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#shuffleRead:IndexedSeq[Double]", "kind" : "val"}, {"label" : "outputRecords", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.outputRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#outputRecords:IndexedSeq[Double]", "kind" : "val"}, {"label" : "outputBytes", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.outputBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#outputBytes:IndexedSeq[Double]", "kind" : "val"}, {"label" : "inputRecords", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.inputRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#inputRecords:IndexedSeq[Double]", "kind" : "val"}, {"label" : "inputBytes", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.inputBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#inputBytes:IndexedSeq[Double]", "kind" : "val"}, {"label" : "killedTasks", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.killedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#killedTasks:IndexedSeq[Double]", "kind" : "val"}, {"label" : "succeededTasks", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.succeededTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#succeededTasks:IndexedSeq[Double]", "kind" : "val"}, {"label" : "failedTasks", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.failedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#failedTasks:IndexedSeq[Double]", "kind" : "val"}, {"label" : "taskTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.taskTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#taskTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "quantiles", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorMetricsDistributions.quantiles", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#quantiles:IndexedSeq[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ExecutorMetricsDistributions.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ExecutorPeakMetricsDistributions", "shortDescription" : "", "members_class" : [{"label" : "getMetricDistribution", "tail" : "(metricName: String): IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorPeakMetricsDistributions.getMetricDistribution", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#getMetricDistribution(metricName:String):IndexedSeq[Double]", "kind" : "def"}, {"label" : "executorMetrics", "tail" : ": IndexedSeq[ExecutorMetrics]", "member" : "org.apache.spark.status.api.v1.ExecutorPeakMetricsDistributions.executorMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#executorMetrics:IndexedSeq[org.apache.spark.executor.ExecutorMetrics]", "kind" : "val"}, {"label" : "quantiles", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ExecutorPeakMetricsDistributions.quantiles", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#quantiles:IndexedSeq[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ExecutorPeakMetricsDistributions.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ExecutorStageSummary", "shortDescription" : "", "members_class" : [{"label" : "isExcludedForStage", "tail" : ": Boolean", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.isExcludedForStage", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#isExcludedForStage:Boolean", "kind" : "val"}, {"label" : "peakMemoryMetrics", "tail" : ": Option[ExecutorMetrics]", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.peakMemoryMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#peakMemoryMetrics:Option[org.apache.spark.executor.ExecutorMetrics]", "kind" : "val"}, {"label" : "isBlacklistedForStage", "tail" : ": Boolean", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.isBlacklistedForStage", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#isBlacklistedForStage:Boolean", "kind" : "val"}, {"label" : "diskBytesSpilled", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.diskBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#diskBytesSpilled:Long", "kind" : "val"}, {"label" : "memoryBytesSpilled", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.memoryBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#memoryBytesSpilled:Long", "kind" : "val"}, {"label" : "shuffleWriteRecords", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.shuffleWriteRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#shuffleWriteRecords:Long", "kind" : "val"}, {"label" : "shuffleWrite", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.shuffleWrite", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#shuffleWrite:Long", "kind" : "val"}, {"label" : "shuffleReadRecords", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.shuffleReadRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#shuffleReadRecords:Long", "kind" : "val"}, {"label" : "shuffleRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.shuffleRead", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#shuffleRead:Long", "kind" : "val"}, {"label" : "outputRecords", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.outputRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#outputRecords:Long", "kind" : "val"}, {"label" : "outputBytes", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.outputBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#outputBytes:Long", "kind" : "val"}, {"label" : "inputRecords", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.inputRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#inputRecords:Long", "kind" : "val"}, {"label" : "inputBytes", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.inputBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#inputBytes:Long", "kind" : "val"}, {"label" : "killedTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.killedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#killedTasks:Int", "kind" : "val"}, {"label" : "succeededTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.succeededTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#succeededTasks:Int", "kind" : "val"}, {"label" : "failedTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.failedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#failedTasks:Int", "kind" : "val"}, {"label" : "taskTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorStageSummary.taskTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#taskTime:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ExecutorStageSummary.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ExecutorSummary", "shortDescription" : "", "members_class" : [{"label" : "excludedInStages", "tail" : ": Set[Int]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.excludedInStages", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#excludedInStages:Set[Int]", "kind" : "val"}, {"label" : "isExcluded", "tail" : ": Boolean", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.isExcluded", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#isExcluded:Boolean", "kind" : "val"}, {"label" : "resourceProfileId", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.resourceProfileId", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#resourceProfileId:Int", "kind" : "val"}, {"label" : "resources", "tail" : ": Map[String, ResourceInformation]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.resources", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#resources:Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "val"}, {"label" : "attributes", "tail" : ": Map[String, String]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.attributes", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#attributes:Map[String,String]", "kind" : "val"}, {"label" : "peakMemoryMetrics", "tail" : ": Option[ExecutorMetrics]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.peakMemoryMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#peakMemoryMetrics:Option[org.apache.spark.executor.ExecutorMetrics]", "kind" : "val"}, {"label" : "blacklistedInStages", "tail" : ": Set[Int]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.blacklistedInStages", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#blacklistedInStages:Set[Int]", "kind" : "val"}, {"label" : "memoryMetrics", "tail" : ": Option[MemoryMetrics]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.memoryMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#memoryMetrics:Option[org.apache.spark.status.api.v1.MemoryMetrics]", "kind" : "val"}, {"label" : "executorLogs", "tail" : ": Map[String, String]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.executorLogs", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#executorLogs:Map[String,String]", "kind" : "val"}, {"label" : "removeReason", "tail" : ": Option[String]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.removeReason", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#removeReason:Option[String]", "kind" : "val"}, {"label" : "removeTime", "tail" : ": Option[Date]", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.removeTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#removeTime:Option[java.util.Date]", "kind" : "val"}, {"label" : "addTime", "tail" : ": Date", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.addTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#addTime:java.util.Date", "kind" : "val"}, {"label" : "maxMemory", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.maxMemory", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#maxMemory:Long", "kind" : "val"}, {"label" : "isBlacklisted", "tail" : ": Boolean", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.isBlacklisted", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#isBlacklisted:Boolean", "kind" : "val"}, {"label" : "totalShuffleWrite", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.totalShuffleWrite", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#totalShuffleWrite:Long", "kind" : "val"}, {"label" : "totalShuffleRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.totalShuffleRead", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#totalShuffleRead:Long", "kind" : "val"}, {"label" : "totalInputBytes", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.totalInputBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#totalInputBytes:Long", "kind" : "val"}, {"label" : "totalGCTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.totalGCTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#totalGCTime:Long", "kind" : "val"}, {"label" : "totalDuration", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.totalDuration", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#totalDuration:Long", "kind" : "val"}, {"label" : "totalTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.totalTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#totalTasks:Int", "kind" : "val"}, {"label" : "completedTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.completedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#completedTasks:Int", "kind" : "val"}, {"label" : "failedTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.failedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#failedTasks:Int", "kind" : "val"}, {"label" : "activeTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.activeTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#activeTasks:Int", "kind" : "val"}, {"label" : "maxTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.maxTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#maxTasks:Int", "kind" : "val"}, {"label" : "totalCores", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.totalCores", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#totalCores:Int", "kind" : "val"}, {"label" : "diskUsed", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.diskUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#diskUsed:Long", "kind" : "val"}, {"label" : "memoryUsed", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.memoryUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#memoryUsed:Long", "kind" : "val"}, {"label" : "rddBlocks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.rddBlocks", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#rddBlocks:Int", "kind" : "val"}, {"label" : "isActive", "tail" : ": Boolean", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.isActive", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#isActive:Boolean", "kind" : "val"}, {"label" : "hostPort", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.hostPort", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#hostPort:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ExecutorSummary.id", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#id:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ExecutorSummary.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.InputMetricDistributions", "shortDescription" : "", "members_class" : [{"label" : "recordsRead", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.InputMetricDistributions.recordsRead", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#recordsRead:IndexedSeq[Double]", "kind" : "val"}, {"label" : "bytesRead", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.InputMetricDistributions.bytesRead", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#bytesRead:IndexedSeq[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/InputMetricDistributions.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.InputMetrics", "shortDescription" : "", "members_class" : [{"label" : "recordsRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.InputMetrics.recordsRead", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#recordsRead:Long", "kind" : "val"}, {"label" : "bytesRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.InputMetrics.bytesRead", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#bytesRead:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/InputMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.JobData", "shortDescription" : "", "members_class" : [{"label" : "killedTasksSummary", "tail" : ": Map[String, Int]", "member" : "org.apache.spark.status.api.v1.JobData.killedTasksSummary", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#killedTasksSummary:Map[String,Int]", "kind" : "val"}, {"label" : "numFailedStages", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numFailedStages", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numFailedStages:Int", "kind" : "val"}, {"label" : "numSkippedStages", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numSkippedStages", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numSkippedStages:Int", "kind" : "val"}, {"label" : "numCompletedStages", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numCompletedStages", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numCompletedStages:Int", "kind" : "val"}, {"label" : "numActiveStages", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numActiveStages", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numActiveStages:Int", "kind" : "val"}, {"label" : "numCompletedIndices", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numCompletedIndices", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numCompletedIndices:Int", "kind" : "val"}, {"label" : "numKilledTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numKilledTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numKilledTasks:Int", "kind" : "val"}, {"label" : "numFailedTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numFailedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numFailedTasks:Int", "kind" : "val"}, {"label" : "numSkippedTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numSkippedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numSkippedTasks:Int", "kind" : "val"}, {"label" : "numCompletedTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numCompletedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numCompletedTasks:Int", "kind" : "val"}, {"label" : "numActiveTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numActiveTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numActiveTasks:Int", "kind" : "val"}, {"label" : "numTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.numTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#numTasks:Int", "kind" : "val"}, {"label" : "status", "tail" : ": JobExecutionStatus", "member" : "org.apache.spark.status.api.v1.JobData.status", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#status:org.apache.spark.JobExecutionStatus", "kind" : "val"}, {"label" : "jobGroup", "tail" : ": Option[String]", "member" : "org.apache.spark.status.api.v1.JobData.jobGroup", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#jobGroup:Option[String]", "kind" : "val"}, {"label" : "stageIds", "tail" : ": Seq[Int]", "member" : "org.apache.spark.status.api.v1.JobData.stageIds", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#stageIds:Seq[Int]", "kind" : "val"}, {"label" : "completionTime", "tail" : ": Option[Date]", "member" : "org.apache.spark.status.api.v1.JobData.completionTime", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#completionTime:Option[java.util.Date]", "kind" : "val"}, {"label" : "submissionTime", "tail" : ": Option[Date]", "member" : "org.apache.spark.status.api.v1.JobData.submissionTime", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#submissionTime:Option[java.util.Date]", "kind" : "val"}, {"label" : "description", "tail" : ": Option[String]", "member" : "org.apache.spark.status.api.v1.JobData.description", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#description:Option[String]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.JobData.name", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#name:String", "kind" : "val"}, {"label" : "jobId", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.JobData.jobId", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#jobId:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/JobData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/JobData.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.MemoryMetrics", "shortDescription" : "", "members_class" : [{"label" : "totalOffHeapStorageMemory", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.MemoryMetrics.totalOffHeapStorageMemory", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#totalOffHeapStorageMemory:Long", "kind" : "val"}, {"label" : "totalOnHeapStorageMemory", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.MemoryMetrics.totalOnHeapStorageMemory", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#totalOnHeapStorageMemory:Long", "kind" : "val"}, {"label" : "usedOffHeapStorageMemory", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.MemoryMetrics.usedOffHeapStorageMemory", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#usedOffHeapStorageMemory:Long", "kind" : "val"}, {"label" : "usedOnHeapStorageMemory", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.MemoryMetrics.usedOnHeapStorageMemory", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#usedOnHeapStorageMemory:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/MemoryMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.OutputMetricDistributions", "shortDescription" : "", "members_class" : [{"label" : "recordsWritten", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.OutputMetricDistributions.recordsWritten", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#recordsWritten:IndexedSeq[Double]", "kind" : "val"}, {"label" : "bytesWritten", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.OutputMetricDistributions.bytesWritten", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#bytesWritten:IndexedSeq[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/OutputMetricDistributions.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.OutputMetrics", "shortDescription" : "", "members_class" : [{"label" : "recordsWritten", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.OutputMetrics.recordsWritten", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#recordsWritten:Long", "kind" : "val"}, {"label" : "bytesWritten", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.OutputMetrics.bytesWritten", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#bytesWritten:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/OutputMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ProcessSummary", "shortDescription" : "", "members_class" : [{"label" : "processLogs", "tail" : ": Map[String, String]", "member" : "org.apache.spark.status.api.v1.ProcessSummary.processLogs", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#processLogs:Map[String,String]", "kind" : "val"}, {"label" : "removeTime", "tail" : ": Option[Date]", "member" : "org.apache.spark.status.api.v1.ProcessSummary.removeTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#removeTime:Option[java.util.Date]", "kind" : "val"}, {"label" : "addTime", "tail" : ": Date", "member" : "org.apache.spark.status.api.v1.ProcessSummary.addTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#addTime:java.util.Date", "kind" : "val"}, {"label" : "totalCores", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ProcessSummary.totalCores", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#totalCores:Int", "kind" : "val"}, {"label" : "isActive", "tail" : ": Boolean", "member" : "org.apache.spark.status.api.v1.ProcessSummary.isActive", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#isActive:Boolean", "kind" : "val"}, {"label" : "hostPort", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ProcessSummary.hostPort", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#hostPort:String", "kind" : "val"}, {"label" : "id", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ProcessSummary.id", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#id:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ProcessSummary.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.RDDDataDistribution", "shortDescription" : "", "members_class" : [{"label" : "offHeapMemoryRemaining", "tail" : ": Option[Long]", "member" : "org.apache.spark.status.api.v1.RDDDataDistribution.offHeapMemoryRemaining", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#offHeapMemoryRemaining:Option[Long]", "kind" : "val"}, {"label" : "onHeapMemoryRemaining", "tail" : ": Option[Long]", "member" : "org.apache.spark.status.api.v1.RDDDataDistribution.onHeapMemoryRemaining", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#onHeapMemoryRemaining:Option[Long]", "kind" : "val"}, {"label" : "offHeapMemoryUsed", "tail" : ": Option[Long]", "member" : "org.apache.spark.status.api.v1.RDDDataDistribution.offHeapMemoryUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#offHeapMemoryUsed:Option[Long]", "kind" : "val"}, {"label" : "onHeapMemoryUsed", "tail" : ": Option[Long]", "member" : "org.apache.spark.status.api.v1.RDDDataDistribution.onHeapMemoryUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#onHeapMemoryUsed:Option[Long]", "kind" : "val"}, {"label" : "diskUsed", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.RDDDataDistribution.diskUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#diskUsed:Long", "kind" : "val"}, {"label" : "memoryRemaining", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.RDDDataDistribution.memoryRemaining", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#memoryRemaining:Long", "kind" : "val"}, {"label" : "memoryUsed", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.RDDDataDistribution.memoryUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#memoryUsed:Long", "kind" : "val"}, {"label" : "address", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.RDDDataDistribution.address", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#address:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/RDDDataDistribution.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.RDDPartitionInfo", "shortDescription" : "", "members_class" : [{"label" : "executors", "tail" : ": Seq[String]", "member" : "org.apache.spark.status.api.v1.RDDPartitionInfo.executors", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#executors:Seq[String]", "kind" : "val"}, {"label" : "diskUsed", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.RDDPartitionInfo.diskUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#diskUsed:Long", "kind" : "val"}, {"label" : "memoryUsed", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.RDDPartitionInfo.memoryUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#memoryUsed:Long", "kind" : "val"}, {"label" : "storageLevel", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.RDDPartitionInfo.storageLevel", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#storageLevel:String", "kind" : "val"}, {"label" : "blockName", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.RDDPartitionInfo.blockName", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#blockName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/RDDPartitionInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.RDDStorageInfo", "shortDescription" : "", "members_class" : [{"label" : "partitions", "tail" : ": Option[Seq[RDDPartitionInfo]]", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.partitions", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#partitions:Option[Seq[org.apache.spark.status.api.v1.RDDPartitionInfo]]", "kind" : "val"}, {"label" : "dataDistribution", "tail" : ": Option[Seq[RDDDataDistribution]]", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.dataDistribution", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#dataDistribution:Option[Seq[org.apache.spark.status.api.v1.RDDDataDistribution]]", "kind" : "val"}, {"label" : "diskUsed", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.diskUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#diskUsed:Long", "kind" : "val"}, {"label" : "memoryUsed", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.memoryUsed", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#memoryUsed:Long", "kind" : "val"}, {"label" : "storageLevel", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.storageLevel", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#storageLevel:String", "kind" : "val"}, {"label" : "numCachedPartitions", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.numCachedPartitions", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#numCachedPartitions:Int", "kind" : "val"}, {"label" : "numPartitions", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.numPartitions", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#numPartitions:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.name", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#name:String", "kind" : "val"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.RDDStorageInfo.id", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#id:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/RDDStorageInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ResourceProfileInfo", "shortDescription" : "", "members_class" : [{"label" : "taskResources", "tail" : ": Map[String, TaskResourceRequest]", "member" : "org.apache.spark.status.api.v1.ResourceProfileInfo.taskResources", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#taskResources:Map[String,org.apache.spark.resource.TaskResourceRequest]", "kind" : "val"}, {"label" : "executorResources", "tail" : ": Map[String, ExecutorResourceRequest]", "member" : "org.apache.spark.status.api.v1.ResourceProfileInfo.executorResources", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#executorResources:Map[String,org.apache.spark.resource.ExecutorResourceRequest]", "kind" : "val"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.ResourceProfileInfo.id", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#id:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ResourceProfileInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.RuntimeInfo", "shortDescription" : "", "members_class" : [{"label" : "scalaVersion", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.RuntimeInfo.scalaVersion", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#scalaVersion:String", "kind" : "val"}, {"label" : "javaHome", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.RuntimeInfo.javaHome", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#javaHome:String", "kind" : "val"}, {"label" : "javaVersion", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.RuntimeInfo.javaVersion", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#javaVersion:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/RuntimeInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions", "shortDescription" : "", "members_class" : [{"label" : "totalBlocksFetched", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions.totalBlocksFetched", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#totalBlocksFetched:IndexedSeq[Double]", "kind" : "val"}, {"label" : "remoteBytesReadToDisk", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions.remoteBytesReadToDisk", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#remoteBytesReadToDisk:IndexedSeq[Double]", "kind" : "val"}, {"label" : "remoteBytesRead", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions.remoteBytesRead", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#remoteBytesRead:IndexedSeq[Double]", "kind" : "val"}, {"label" : "fetchWaitTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions.fetchWaitTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#fetchWaitTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "localBlocksFetched", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions.localBlocksFetched", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#localBlocksFetched:IndexedSeq[Double]", "kind" : "val"}, {"label" : "remoteBlocksFetched", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions.remoteBlocksFetched", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#remoteBlocksFetched:IndexedSeq[Double]", "kind" : "val"}, {"label" : "readRecords", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions.readRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#readRecords:IndexedSeq[Double]", "kind" : "val"}, {"label" : "readBytes", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetricDistributions.readBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#readBytes:IndexedSeq[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetricDistributions.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ShuffleReadMetrics", "shortDescription" : "", "members_class" : [{"label" : "recordsRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetrics.recordsRead", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#recordsRead:Long", "kind" : "val"}, {"label" : "localBytesRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetrics.localBytesRead", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#localBytesRead:Long", "kind" : "val"}, {"label" : "remoteBytesReadToDisk", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetrics.remoteBytesReadToDisk", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#remoteBytesReadToDisk:Long", "kind" : "val"}, {"label" : "remoteBytesRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetrics.remoteBytesRead", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#remoteBytesRead:Long", "kind" : "val"}, {"label" : "fetchWaitTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetrics.fetchWaitTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#fetchWaitTime:Long", "kind" : "val"}, {"label" : "localBlocksFetched", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetrics.localBlocksFetched", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#localBlocksFetched:Long", "kind" : "val"}, {"label" : "remoteBlocksFetched", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleReadMetrics.remoteBlocksFetched", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#remoteBlocksFetched:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ShuffleReadMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ShuffleWriteMetricDistributions", "shortDescription" : "", "members_class" : [{"label" : "writeTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleWriteMetricDistributions.writeTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#writeTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "writeRecords", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleWriteMetricDistributions.writeRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#writeRecords:IndexedSeq[Double]", "kind" : "val"}, {"label" : "writeBytes", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.ShuffleWriteMetricDistributions.writeBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#writeBytes:IndexedSeq[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetricDistributions.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ShuffleWriteMetrics", "shortDescription" : "", "members_class" : [{"label" : "recordsWritten", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleWriteMetrics.recordsWritten", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#recordsWritten:Long", "kind" : "val"}, {"label" : "writeTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleWriteMetrics.writeTime", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#writeTime:Long", "kind" : "val"}, {"label" : "bytesWritten", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ShuffleWriteMetrics.bytesWritten", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#bytesWritten:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/ShuffleWriteMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.StackTrace", "shortDescription" : "", "members_case class" : [{"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "org.apache.spark.status.api.v1.StackTrace.mkString", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "html", "tail" : "(): NodeSeq", "member" : "org.apache.spark.status.api.v1.StackTrace.html", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#html:scala.xml.NodeSeq", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.status.api.v1.StackTrace.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#toString():String", "kind" : "def"}, {"member" : "org.apache.spark.status.api.v1.StackTrace#<init>", "error" : "unsupported entity"}, {"label" : "elems", "tail" : ": Seq[String]", "member" : "org.apache.spark.status.api.v1.StackTrace.elems", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#elems:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/status\/api\/v1\/StackTrace.html", "kind" : "case class"}, {"name" : "org.apache.spark.status.api.v1.StageData", "shortDescription" : "", "members_class" : [{"label" : "executorMetricsDistributions", "tail" : ": Option[ExecutorMetricsDistributions]", "member" : "org.apache.spark.status.api.v1.StageData.executorMetricsDistributions", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#executorMetricsDistributions:Option[org.apache.spark.status.api.v1.ExecutorMetricsDistributions]", "kind" : "val"}, {"label" : "taskMetricsDistributions", "tail" : ": Option[TaskMetricDistributions]", "member" : "org.apache.spark.status.api.v1.StageData.taskMetricsDistributions", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#taskMetricsDistributions:Option[org.apache.spark.status.api.v1.TaskMetricDistributions]", "kind" : "val"}, {"label" : "peakExecutorMetrics", "tail" : ": Option[ExecutorMetrics]", "member" : "org.apache.spark.status.api.v1.StageData.peakExecutorMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#peakExecutorMetrics:Option[org.apache.spark.executor.ExecutorMetrics]", "kind" : "val"}, {"label" : "resourceProfileId", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.resourceProfileId", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#resourceProfileId:Int", "kind" : "val"}, {"label" : "killedTasksSummary", "tail" : ": Map[String, Int]", "member" : "org.apache.spark.status.api.v1.StageData.killedTasksSummary", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#killedTasksSummary:Map[String,Int]", "kind" : "val"}, {"label" : "executorSummary", "tail" : ": Option[Map[String, ExecutorStageSummary]]", "member" : "org.apache.spark.status.api.v1.StageData.executorSummary", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#executorSummary:Option[Map[String,org.apache.spark.status.api.v1.ExecutorStageSummary]]", "kind" : "val"}, {"label" : "tasks", "tail" : ": Option[Map[Long, TaskData]]", "member" : "org.apache.spark.status.api.v1.StageData.tasks", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#tasks:Option[Map[Long,org.apache.spark.status.api.v1.TaskData]]", "kind" : "val"}, {"label" : "accumulatorUpdates", "tail" : ": Seq[AccumulableInfo]", "member" : "org.apache.spark.status.api.v1.StageData.accumulatorUpdates", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#accumulatorUpdates:Seq[org.apache.spark.status.api.v1.AccumulableInfo]", "kind" : "val"}, {"label" : "rddIds", "tail" : ": Seq[Int]", "member" : "org.apache.spark.status.api.v1.StageData.rddIds", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#rddIds:Seq[Int]", "kind" : "val"}, {"label" : "schedulingPool", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.StageData.schedulingPool", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#schedulingPool:String", "kind" : "val"}, {"label" : "details", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.StageData.details", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#details:String", "kind" : "val"}, {"label" : "description", "tail" : ": Option[String]", "member" : "org.apache.spark.status.api.v1.StageData.description", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#description:Option[String]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.StageData.name", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#name:String", "kind" : "val"}, {"label" : "shuffleWriteRecords", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleWriteRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleWriteRecords:Long", "kind" : "val"}, {"label" : "shuffleWriteTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleWriteTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleWriteTime:Long", "kind" : "val"}, {"label" : "shuffleWriteBytes", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleWriteBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleWriteBytes:Long", "kind" : "val"}, {"label" : "shuffleReadRecords", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleReadRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleReadRecords:Long", "kind" : "val"}, {"label" : "shuffleReadBytes", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleReadBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleReadBytes:Long", "kind" : "val"}, {"label" : "shuffleLocalBytesRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleLocalBytesRead", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleLocalBytesRead:Long", "kind" : "val"}, {"label" : "shuffleRemoteBytesReadToDisk", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleRemoteBytesReadToDisk", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleRemoteBytesReadToDisk:Long", "kind" : "val"}, {"label" : "shuffleRemoteBytesRead", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleRemoteBytesRead", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleRemoteBytesRead:Long", "kind" : "val"}, {"label" : "shuffleFetchWaitTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleFetchWaitTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleFetchWaitTime:Long", "kind" : "val"}, {"label" : "shuffleLocalBlocksFetched", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleLocalBlocksFetched", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleLocalBlocksFetched:Long", "kind" : "val"}, {"label" : "shuffleRemoteBlocksFetched", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.shuffleRemoteBlocksFetched", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#shuffleRemoteBlocksFetched:Long", "kind" : "val"}, {"label" : "outputRecords", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.outputRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#outputRecords:Long", "kind" : "val"}, {"label" : "outputBytes", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.outputBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#outputBytes:Long", "kind" : "val"}, {"label" : "inputRecords", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.inputRecords", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#inputRecords:Long", "kind" : "val"}, {"label" : "inputBytes", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.inputBytes", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#inputBytes:Long", "kind" : "val"}, {"label" : "peakExecutionMemory", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.peakExecutionMemory", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#peakExecutionMemory:Long", "kind" : "val"}, {"label" : "diskBytesSpilled", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.diskBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#diskBytesSpilled:Long", "kind" : "val"}, {"label" : "memoryBytesSpilled", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.memoryBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#memoryBytesSpilled:Long", "kind" : "val"}, {"label" : "resultSerializationTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.resultSerializationTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#resultSerializationTime:Long", "kind" : "val"}, {"label" : "jvmGcTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.jvmGcTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#jvmGcTime:Long", "kind" : "val"}, {"label" : "resultSize", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.resultSize", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#resultSize:Long", "kind" : "val"}, {"label" : "executorCpuTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.executorCpuTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#executorCpuTime:Long", "kind" : "val"}, {"label" : "executorRunTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.executorRunTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#executorRunTime:Long", "kind" : "val"}, {"label" : "executorDeserializeCpuTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.executorDeserializeCpuTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#executorDeserializeCpuTime:Long", "kind" : "val"}, {"label" : "executorDeserializeTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.StageData.executorDeserializeTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#executorDeserializeTime:Long", "kind" : "val"}, {"label" : "failureReason", "tail" : ": Option[String]", "member" : "org.apache.spark.status.api.v1.StageData.failureReason", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#failureReason:Option[String]", "kind" : "val"}, {"label" : "completionTime", "tail" : ": Option[Date]", "member" : "org.apache.spark.status.api.v1.StageData.completionTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#completionTime:Option[java.util.Date]", "kind" : "val"}, {"label" : "firstTaskLaunchedTime", "tail" : ": Option[Date]", "member" : "org.apache.spark.status.api.v1.StageData.firstTaskLaunchedTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#firstTaskLaunchedTime:Option[java.util.Date]", "kind" : "val"}, {"label" : "submissionTime", "tail" : ": Option[Date]", "member" : "org.apache.spark.status.api.v1.StageData.submissionTime", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#submissionTime:Option[java.util.Date]", "kind" : "val"}, {"label" : "numCompletedIndices", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.numCompletedIndices", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#numCompletedIndices:Int", "kind" : "val"}, {"label" : "numKilledTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.numKilledTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#numKilledTasks:Int", "kind" : "val"}, {"label" : "numFailedTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.numFailedTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#numFailedTasks:Int", "kind" : "val"}, {"label" : "numCompleteTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.numCompleteTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#numCompleteTasks:Int", "kind" : "val"}, {"label" : "numActiveTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.numActiveTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#numActiveTasks:Int", "kind" : "val"}, {"label" : "numTasks", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.numTasks", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#numTasks:Int", "kind" : "val"}, {"label" : "attemptId", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.attemptId", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#attemptId:Int", "kind" : "val"}, {"label" : "stageId", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.StageData.stageId", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#stageId:Int", "kind" : "val"}, {"label" : "status", "tail" : ": StageStatus", "member" : "org.apache.spark.status.api.v1.StageData.status", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#status:org.apache.spark.status.api.v1.StageStatus", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/StageData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/StageData.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.StageStatus", "shortDescription" : "", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[StageStatus]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: StageStatus): Int", "member" : "java.lang.Enum.compareTo", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/StageStatus.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.TaskData", "shortDescription" : "", "members_class" : [{"label" : "gettingResultTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskData.gettingResultTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#gettingResultTime:Long", "kind" : "val"}, {"label" : "schedulerDelay", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskData.schedulerDelay", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#schedulerDelay:Long", "kind" : "val"}, {"label" : "executorLogs", "tail" : ": Map[String, String]", "member" : "org.apache.spark.status.api.v1.TaskData.executorLogs", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#executorLogs:Map[String,String]", "kind" : "val"}, {"label" : "taskMetrics", "tail" : ": Option[TaskMetrics]", "member" : "org.apache.spark.status.api.v1.TaskData.taskMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#taskMetrics:Option[org.apache.spark.status.api.v1.TaskMetrics]", "kind" : "val"}, {"label" : "errorMessage", "tail" : ": Option[String]", "member" : "org.apache.spark.status.api.v1.TaskData.errorMessage", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#errorMessage:Option[String]", "kind" : "val"}, {"label" : "accumulatorUpdates", "tail" : ": Seq[AccumulableInfo]", "member" : "org.apache.spark.status.api.v1.TaskData.accumulatorUpdates", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#accumulatorUpdates:Seq[org.apache.spark.status.api.v1.AccumulableInfo]", "kind" : "val"}, {"label" : "speculative", "tail" : ": Boolean", "member" : "org.apache.spark.status.api.v1.TaskData.speculative", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#speculative:Boolean", "kind" : "val"}, {"label" : "taskLocality", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.TaskData.taskLocality", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#taskLocality:String", "kind" : "val"}, {"label" : "status", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.TaskData.status", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#status:String", "kind" : "val"}, {"label" : "host", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.TaskData.host", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#host:String", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.TaskData.executorId", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#executorId:String", "kind" : "val"}, {"label" : "duration", "tail" : ": Option[Long]", "member" : "org.apache.spark.status.api.v1.TaskData.duration", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#duration:Option[Long]", "kind" : "val"}, {"label" : "resultFetchStart", "tail" : ": Option[Date]", "member" : "org.apache.spark.status.api.v1.TaskData.resultFetchStart", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#resultFetchStart:Option[java.util.Date]", "kind" : "val"}, {"label" : "launchTime", "tail" : ": Date", "member" : "org.apache.spark.status.api.v1.TaskData.launchTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#launchTime:java.util.Date", "kind" : "val"}, {"label" : "attempt", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.TaskData.attempt", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#attempt:Int", "kind" : "val"}, {"label" : "index", "tail" : ": Int", "member" : "org.apache.spark.status.api.v1.TaskData.index", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#index:Int", "kind" : "val"}, {"label" : "taskId", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskData.taskId", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#taskId:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/TaskData.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.TaskMetricDistributions", "shortDescription" : "", "members_class" : [{"label" : "shuffleWriteMetrics", "tail" : ": ShuffleWriteMetricDistributions", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.shuffleWriteMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#shuffleWriteMetrics:org.apache.spark.status.api.v1.ShuffleWriteMetricDistributions", "kind" : "val"}, {"label" : "shuffleReadMetrics", "tail" : ": ShuffleReadMetricDistributions", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.shuffleReadMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#shuffleReadMetrics:org.apache.spark.status.api.v1.ShuffleReadMetricDistributions", "kind" : "val"}, {"label" : "outputMetrics", "tail" : ": OutputMetricDistributions", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.outputMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#outputMetrics:org.apache.spark.status.api.v1.OutputMetricDistributions", "kind" : "val"}, {"label" : "inputMetrics", "tail" : ": InputMetricDistributions", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.inputMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#inputMetrics:org.apache.spark.status.api.v1.InputMetricDistributions", "kind" : "val"}, {"label" : "diskBytesSpilled", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.diskBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#diskBytesSpilled:IndexedSeq[Double]", "kind" : "val"}, {"label" : "memoryBytesSpilled", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.memoryBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#memoryBytesSpilled:IndexedSeq[Double]", "kind" : "val"}, {"label" : "peakExecutionMemory", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.peakExecutionMemory", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#peakExecutionMemory:IndexedSeq[Double]", "kind" : "val"}, {"label" : "schedulerDelay", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.schedulerDelay", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#schedulerDelay:IndexedSeq[Double]", "kind" : "val"}, {"label" : "gettingResultTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.gettingResultTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#gettingResultTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "resultSerializationTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.resultSerializationTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#resultSerializationTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "jvmGcTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.jvmGcTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#jvmGcTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "resultSize", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.resultSize", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#resultSize:IndexedSeq[Double]", "kind" : "val"}, {"label" : "executorCpuTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.executorCpuTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#executorCpuTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "executorRunTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.executorRunTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#executorRunTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "executorDeserializeCpuTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.executorDeserializeCpuTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#executorDeserializeCpuTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "executorDeserializeTime", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.executorDeserializeTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#executorDeserializeTime:IndexedSeq[Double]", "kind" : "val"}, {"label" : "duration", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.duration", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#duration:IndexedSeq[Double]", "kind" : "val"}, {"label" : "quantiles", "tail" : ": IndexedSeq[Double]", "member" : "org.apache.spark.status.api.v1.TaskMetricDistributions.quantiles", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#quantiles:IndexedSeq[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/TaskMetricDistributions.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.TaskMetrics", "shortDescription" : "", "members_class" : [{"label" : "shuffleWriteMetrics", "tail" : ": ShuffleWriteMetrics", "member" : "org.apache.spark.status.api.v1.TaskMetrics.shuffleWriteMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#shuffleWriteMetrics:org.apache.spark.status.api.v1.ShuffleWriteMetrics", "kind" : "val"}, {"label" : "shuffleReadMetrics", "tail" : ": ShuffleReadMetrics", "member" : "org.apache.spark.status.api.v1.TaskMetrics.shuffleReadMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#shuffleReadMetrics:org.apache.spark.status.api.v1.ShuffleReadMetrics", "kind" : "val"}, {"label" : "outputMetrics", "tail" : ": OutputMetrics", "member" : "org.apache.spark.status.api.v1.TaskMetrics.outputMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#outputMetrics:org.apache.spark.status.api.v1.OutputMetrics", "kind" : "val"}, {"label" : "inputMetrics", "tail" : ": InputMetrics", "member" : "org.apache.spark.status.api.v1.TaskMetrics.inputMetrics", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#inputMetrics:org.apache.spark.status.api.v1.InputMetrics", "kind" : "val"}, {"label" : "peakExecutionMemory", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.peakExecutionMemory", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#peakExecutionMemory:Long", "kind" : "val"}, {"label" : "diskBytesSpilled", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.diskBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#diskBytesSpilled:Long", "kind" : "val"}, {"label" : "memoryBytesSpilled", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.memoryBytesSpilled", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#memoryBytesSpilled:Long", "kind" : "val"}, {"label" : "resultSerializationTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.resultSerializationTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#resultSerializationTime:Long", "kind" : "val"}, {"label" : "jvmGcTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.jvmGcTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#jvmGcTime:Long", "kind" : "val"}, {"label" : "resultSize", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.resultSize", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#resultSize:Long", "kind" : "val"}, {"label" : "executorCpuTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.executorCpuTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#executorCpuTime:Long", "kind" : "val"}, {"label" : "executorRunTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.executorRunTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#executorRunTime:Long", "kind" : "val"}, {"label" : "executorDeserializeCpuTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.executorDeserializeCpuTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#executorDeserializeCpuTime:Long", "kind" : "val"}, {"label" : "executorDeserializeTime", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.TaskMetrics.executorDeserializeTime", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#executorDeserializeTime:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/TaskMetrics.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.TaskSorting", "shortDescription" : "", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[TaskSorting]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: TaskSorting): Int", "member" : "java.lang.Enum.compareTo", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/TaskSorting.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.TaskStatus", "shortDescription" : "", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[TaskStatus]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: TaskStatus): Int", "member" : "java.lang.Enum.compareTo", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/TaskStatus.html", "kind" : "class"}, {"name" : "org.apache.spark.status.api.v1.ThreadStackTrace", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.status.api.v1.ThreadStackTrace#<init>", "error" : "unsupported entity"}, {"label" : "holdingLocks", "tail" : ": Seq[String]", "member" : "org.apache.spark.status.api.v1.ThreadStackTrace.holdingLocks", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#holdingLocks:Seq[String]", "kind" : "val"}, {"label" : "blockedByLock", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ThreadStackTrace.blockedByLock", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#blockedByLock:String", "kind" : "val"}, {"label" : "blockedByThreadId", "tail" : ": Option[Long]", "member" : "org.apache.spark.status.api.v1.ThreadStackTrace.blockedByThreadId", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#blockedByThreadId:Option[Long]", "kind" : "val"}, {"label" : "stackTrace", "tail" : ": StackTrace", "member" : "org.apache.spark.status.api.v1.ThreadStackTrace.stackTrace", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#stackTrace:org.apache.spark.status.api.v1.StackTrace", "kind" : "val"}, {"label" : "threadState", "tail" : ": State", "member" : "org.apache.spark.status.api.v1.ThreadStackTrace.threadState", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#threadState:Thread.State", "kind" : "val"}, {"label" : "threadName", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.ThreadStackTrace.threadName", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#threadName:String", "kind" : "val"}, {"label" : "threadId", "tail" : ": Long", "member" : "org.apache.spark.status.api.v1.ThreadStackTrace.threadId", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#threadId:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/status\/api\/v1\/ThreadStackTrace.html", "kind" : "case class"}, {"name" : "org.apache.spark.status.api.v1.VersionInfo", "shortDescription" : "", "members_class" : [{"label" : "spark", "tail" : ": String", "member" : "org.apache.spark.status.api.v1.VersionInfo.spark", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#spark:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/status\/api\/v1\/VersionInfo.html", "kind" : "class"}], "org.apache.spark.internal.io" : [{"name" : "org.apache.spark.internal.io.FileCommitProtocol", "shortDescription" : "An interface to define how a single Spark job commits its outputs.", "object" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html", "members_class" : [{"label" : "onTaskCommit", "tail" : "(taskCommit: TaskCommitMessage): Unit", "member" : "org.apache.spark.internal.io.FileCommitProtocol.onTaskCommit", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#onTaskCommit(taskCommit:org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage):Unit", "kind" : "def"}, {"label" : "deleteWithJob", "tail" : "(fs: FileSystem, path: Path, recursive: Boolean): Boolean", "member" : "org.apache.spark.internal.io.FileCommitProtocol.deleteWithJob", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#deleteWithJob(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,recursive:Boolean):Boolean", "kind" : "def"}, {"label" : "newTaskTempFileAbsPath", "tail" : "(taskContext: TaskAttemptContext, absoluteDir: String, spec: FileNameSpec): String", "member" : "org.apache.spark.internal.io.FileCommitProtocol.newTaskTempFileAbsPath", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#newTaskTempFileAbsPath(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,absoluteDir:String,spec:org.apache.spark.internal.io.FileNameSpec):String", "kind" : "def"}, {"label" : "newTaskTempFile", "tail" : "(taskContext: TaskAttemptContext, dir: Option[String], spec: FileNameSpec): String", "member" : "org.apache.spark.internal.io.FileCommitProtocol.newTaskTempFile", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#newTaskTempFile(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,dir:Option[String],spec:org.apache.spark.internal.io.FileNameSpec):String", "kind" : "def"}, {"member" : "org.apache.spark.internal.io.FileCommitProtocol#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "abortTask", "tail" : "(taskContext: TaskAttemptContext): Unit", "member" : "org.apache.spark.internal.io.FileCommitProtocol.abortTask", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#abortTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):Unit", "kind" : "abstract def"}, {"label" : "commitTask", "tail" : "(taskContext: TaskAttemptContext): TaskCommitMessage", "member" : "org.apache.spark.internal.io.FileCommitProtocol.commitTask", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#commitTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage", "kind" : "abstract def"}, {"label" : "newTaskTempFileAbsPath", "tail" : "(taskContext: TaskAttemptContext, absoluteDir: String, ext: String): String", "member" : "org.apache.spark.internal.io.FileCommitProtocol.newTaskTempFileAbsPath", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#newTaskTempFileAbsPath(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,absoluteDir:String,ext:String):String", "kind" : "abstract def"}, {"label" : "newTaskTempFile", "tail" : "(taskContext: TaskAttemptContext, dir: Option[String], ext: String): String", "member" : "org.apache.spark.internal.io.FileCommitProtocol.newTaskTempFile", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#newTaskTempFile(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,dir:Option[String],ext:String):String", "kind" : "abstract def"}, {"label" : "setupTask", "tail" : "(taskContext: TaskAttemptContext): Unit", "member" : "org.apache.spark.internal.io.FileCommitProtocol.setupTask", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#setupTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):Unit", "kind" : "abstract def"}, {"label" : "abortJob", "tail" : "(jobContext: JobContext): Unit", "member" : "org.apache.spark.internal.io.FileCommitProtocol.abortJob", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#abortJob(jobContext:org.apache.hadoop.mapreduce.JobContext):Unit", "kind" : "abstract def"}, {"label" : "commitJob", "tail" : "(jobContext: JobContext, taskCommits: Seq[TaskCommitMessage]): Unit", "member" : "org.apache.spark.internal.io.FileCommitProtocol.commitJob", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#commitJob(jobContext:org.apache.hadoop.mapreduce.JobContext,taskCommits:Seq[org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage]):Unit", "kind" : "abstract def"}, {"label" : "setupJob", "tail" : "(jobContext: JobContext): Unit", "member" : "org.apache.spark.internal.io.FileCommitProtocol.setupJob", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html#setupJob(jobContext:org.apache.hadoop.mapreduce.JobContext):Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "getStagingDir", "tail" : "(path: String, jobId: String): Path", "member" : "org.apache.spark.internal.io.FileCommitProtocol.getStagingDir", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#getStagingDir(path:String,jobId:String):org.apache.hadoop.fs.Path", "kind" : "def"}, {"label" : "instantiate", "tail" : "(className: String, jobId: String, outputPath: String, dynamicPartitionOverwrite: Boolean): FileCommitProtocol", "member" : "org.apache.spark.internal.io.FileCommitProtocol.instantiate", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#instantiate(className:String,jobId:String,outputPath:String,dynamicPartitionOverwrite:Boolean):org.apache.spark.internal.io.FileCommitProtocol", "kind" : "def"}, {"label" : "EmptyTaskCommitMessage", "tail" : "", "member" : "org.apache.spark.internal.io.FileCommitProtocol.EmptyTaskCommitMessage", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#EmptyTaskCommitMessage", "kind" : "object"}, {"label" : "TaskCommitMessage", "tail" : "", "member" : "org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#TaskCommitMessageextendsSerializable", "kind" : "class"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/internal\/io\/FileCommitProtocol.html", "kind" : "class"}, {"name" : "org.apache.spark.internal.io.FileNameSpec", "shortDescription" : "The specification for Spark output file name.", "members_case class" : [{"member" : "org.apache.spark.internal.io.FileNameSpec#<init>", "error" : "unsupported entity"}, {"label" : "suffix", "tail" : ": String", "member" : "org.apache.spark.internal.io.FileNameSpec.suffix", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#suffix:String", "kind" : "val"}, {"label" : "prefix", "tail" : ": String", "member" : "org.apache.spark.internal.io.FileNameSpec.prefix", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#prefix:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/internal\/io\/FileNameSpec.html", "kind" : "case class"}, {"name" : "org.apache.spark.internal.io.HadoopMapRedCommitProtocol", "shortDescription" : "An FileCommitProtocol implementation backed by an underlying Hadoop OutputCommitter(from the old mapred API).", "members_class" : [{"label" : "setupCommitter", "tail" : "(context: TaskAttemptContext): OutputCommitter", "member" : "org.apache.spark.internal.io.HadoopMapRedCommitProtocol.setupCommitter", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#setupCommitter(context:org.apache.hadoop.mapreduce.TaskAttemptContext):org.apache.hadoop.mapred.OutputCommitter", "kind" : "def"}, {"member" : "org.apache.spark.internal.io.HadoopMapRedCommitProtocol#<init>", "error" : "unsupported entity"}, {"label" : "abortTask", "tail" : "(taskContext: TaskAttemptContext): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.abortTask", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#abortTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):Unit", "kind" : "def"}, {"label" : "commitTask", "tail" : "(taskContext: TaskAttemptContext): TaskCommitMessage", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.commitTask", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#commitTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage", "kind" : "def"}, {"label" : "setupTask", "tail" : "(taskContext: TaskAttemptContext): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.setupTask", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#setupTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):Unit", "kind" : "def"}, {"label" : "abortJob", "tail" : "(jobContext: JobContext): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.abortJob", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#abortJob(jobContext:org.apache.hadoop.mapreduce.JobContext):Unit", "kind" : "def"}, {"label" : "commitJob", "tail" : "(jobContext: JobContext, taskCommits: Seq[TaskCommitMessage]): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.commitJob", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#commitJob(jobContext:org.apache.hadoop.mapreduce.JobContext,taskCommits:Seq[org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage]):Unit", "kind" : "def"}, {"label" : "setupJob", "tail" : "(jobContext: JobContext): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.setupJob", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#setupJob(jobContext:org.apache.hadoop.mapreduce.JobContext):Unit", "kind" : "def"}, {"label" : "getFilename", "tail" : "(taskContext: TaskAttemptContext, ext: String): String", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.getFilename", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#getFilename(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,ext:String):String", "kind" : "def"}, {"label" : "newTaskTempFileAbsPath", "tail" : "(taskContext: TaskAttemptContext, absoluteDir: String, ext: String): String", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.newTaskTempFileAbsPath", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#newTaskTempFileAbsPath(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,absoluteDir:String,ext:String):String", "kind" : "def"}, {"label" : "newTaskTempFile", "tail" : "(taskContext: TaskAttemptContext, dir: Option[String], ext: String): String", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.newTaskTempFile", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#newTaskTempFile(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,dir:Option[String],ext:String):String", "kind" : "def"}, {"label" : "stagingDir", "tail" : "(): Path", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.stagingDir", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#stagingDir:org.apache.hadoop.fs.Path", "kind" : "def"}, {"label" : "onTaskCommit", "tail" : "(taskCommit: TaskCommitMessage): Unit", "member" : "org.apache.spark.internal.io.FileCommitProtocol.onTaskCommit", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#onTaskCommit(taskCommit:org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage):Unit", "kind" : "def"}, {"label" : "deleteWithJob", "tail" : "(fs: FileSystem, path: Path, recursive: Boolean): Boolean", "member" : "org.apache.spark.internal.io.FileCommitProtocol.deleteWithJob", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#deleteWithJob(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,recursive:Boolean):Boolean", "kind" : "def"}, {"label" : "newTaskTempFileAbsPath", "tail" : "(taskContext: TaskAttemptContext, absoluteDir: String, spec: FileNameSpec): String", "member" : "org.apache.spark.internal.io.FileCommitProtocol.newTaskTempFileAbsPath", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#newTaskTempFileAbsPath(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,absoluteDir:String,spec:org.apache.spark.internal.io.FileNameSpec):String", "kind" : "def"}, {"label" : "newTaskTempFile", "tail" : "(taskContext: TaskAttemptContext, dir: Option[String], spec: FileNameSpec): String", "member" : "org.apache.spark.internal.io.FileCommitProtocol.newTaskTempFile", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#newTaskTempFile(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,dir:Option[String],spec:org.apache.spark.internal.io.FileNameSpec):String", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/internal\/io\/HadoopMapRedCommitProtocol.html", "kind" : "class"}, {"name" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol", "shortDescription" : "An FileCommitProtocol implementation backed by an underlying Hadoop OutputCommitter(from the newer mapreduce API, not the old mapred API).", "members_class" : [{"label" : "abortTask", "tail" : "(taskContext: TaskAttemptContext): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.abortTask", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#abortTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):Unit", "kind" : "def"}, {"label" : "commitTask", "tail" : "(taskContext: TaskAttemptContext): TaskCommitMessage", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.commitTask", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#commitTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage", "kind" : "def"}, {"label" : "setupTask", "tail" : "(taskContext: TaskAttemptContext): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.setupTask", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#setupTask(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):Unit", "kind" : "def"}, {"label" : "abortJob", "tail" : "(jobContext: JobContext): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.abortJob", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#abortJob(jobContext:org.apache.hadoop.mapreduce.JobContext):Unit", "kind" : "def"}, {"label" : "commitJob", "tail" : "(jobContext: JobContext, taskCommits: Seq[TaskCommitMessage]): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.commitJob", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#commitJob(jobContext:org.apache.hadoop.mapreduce.JobContext,taskCommits:Seq[org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage]):Unit", "kind" : "def"}, {"label" : "setupJob", "tail" : "(jobContext: JobContext): Unit", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.setupJob", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#setupJob(jobContext:org.apache.hadoop.mapreduce.JobContext):Unit", "kind" : "def"}, {"label" : "getFilename", "tail" : "(taskContext: TaskAttemptContext, ext: String): String", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.getFilename", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#getFilename(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,ext:String):String", "kind" : "def"}, {"label" : "newTaskTempFileAbsPath", "tail" : "(taskContext: TaskAttemptContext, absoluteDir: String, ext: String): String", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.newTaskTempFileAbsPath", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#newTaskTempFileAbsPath(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,absoluteDir:String,ext:String):String", "kind" : "def"}, {"label" : "newTaskTempFile", "tail" : "(taskContext: TaskAttemptContext, dir: Option[String], ext: String): String", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.newTaskTempFile", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#newTaskTempFile(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,dir:Option[String],ext:String):String", "kind" : "def"}, {"label" : "setupCommitter", "tail" : "(context: TaskAttemptContext): OutputCommitter", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.setupCommitter", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#setupCommitter(context:org.apache.hadoop.mapreduce.TaskAttemptContext):org.apache.hadoop.mapreduce.OutputCommitter", "kind" : "def"}, {"label" : "stagingDir", "tail" : "(): Path", "member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol.stagingDir", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#stagingDir:org.apache.hadoop.fs.Path", "kind" : "def"}, {"member" : "org.apache.spark.internal.io.HadoopMapReduceCommitProtocol#<init>", "error" : "unsupported entity"}, {"label" : "onTaskCommit", "tail" : "(taskCommit: TaskCommitMessage): Unit", "member" : "org.apache.spark.internal.io.FileCommitProtocol.onTaskCommit", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#onTaskCommit(taskCommit:org.apache.spark.internal.io.FileCommitProtocol.TaskCommitMessage):Unit", "kind" : "def"}, {"label" : "deleteWithJob", "tail" : "(fs: FileSystem, path: Path, recursive: Boolean): Boolean", "member" : "org.apache.spark.internal.io.FileCommitProtocol.deleteWithJob", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#deleteWithJob(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,recursive:Boolean):Boolean", "kind" : "def"}, {"label" : "newTaskTempFileAbsPath", "tail" : "(taskContext: TaskAttemptContext, absoluteDir: String, spec: FileNameSpec): String", "member" : "org.apache.spark.internal.io.FileCommitProtocol.newTaskTempFileAbsPath", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#newTaskTempFileAbsPath(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,absoluteDir:String,spec:org.apache.spark.internal.io.FileNameSpec):String", "kind" : "def"}, {"label" : "newTaskTempFile", "tail" : "(taskContext: TaskAttemptContext, dir: Option[String], spec: FileNameSpec): String", "member" : "org.apache.spark.internal.io.FileCommitProtocol.newTaskTempFile", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#newTaskTempFile(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,dir:Option[String],spec:org.apache.spark.internal.io.FileNameSpec):String", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/internal\/io\/HadoopMapReduceCommitProtocol.html", "kind" : "class"}, {"name" : "org.apache.spark.internal.io.HadoopWriteConfigUtil", "shortDescription" : "Interface for create output format\/committer\/writer used during saving an RDD using a HadoopOutputFormat (both from the old mapred API and the new mapreduce API)", "members_class" : [{"member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "assertConf", "tail" : "(jobContext: JobContext, conf: SparkConf): Unit", "member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil.assertConf", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#assertConf(jobContext:org.apache.hadoop.mapreduce.JobContext,conf:org.apache.spark.SparkConf):Unit", "kind" : "abstract def"}, {"label" : "initOutputFormat", "tail" : "(jobContext: JobContext): Unit", "member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil.initOutputFormat", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#initOutputFormat(jobContext:org.apache.hadoop.mapreduce.JobContext):Unit", "kind" : "abstract def"}, {"label" : "closeWriter", "tail" : "(taskContext: TaskAttemptContext): Unit", "member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil.closeWriter", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#closeWriter(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext):Unit", "kind" : "abstract def"}, {"label" : "write", "tail" : "(pair: (K, V)): Unit", "member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil.write", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#write(pair:(K,V)):Unit", "kind" : "abstract def"}, {"label" : "initWriter", "tail" : "(taskContext: TaskAttemptContext, splitId: Int): Unit", "member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil.initWriter", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#initWriter(taskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,splitId:Int):Unit", "kind" : "abstract def"}, {"label" : "createCommitter", "tail" : "(jobId: Int): HadoopMapReduceCommitProtocol", "member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil.createCommitter", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#createCommitter(jobId:Int):org.apache.spark.internal.io.HadoopMapReduceCommitProtocol", "kind" : "abstract def"}, {"label" : "createTaskAttemptContext", "tail" : "(jobTrackerId: String, jobId: Int, splitId: Int, taskAttemptId: Int): TaskAttemptContext", "member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil.createTaskAttemptContext", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#createTaskAttemptContext(jobTrackerId:String,jobId:Int,splitId:Int,taskAttemptId:Int):org.apache.hadoop.mapreduce.TaskAttemptContext", "kind" : "abstract def"}, {"label" : "createJobContext", "tail" : "(jobTrackerId: String, jobId: Int): JobContext", "member" : "org.apache.spark.internal.io.HadoopWriteConfigUtil.createJobContext", "link" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html#createJobContext(jobTrackerId:String,jobId:Int):org.apache.hadoop.mapreduce.JobContext", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/internal\/io\/HadoopWriteConfigUtil.html", "kind" : "class"}], "org.apache.hadoop" : [], "org.apache.spark" : [{"name" : "org.apache.spark.Aggregator", "shortDescription" : ":: DeveloperApi ::A set of functions used to aggregate data.", "members_case class" : [{"label" : "combineCombinersByKey", "tail" : "(iter: Iterator[_ <: Product2[K, C]], context: TaskContext): Iterator[(K, C)]", "member" : "org.apache.spark.Aggregator.combineCombinersByKey", "link" : "org\/apache\/spark\/Aggregator.html#combineCombinersByKey(iter:Iterator[_<:Product2[K,C]],context:org.apache.spark.TaskContext):Iterator[(K,C)]", "kind" : "def"}, {"label" : "combineValuesByKey", "tail" : "(iter: Iterator[_ <: Product2[K, V]], context: TaskContext): Iterator[(K, C)]", "member" : "org.apache.spark.Aggregator.combineValuesByKey", "link" : "org\/apache\/spark\/Aggregator.html#combineValuesByKey(iter:Iterator[_<:Product2[K,V]],context:org.apache.spark.TaskContext):Iterator[(K,C)]", "kind" : "def"}, {"member" : "org.apache.spark.Aggregator#<init>", "error" : "unsupported entity"}, {"label" : "mergeCombiners", "tail" : ": (C, C) ⇒ C", "member" : "org.apache.spark.Aggregator.mergeCombiners", "link" : "org\/apache\/spark\/Aggregator.html#mergeCombiners:(C,C)=>C", "kind" : "val"}, {"label" : "mergeValue", "tail" : ": (C, V) ⇒ C", "member" : "org.apache.spark.Aggregator.mergeValue", "link" : "org\/apache\/spark\/Aggregator.html#mergeValue:(C,V)=>C", "kind" : "val"}, {"label" : "createCombiner", "tail" : ": (V) ⇒ C", "member" : "org.apache.spark.Aggregator.createCombiner", "link" : "org\/apache\/spark\/Aggregator.html#createCombiner:V=>C", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/Aggregator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/Aggregator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/Aggregator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/Aggregator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/Aggregator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/Aggregator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/Aggregator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Aggregator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Aggregator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Aggregator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/Aggregator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/Aggregator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/Aggregator.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/Aggregator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/Aggregator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/Aggregator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/Aggregator.html", "kind" : "case class"}, {"name" : "org.apache.spark.BarrierTaskContext", "shortDescription" : ":: Experimental ::A TaskContext with extra contextual info and tooling for tasks in a barrier stage.", "object" : "org\/apache\/spark\/BarrierTaskContext$.html", "members_class" : [{"label" : "resourcesJMap", "tail" : "(): Map[String, ResourceInformation]", "member" : "org.apache.spark.BarrierTaskContext.resourcesJMap", "link" : "org\/apache\/spark\/BarrierTaskContext.html#resourcesJMap():java.util.Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "def"}, {"label" : "resources", "tail" : "(): Map[String, ResourceInformation]", "member" : "org.apache.spark.BarrierTaskContext.resources", "link" : "org\/apache\/spark\/BarrierTaskContext.html#resources():Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "def"}, {"label" : "getMetricsSources", "tail" : "(sourceName: String): Seq[Source]", "member" : "org.apache.spark.BarrierTaskContext.getMetricsSources", "link" : "org\/apache\/spark\/BarrierTaskContext.html#getMetricsSources(sourceName:String):Seq[org.apache.spark.metrics.source.Source]", "kind" : "def"}, {"label" : "taskMetrics", "tail" : "(): TaskMetrics", "member" : "org.apache.spark.BarrierTaskContext.taskMetrics", "link" : "org\/apache\/spark\/BarrierTaskContext.html#taskMetrics():org.apache.spark.executor.TaskMetrics", "kind" : "def"}, {"label" : "getLocalProperty", "tail" : "(key: String): String", "member" : "org.apache.spark.BarrierTaskContext.getLocalProperty", "link" : "org\/apache\/spark\/BarrierTaskContext.html#getLocalProperty(key:String):String", "kind" : "def"}, {"label" : "taskAttemptId", "tail" : "(): Long", "member" : "org.apache.spark.BarrierTaskContext.taskAttemptId", "link" : "org\/apache\/spark\/BarrierTaskContext.html#taskAttemptId():Long", "kind" : "def"}, {"label" : "attemptNumber", "tail" : "(): Int", "member" : "org.apache.spark.BarrierTaskContext.attemptNumber", "link" : "org\/apache\/spark\/BarrierTaskContext.html#attemptNumber():Int", "kind" : "def"}, {"label" : "partitionId", "tail" : "(): Int", "member" : "org.apache.spark.BarrierTaskContext.partitionId", "link" : "org\/apache\/spark\/BarrierTaskContext.html#partitionId():Int", "kind" : "def"}, {"label" : "stageAttemptNumber", "tail" : "(): Int", "member" : "org.apache.spark.BarrierTaskContext.stageAttemptNumber", "link" : "org\/apache\/spark\/BarrierTaskContext.html#stageAttemptNumber():Int", "kind" : "def"}, {"label" : "stageId", "tail" : "(): Int", "member" : "org.apache.spark.BarrierTaskContext.stageId", "link" : "org\/apache\/spark\/BarrierTaskContext.html#stageId():Int", "kind" : "def"}, {"label" : "addTaskFailureListener", "tail" : "(listener: TaskFailureListener): BarrierTaskContext.this.type", "member" : "org.apache.spark.BarrierTaskContext.addTaskFailureListener", "link" : "org\/apache\/spark\/BarrierTaskContext.html#addTaskFailureListener(listener:org.apache.spark.util.TaskFailureListener):BarrierTaskContext.this.type", "kind" : "def"}, {"label" : "addTaskCompletionListener", "tail" : "(listener: TaskCompletionListener): BarrierTaskContext.this.type", "member" : "org.apache.spark.BarrierTaskContext.addTaskCompletionListener", "link" : "org\/apache\/spark\/BarrierTaskContext.html#addTaskCompletionListener(listener:org.apache.spark.util.TaskCompletionListener):BarrierTaskContext.this.type", "kind" : "def"}, {"label" : "isInterrupted", "tail" : "(): Boolean", "member" : "org.apache.spark.BarrierTaskContext.isInterrupted", "link" : "org\/apache\/spark\/BarrierTaskContext.html#isInterrupted():Boolean", "kind" : "def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "org.apache.spark.BarrierTaskContext.isCompleted", "link" : "org\/apache\/spark\/BarrierTaskContext.html#isCompleted():Boolean", "kind" : "def"}, {"label" : "getTaskInfos", "tail" : "(): Array[BarrierTaskInfo]", "member" : "org.apache.spark.BarrierTaskContext.getTaskInfos", "link" : "org\/apache\/spark\/BarrierTaskContext.html#getTaskInfos():Array[org.apache.spark.BarrierTaskInfo]", "kind" : "def"}, {"label" : "allGather", "tail" : "(message: String): Array[String]", "member" : "org.apache.spark.BarrierTaskContext.allGather", "link" : "org\/apache\/spark\/BarrierTaskContext.html#allGather(message:String):Array[String]", "kind" : "def"}, {"label" : "barrier", "tail" : "(): Unit", "member" : "org.apache.spark.BarrierTaskContext.barrier", "link" : "org\/apache\/spark\/BarrierTaskContext.html#barrier():Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/BarrierTaskContext.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/BarrierTaskContext.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/BarrierTaskContext.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/BarrierTaskContext.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/BarrierTaskContext.html#logName:String", "kind" : "def"}, {"label" : "addTaskFailureListener", "tail" : "(f: (TaskContext, Throwable) ⇒ Unit): TaskContext", "member" : "org.apache.spark.TaskContext.addTaskFailureListener", "link" : "org\/apache\/spark\/BarrierTaskContext.html#addTaskFailureListener(f:(org.apache.spark.TaskContext,Throwable)=>Unit):org.apache.spark.TaskContext", "kind" : "def"}, {"label" : "addTaskCompletionListener", "tail" : "(f: (TaskContext) ⇒ U): TaskContext", "member" : "org.apache.spark.TaskContext.addTaskCompletionListener", "link" : "org\/apache\/spark\/BarrierTaskContext.html#addTaskCompletionListener[U](f:org.apache.spark.TaskContext=>U):org.apache.spark.TaskContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/BarrierTaskContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/BarrierTaskContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/BarrierTaskContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/BarrierTaskContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/BarrierTaskContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/BarrierTaskContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/BarrierTaskContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/BarrierTaskContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/BarrierTaskContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/BarrierTaskContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/BarrierTaskContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/BarrierTaskContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/BarrierTaskContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/BarrierTaskContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/BarrierTaskContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/BarrierTaskContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "get", "tail" : "(): BarrierTaskContext", "member" : "org.apache.spark.BarrierTaskContext.get", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#get():org.apache.spark.BarrierTaskContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/BarrierTaskContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/BarrierTaskContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/BarrierTaskContext.html", "kind" : "class"}, {"name" : "org.apache.spark.BarrierTaskInfo", "shortDescription" : ":: Experimental ::Carries all task infos of a barrier task.", "members_class" : [{"label" : "address", "tail" : ": String", "member" : "org.apache.spark.BarrierTaskInfo.address", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#address:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/BarrierTaskInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/BarrierTaskInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/BarrierTaskInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.ComplexFutureAction", "shortDescription" : "A FutureAction for actions that could trigger multiple Spark jobs.", "members_class" : [{"label" : "transformWith", "tail" : "(f: (Try[T]) ⇒ Future[S])(e: ExecutionContext): Future[S]", "member" : "org.apache.spark.ComplexFutureAction.transformWith", "link" : "org\/apache\/spark\/ComplexFutureAction.html#transformWith[S](f:scala.util.Try[T]=>scala.concurrent.Future[S])(implicite:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Try[T]) ⇒ Try[S])(e: ExecutionContext): Future[S]", "member" : "org.apache.spark.ComplexFutureAction.transform", "link" : "org\/apache\/spark\/ComplexFutureAction.html#transform[S](f:scala.util.Try[T]=>scala.util.Try[S])(implicite:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "jobIds", "tail" : "(): Seq[Int]", "member" : "org.apache.spark.ComplexFutureAction.jobIds", "link" : "org\/apache\/spark\/ComplexFutureAction.html#jobIds:Seq[Int]", "kind" : "def"}, {"label" : "value", "tail" : "(): Option[Try[T]]", "member" : "org.apache.spark.ComplexFutureAction.value", "link" : "org\/apache\/spark\/ComplexFutureAction.html#value:Option[scala.util.Try[T]]", "kind" : "def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "org.apache.spark.ComplexFutureAction.isCompleted", "link" : "org\/apache\/spark\/ComplexFutureAction.html#isCompleted:Boolean", "kind" : "def"}, {"label" : "onComplete", "tail" : "(func: (Try[T]) ⇒ U)(executor: ExecutionContext): Unit", "member" : "org.apache.spark.ComplexFutureAction.onComplete", "link" : "org\/apache\/spark\/ComplexFutureAction.html#onComplete[U](func:scala.util.Try[T]=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "result", "tail" : "(atMost: Duration)(permit: CanAwait): T", "member" : "org.apache.spark.ComplexFutureAction.result", "link" : "org\/apache\/spark\/ComplexFutureAction.html#result(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):T", "kind" : "def"}, {"label" : "ready", "tail" : "(atMost: Duration)(permit: CanAwait): ComplexFutureAction.this.type", "member" : "org.apache.spark.ComplexFutureAction.ready", "link" : "org\/apache\/spark\/ComplexFutureAction.html#ready(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):ComplexFutureAction.this.type", "kind" : "def"}, {"label" : "isCancelled", "tail" : "(): Boolean", "member" : "org.apache.spark.ComplexFutureAction.isCancelled", "link" : "org\/apache\/spark\/ComplexFutureAction.html#isCancelled:Boolean", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "org.apache.spark.ComplexFutureAction.cancel", "link" : "org\/apache\/spark\/ComplexFutureAction.html#cancel():Unit", "kind" : "def"}, {"member" : "org.apache.spark.ComplexFutureAction#<init>", "error" : "unsupported entity"}, {"label" : "get", "tail" : "(): T", "member" : "org.apache.spark.FutureAction.get", "link" : "org\/apache\/spark\/ComplexFutureAction.html#get():T", "kind" : "def"}, {"label" : "andThen", "tail" : "(pf: PartialFunction[Try[T], U])(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.andThen", "link" : "org\/apache\/spark\/ComplexFutureAction.html#andThen[U](pf:PartialFunction[scala.util.Try[T],U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "mapTo", "tail" : "(tag: ClassTag[S]): Future[S]", "member" : "scala.concurrent.Future.mapTo", "link" : "org\/apache\/spark\/ComplexFutureAction.html#mapTo[S](implicittag:scala.reflect.ClassTag[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "fallbackTo", "tail" : "(that: Future[U]): Future[U]", "member" : "scala.concurrent.Future.fallbackTo", "link" : "org\/apache\/spark\/ComplexFutureAction.html#fallbackTo[U>:T](that:scala.concurrent.Future[U]):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "zipWith", "tail" : "(that: Future[U])(f: (T, U) ⇒ R)(executor: ExecutionContext): Future[R]", "member" : "scala.concurrent.Future.zipWith", "link" : "org\/apache\/spark\/ComplexFutureAction.html#zipWith[U,R](that:scala.concurrent.Future[U])(f:(T,U)=>R)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Future[U]): Future[(T, U)]", "member" : "scala.concurrent.Future.zip", "link" : "org\/apache\/spark\/ComplexFutureAction.html#zip[U](that:scala.concurrent.Future[U]):scala.concurrent.Future[(T,U)]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[Throwable, Future[U]])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recoverWith", "link" : "org\/apache\/spark\/ComplexFutureAction.html#recoverWith[U>:T](pf:PartialFunction[Throwable,scala.concurrent.Future[U]])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recover", "link" : "org\/apache\/spark\/ComplexFutureAction.html#recover[U>:T](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[T, S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.collect", "link" : "org\/apache\/spark\/ComplexFutureAction.html#collect[S](pf:PartialFunction[T,S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (T) ⇒ Boolean)(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.withFilter", "link" : "org\/apache\/spark\/ComplexFutureAction.html#withFilter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean)(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.filter", "link" : "org\/apache\/spark\/ComplexFutureAction.html#filter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[T, Future[S]]): Future[S]", "member" : "scala.concurrent.Future.flatten", "link" : "org\/apache\/spark\/ComplexFutureAction.html#flatten[S](implicitev:T<:<scala.concurrent.Future[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ Future[S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.flatMap", "link" : "org\/apache\/spark\/ComplexFutureAction.html#flatMap[S](f:T=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ S)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.map", "link" : "org\/apache\/spark\/ComplexFutureAction.html#map[S](f:T=>S)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(s: (T) ⇒ S, f: (Throwable) ⇒ Throwable)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.transform", "link" : "org\/apache\/spark\/ComplexFutureAction.html#transform[S](s:T=>S,f:Throwable=>Throwable)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.foreach", "link" : "org\/apache\/spark\/ComplexFutureAction.html#foreach[U](f:T=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "failed", "tail" : "(): Future[Throwable]", "member" : "scala.concurrent.Future.failed", "link" : "org\/apache\/spark\/ComplexFutureAction.html#failed:scala.concurrent.Future[Throwable]", "kind" : "def"}, {"label" : "onFailure", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onFailure", "link" : "org\/apache\/spark\/ComplexFutureAction.html#onFailure[U](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "onSuccess", "tail" : "(pf: PartialFunction[T, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onSuccess", "link" : "org\/apache\/spark\/ComplexFutureAction.html#onSuccess[U](pf:PartialFunction[T,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/ComplexFutureAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/ComplexFutureAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/ComplexFutureAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/ComplexFutureAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/ComplexFutureAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/ComplexFutureAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/ComplexFutureAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ComplexFutureAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ComplexFutureAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ComplexFutureAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/ComplexFutureAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/ComplexFutureAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/ComplexFutureAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/ComplexFutureAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/ComplexFutureAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/ComplexFutureAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/ComplexFutureAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/ComplexFutureAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/ComplexFutureAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/ComplexFutureAction.html", "kind" : "class"}, {"name" : "org.apache.spark.ContextAwareIterator", "shortDescription" : ":: DeveloperApi ::A TaskContext aware iterator.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "org\/apache\/spark\/ContextAwareIterator.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]withIterator[Seq[B]]", "kind" : "class"}, {"label" : "next", "tail" : "(): T", "member" : "org.apache.spark.ContextAwareIterator.next", "link" : "org\/apache\/spark\/ContextAwareIterator.html#next():T", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "org.apache.spark.ContextAwareIterator.hasNext", "link" : "org\/apache\/spark\/ContextAwareIterator.html#hasNext:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.ContextAwareIterator#<init>", "error" : "unsupported entity"}, {"label" : "delegate", "tail" : ": Iterator[T]", "member" : "org.apache.spark.ContextAwareIterator.delegate", "link" : "org\/apache\/spark\/ContextAwareIterator.html#delegate:Iterator[T]", "kind" : "val"}, {"label" : "context", "tail" : ": TaskContext", "member" : "org.apache.spark.ContextAwareIterator.context", "link" : "org\/apache\/spark\/ContextAwareIterator.html#context:org.apache.spark.TaskContext", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toString():String", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[T]", "member" : "scala.collection.Iterator.toStream", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[T]", "member" : "scala.collection.Iterator.toIterator", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[T]", "member" : "scala.collection.Iterator.toTraversable", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: Iterator[_]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "org\/apache\/spark\/ContextAwareIterator.html#sameElements(that:Iterator[_]):Boolean", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.Iterator.copyToArray", "link" : "org\/apache\/spark\/ContextAwareIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "org\/apache\/spark\/ContextAwareIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.duplicate", "link" : "org\/apache\/spark\/ContextAwareIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "org\/apache\/spark\/ContextAwareIterator.html#length:Int", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "org\/apache\/spark\/ContextAwareIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "org\/apache\/spark\/ContextAwareIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[T]", "member" : "scala.collection.Iterator.buffered", "link" : "org\/apache\/spark\/ContextAwareIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "org\/apache\/spark\/ContextAwareIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "org\/apache\/spark\/ContextAwareIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (T) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "org\/apache\/spark\/ContextAwareIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (T) ⇒ Boolean): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "org\/apache\/spark\/ContextAwareIterator.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(p: (T) ⇒ Boolean): Option[T]", "member" : "scala.collection.Iterator.find", "link" : "org\/apache\/spark\/ContextAwareIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "org\/apache\/spark\/ContextAwareIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (T) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.exists", "link" : "org\/apache\/spark\/ContextAwareIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (T) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.forall", "link" : "org\/apache\/spark\/ContextAwareIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ U): Unit", "member" : "scala.collection.Iterator.foreach", "link" : "org\/apache\/spark\/ContextAwareIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]", "member" : "scala.collection.Iterator.zipAll", "link" : "org\/apache\/spark\/ContextAwareIterator.html#zipAll[B,A1>:A,B1>:B](that:Iterator[B],thisElem:A1,thatElem:B1):Iterator[(A1,B1)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(T, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "org\/apache\/spark\/ContextAwareIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: A1): Iterator[A1]", "member" : "scala.collection.Iterator.padTo", "link" : "org\/apache\/spark\/ContextAwareIterator.html#padTo[A1>:A](len:Int,elem:A1):Iterator[A1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Iterator[B]): Iterator[(T, B)]", "member" : "scala.collection.Iterator.zip", "link" : "org\/apache\/spark\/ContextAwareIterator.html#zip[B](that:Iterator[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.dropWhile", "link" : "org\/apache\/spark\/ContextAwareIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (T) ⇒ Boolean): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.span", "link" : "org\/apache\/spark\/ContextAwareIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (T) ⇒ Boolean): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.partition", "link" : "org\/apache\/spark\/ContextAwareIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.takeWhile", "link" : "org\/apache\/spark\/ContextAwareIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (T, B) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "org\/apache\/spark\/ContextAwareIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, T) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "org\/apache\/spark\/ContextAwareIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[T, B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "org\/apache\/spark\/ContextAwareIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.filterNot", "link" : "org\/apache\/spark\/ContextAwareIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.withFilter", "link" : "org\/apache\/spark\/ContextAwareIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenTraversableOnce[B])(p: (T, B) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.corresponds", "link" : "org\/apache\/spark\/ContextAwareIterator.html#corresponds[B](that:scala.collection.GenTraversableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.filter", "link" : "org\/apache\/spark\/ContextAwareIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "org\/apache\/spark\/ContextAwareIterator.html#flatMap[B](f:A=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "++", "tail" : "(that: ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "org\/apache\/spark\/ContextAwareIterator.html#++[B>:A](that:=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "org\/apache\/spark\/ContextAwareIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[T]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "org\/apache\/spark\/ContextAwareIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[T]", "member" : "scala.collection.Iterator.slice", "link" : "org\/apache\/spark\/ContextAwareIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[T]", "member" : "scala.collection.Iterator.drop", "link" : "org\/apache\/spark\/ContextAwareIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[T]", "member" : "scala.collection.Iterator.take", "link" : "org\/apache\/spark\/ContextAwareIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "org\/apache\/spark\/ContextAwareIterator.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isTraversableAgain", "link" : "org\/apache\/spark\/ContextAwareIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "org\/apache\/spark\/ContextAwareIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Iterator[T]", "member" : "scala.collection.Iterator.seq", "link" : "org\/apache\/spark\/ContextAwareIterator.html#seq:Iterator[A]", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/ContextAwareIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/ContextAwareIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/ContextAwareIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/ContextAwareIterator.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/ContextAwareIterator.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/ContextAwareIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[T, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, T, Col[T]]): Col[T]", "member" : "scala.collection.TraversableOnce.to", "link" : "org\/apache\/spark\/ContextAwareIterator.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[T]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[T]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[T]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[T]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[T]", "member" : "scala.collection.TraversableOnce.toList", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "org\/apache\/spark\/ContextAwareIterator.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/apache\/spark\/ContextAwareIterator.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/apache\/spark\/ContextAwareIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "org\/apache\/spark\/ContextAwareIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (T) ⇒ B)(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.minBy", "link" : "org\/apache\/spark\/ContextAwareIterator.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (T) ⇒ B)(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "org\/apache\/spark\/ContextAwareIterator.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.max", "link" : "org\/apache\/spark\/ContextAwareIterator.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.min", "link" : "org\/apache\/spark\/ContextAwareIterator.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "org\/apache\/spark\/ContextAwareIterator.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "org\/apache\/spark\/ContextAwareIterator.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, T) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "org\/apache\/spark\/ContextAwareIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "org\/apache\/spark\/ContextAwareIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "org\/apache\/spark\/ContextAwareIterator.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "org\/apache\/spark\/ContextAwareIterator.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (T, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "org\/apache\/spark\/ContextAwareIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, T) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "org\/apache\/spark\/ContextAwareIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "org\/apache\/spark\/ContextAwareIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "org\/apache\/spark\/ContextAwareIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "org\/apache\/spark\/ContextAwareIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "org\/apache\/spark\/ContextAwareIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "org\/apache\/spark\/ContextAwareIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "org\/apache\/spark\/ContextAwareIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[T, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "org\/apache\/spark\/ContextAwareIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (T) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "org\/apache\/spark\/ContextAwareIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "org\/apache\/spark\/ContextAwareIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "org\/apache\/spark\/ContextAwareIterator.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[T]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "org\/apache\/spark\/ContextAwareIterator.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "org\/apache\/spark\/ContextAwareIterator.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/ContextAwareIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/ContextAwareIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/ContextAwareIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/ContextAwareIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/ContextAwareIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/ContextAwareIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/ContextAwareIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ContextAwareIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ContextAwareIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ContextAwareIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/ContextAwareIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/ContextAwareIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/ContextAwareIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/ContextAwareIterator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/ContextAwareIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/ContextAwareIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/ContextAwareIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/ContextAwareIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/ContextAwareIterator.html", "kind" : "class"}, {"name" : "org.apache.spark.Dependency", "shortDescription" : ":: DeveloperApi ::Base class for dependencies.", "members_class" : [{"member" : "org.apache.spark.Dependency#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/Dependency.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/Dependency.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/Dependency.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/Dependency.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/Dependency.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/Dependency.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/Dependency.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Dependency.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Dependency.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Dependency.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/Dependency.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/Dependency.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/Dependency.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/Dependency.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/Dependency.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/Dependency.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/Dependency.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/Dependency.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/Dependency.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rdd", "tail" : "(): RDD[T]", "member" : "org.apache.spark.Dependency.rdd", "link" : "org\/apache\/spark\/Dependency.html#rdd:org.apache.spark.rdd.RDD[T]", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/Dependency.html", "kind" : "class"}, {"name" : "org.apache.spark.ExceptionFailure", "shortDescription" : ":: DeveloperApi ::Task failed due to a runtime exception.", "members_case class" : [{"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.ExceptionFailure.toErrorString", "link" : "org\/apache\/spark\/ExceptionFailure.html#toErrorString:String", "kind" : "def"}, {"label" : "exception", "tail" : "(): Option[Throwable]", "member" : "org.apache.spark.ExceptionFailure.exception", "link" : "org\/apache\/spark\/ExceptionFailure.html#exception:Option[Throwable]", "kind" : "def"}, {"member" : "org.apache.spark.ExceptionFailure#<init>", "error" : "unsupported entity"}, {"label" : "accumUpdates", "tail" : ": Seq[AccumulableInfo]", "member" : "org.apache.spark.ExceptionFailure.accumUpdates", "link" : "org\/apache\/spark\/ExceptionFailure.html#accumUpdates:Seq[org.apache.spark.scheduler.AccumulableInfo]", "kind" : "val"}, {"label" : "fullStackTrace", "tail" : ": String", "member" : "org.apache.spark.ExceptionFailure.fullStackTrace", "link" : "org\/apache\/spark\/ExceptionFailure.html#fullStackTrace:String", "kind" : "val"}, {"label" : "stackTrace", "tail" : ": Array[StackTraceElement]", "member" : "org.apache.spark.ExceptionFailure.stackTrace", "link" : "org\/apache\/spark\/ExceptionFailure.html#stackTrace:Array[StackTraceElement]", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "org.apache.spark.ExceptionFailure.description", "link" : "org\/apache\/spark\/ExceptionFailure.html#description:String", "kind" : "val"}, {"label" : "className", "tail" : ": String", "member" : "org.apache.spark.ExceptionFailure.className", "link" : "org\/apache\/spark\/ExceptionFailure.html#className:String", "kind" : "val"}, {"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskFailedReason.countTowardsTaskFailures", "link" : "org\/apache\/spark\/ExceptionFailure.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/ExceptionFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/ExceptionFailure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/ExceptionFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/ExceptionFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/ExceptionFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/ExceptionFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/ExceptionFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ExceptionFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ExceptionFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ExceptionFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/ExceptionFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/ExceptionFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/ExceptionFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/ExceptionFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/ExceptionFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/ExceptionFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/ExceptionFailure.html", "kind" : "case class"}, {"name" : "org.apache.spark.ExecutorLostFailure", "shortDescription" : ":: DeveloperApi ::The task failed because the executor that it was running on was lost.", "members_case class" : [{"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.ExecutorLostFailure.countTowardsTaskFailures", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.ExecutorLostFailure.toErrorString", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#toErrorString:String", "kind" : "def"}, {"member" : "org.apache.spark.ExecutorLostFailure#<init>", "error" : "unsupported entity"}, {"label" : "reason", "tail" : ": Option[String]", "member" : "org.apache.spark.ExecutorLostFailure.reason", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#reason:Option[String]", "kind" : "val"}, {"label" : "exitCausedByApp", "tail" : ": Boolean", "member" : "org.apache.spark.ExecutorLostFailure.exitCausedByApp", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#exitCausedByApp:Boolean", "kind" : "val"}, {"label" : "execId", "tail" : ": String", "member" : "org.apache.spark.ExecutorLostFailure.execId", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#execId:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/ExecutorLostFailure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/ExecutorLostFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/ExecutorLostFailure.html", "kind" : "case class"}, {"name" : "org.apache.spark.FetchFailed", "shortDescription" : ":: DeveloperApi ::Task failed to fetch shuffle data from a remote node.", "members_case class" : [{"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.FetchFailed.countTowardsTaskFailures", "link" : "org\/apache\/spark\/FetchFailed.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.FetchFailed.toErrorString", "link" : "org\/apache\/spark\/FetchFailed.html#toErrorString:String", "kind" : "def"}, {"member" : "org.apache.spark.FetchFailed#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "org.apache.spark.FetchFailed.message", "link" : "org\/apache\/spark\/FetchFailed.html#message:String", "kind" : "val"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.FetchFailed.reduceId", "link" : "org\/apache\/spark\/FetchFailed.html#reduceId:Int", "kind" : "val"}, {"label" : "mapIndex", "tail" : ": Int", "member" : "org.apache.spark.FetchFailed.mapIndex", "link" : "org\/apache\/spark\/FetchFailed.html#mapIndex:Int", "kind" : "val"}, {"label" : "mapId", "tail" : ": Long", "member" : "org.apache.spark.FetchFailed.mapId", "link" : "org\/apache\/spark\/FetchFailed.html#mapId:Long", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.FetchFailed.shuffleId", "link" : "org\/apache\/spark\/FetchFailed.html#shuffleId:Int", "kind" : "val"}, {"label" : "bmAddress", "tail" : ": BlockManagerId", "member" : "org.apache.spark.FetchFailed.bmAddress", "link" : "org\/apache\/spark\/FetchFailed.html#bmAddress:org.apache.spark.storage.BlockManagerId", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/FetchFailed.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/FetchFailed.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/FetchFailed.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/FetchFailed.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/FetchFailed.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/FetchFailed.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/FetchFailed.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/FetchFailed.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/FetchFailed.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/FetchFailed.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/FetchFailed.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/FetchFailed.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/FetchFailed.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/FetchFailed.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/FetchFailed.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/FetchFailed.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/FetchFailed.html", "kind" : "case class"}, {"name" : "org.apache.spark.FutureAction", "members_trait" : [{"label" : "get", "tail" : "(): T", "member" : "org.apache.spark.FutureAction.get", "link" : "org\/apache\/spark\/FutureAction.html#get():T", "kind" : "def"}, {"label" : "andThen", "tail" : "(pf: PartialFunction[Try[T], U])(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.andThen", "link" : "org\/apache\/spark\/FutureAction.html#andThen[U](pf:PartialFunction[scala.util.Try[T],U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "mapTo", "tail" : "(tag: ClassTag[S]): Future[S]", "member" : "scala.concurrent.Future.mapTo", "link" : "org\/apache\/spark\/FutureAction.html#mapTo[S](implicittag:scala.reflect.ClassTag[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "fallbackTo", "tail" : "(that: Future[U]): Future[U]", "member" : "scala.concurrent.Future.fallbackTo", "link" : "org\/apache\/spark\/FutureAction.html#fallbackTo[U>:T](that:scala.concurrent.Future[U]):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "zipWith", "tail" : "(that: Future[U])(f: (T, U) ⇒ R)(executor: ExecutionContext): Future[R]", "member" : "scala.concurrent.Future.zipWith", "link" : "org\/apache\/spark\/FutureAction.html#zipWith[U,R](that:scala.concurrent.Future[U])(f:(T,U)=>R)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Future[U]): Future[(T, U)]", "member" : "scala.concurrent.Future.zip", "link" : "org\/apache\/spark\/FutureAction.html#zip[U](that:scala.concurrent.Future[U]):scala.concurrent.Future[(T,U)]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[Throwable, Future[U]])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recoverWith", "link" : "org\/apache\/spark\/FutureAction.html#recoverWith[U>:T](pf:PartialFunction[Throwable,scala.concurrent.Future[U]])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recover", "link" : "org\/apache\/spark\/FutureAction.html#recover[U>:T](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[T, S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.collect", "link" : "org\/apache\/spark\/FutureAction.html#collect[S](pf:PartialFunction[T,S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (T) ⇒ Boolean)(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.withFilter", "link" : "org\/apache\/spark\/FutureAction.html#withFilter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean)(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.filter", "link" : "org\/apache\/spark\/FutureAction.html#filter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[T, Future[S]]): Future[S]", "member" : "scala.concurrent.Future.flatten", "link" : "org\/apache\/spark\/FutureAction.html#flatten[S](implicitev:T<:<scala.concurrent.Future[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ Future[S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.flatMap", "link" : "org\/apache\/spark\/FutureAction.html#flatMap[S](f:T=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ S)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.map", "link" : "org\/apache\/spark\/FutureAction.html#map[S](f:T=>S)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(s: (T) ⇒ S, f: (Throwable) ⇒ Throwable)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.transform", "link" : "org\/apache\/spark\/FutureAction.html#transform[S](s:T=>S,f:Throwable=>Throwable)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.foreach", "link" : "org\/apache\/spark\/FutureAction.html#foreach[U](f:T=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "failed", "tail" : "(): Future[Throwable]", "member" : "scala.concurrent.Future.failed", "link" : "org\/apache\/spark\/FutureAction.html#failed:scala.concurrent.Future[Throwable]", "kind" : "def"}, {"label" : "onFailure", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onFailure", "link" : "org\/apache\/spark\/FutureAction.html#onFailure[U](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "onSuccess", "tail" : "(pf: PartialFunction[T, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onSuccess", "link" : "org\/apache\/spark\/FutureAction.html#onSuccess[U](pf:PartialFunction[T,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/FutureAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/FutureAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/FutureAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/FutureAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/FutureAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/FutureAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/FutureAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/FutureAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/FutureAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/FutureAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/FutureAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/FutureAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/FutureAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/FutureAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/FutureAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/FutureAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/FutureAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/FutureAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/FutureAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "jobIds", "tail" : "(): Seq[Int]", "member" : "org.apache.spark.FutureAction.jobIds", "link" : "org\/apache\/spark\/FutureAction.html#jobIds:Seq[Int]", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): Option[Try[T]]", "member" : "org.apache.spark.FutureAction.value", "link" : "org\/apache\/spark\/FutureAction.html#value:Option[scala.util.Try[T]]", "kind" : "abstract def"}, {"label" : "isCancelled", "tail" : "(): Boolean", "member" : "org.apache.spark.FutureAction.isCancelled", "link" : "org\/apache\/spark\/FutureAction.html#isCancelled:Boolean", "kind" : "abstract def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "org.apache.spark.FutureAction.isCompleted", "link" : "org\/apache\/spark\/FutureAction.html#isCompleted:Boolean", "kind" : "abstract def"}, {"label" : "onComplete", "tail" : "(func: (Try[T]) ⇒ U)(executor: ExecutionContext): Unit", "member" : "org.apache.spark.FutureAction.onComplete", "link" : "org\/apache\/spark\/FutureAction.html#onComplete[U](func:scala.util.Try[T]=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "abstract def"}, {"label" : "result", "tail" : "(atMost: Duration)(permit: CanAwait): T", "member" : "org.apache.spark.FutureAction.result", "link" : "org\/apache\/spark\/FutureAction.html#result(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):T", "kind" : "abstract def"}, {"label" : "ready", "tail" : "(atMost: Duration)(permit: CanAwait): FutureAction.this.type", "member" : "org.apache.spark.FutureAction.ready", "link" : "org\/apache\/spark\/FutureAction.html#ready(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):FutureAction.this.type", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "org.apache.spark.FutureAction.cancel", "link" : "org\/apache\/spark\/FutureAction.html#cancel():Unit", "kind" : "abstract def"}, {"label" : "transformWith", "tail" : "(f: (Try[T]) ⇒ Future[S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.transformWith", "link" : "org\/apache\/spark\/FutureAction.html#transformWith[S](f:scala.util.Try[T]=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "abstract def"}, {"label" : "transform", "tail" : "(f: (Try[T]) ⇒ Try[S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.transform", "link" : "org\/apache\/spark\/FutureAction.html#transform[S](f:scala.util.Try[T]=>scala.util.Try[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "abstract def"}], "shortDescription" : "A future for the result of an action to support cancellation.", "trait" : "org\/apache\/spark\/FutureAction.html", "kind" : "trait"}, {"name" : "org.apache.spark.HashPartitioner", "shortDescription" : "A org.apache.spark.Partitioner that implements hash-based partitioning usingJava's Object.hashCode.", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.HashPartitioner.hashCode", "link" : "org\/apache\/spark\/HashPartitioner.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.HashPartitioner.equals", "link" : "org\/apache\/spark\/HashPartitioner.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "getPartition", "tail" : "(key: Any): Int", "member" : "org.apache.spark.HashPartitioner.getPartition", "link" : "org\/apache\/spark\/HashPartitioner.html#getPartition(key:Any):Int", "kind" : "def"}, {"label" : "numPartitions", "tail" : "(): Int", "member" : "org.apache.spark.HashPartitioner.numPartitions", "link" : "org\/apache\/spark\/HashPartitioner.html#numPartitions:Int", "kind" : "def"}, {"member" : "org.apache.spark.HashPartitioner#<init>", "error" : "unsupported entity"}, {"label" : "partitions", "tail" : ": Int", "member" : "org.apache.spark.HashPartitioner.partitions", "link" : "org\/apache\/spark\/HashPartitioner.html#partitions:Int", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/HashPartitioner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/HashPartitioner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/HashPartitioner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/HashPartitioner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/HashPartitioner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/HashPartitioner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/HashPartitioner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/HashPartitioner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/HashPartitioner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/HashPartitioner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/HashPartitioner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/HashPartitioner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/HashPartitioner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/HashPartitioner.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/HashPartitioner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/HashPartitioner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/HashPartitioner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/HashPartitioner.html", "kind" : "class"}, {"name" : "org.apache.spark.InterruptibleIterator", "shortDescription" : ":: DeveloperApi ::An iterator that wraps around an existing iterator to provide task killing functionality.", "members_class" : [{"label" : "GroupedIterator", "tail" : "", "member" : "scala.collection.Iterator.GroupedIterator", "link" : "org\/apache\/spark\/InterruptibleIterator.html#GroupedIterator[B>:A]extendsAbstractIterator[Seq[B]]withIterator[Seq[B]]", "kind" : "class"}, {"label" : "next", "tail" : "(): T", "member" : "org.apache.spark.InterruptibleIterator.next", "link" : "org\/apache\/spark\/InterruptibleIterator.html#next():T", "kind" : "def"}, {"label" : "hasNext", "tail" : "(): Boolean", "member" : "org.apache.spark.InterruptibleIterator.hasNext", "link" : "org\/apache\/spark\/InterruptibleIterator.html#hasNext:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.InterruptibleIterator#<init>", "error" : "unsupported entity"}, {"label" : "delegate", "tail" : ": Iterator[T]", "member" : "org.apache.spark.InterruptibleIterator.delegate", "link" : "org\/apache\/spark\/InterruptibleIterator.html#delegate:Iterator[T]", "kind" : "val"}, {"label" : "context", "tail" : ": TaskContext", "member" : "org.apache.spark.InterruptibleIterator.context", "link" : "org\/apache\/spark\/InterruptibleIterator.html#context:org.apache.spark.TaskContext", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.Iterator.toString", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toString():String", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[T]", "member" : "scala.collection.Iterator.toStream", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[T]", "member" : "scala.collection.Iterator.toIterator", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[T]", "member" : "scala.collection.Iterator.toTraversable", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: Iterator[_]): Boolean", "member" : "scala.collection.Iterator.sameElements", "link" : "org\/apache\/spark\/InterruptibleIterator.html#sameElements(that:Iterator[_]):Boolean", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.Iterator.copyToArray", "link" : "org\/apache\/spark\/InterruptibleIterator.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "patch", "tail" : "(from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B]", "member" : "scala.collection.Iterator.patch", "link" : "org\/apache\/spark\/InterruptibleIterator.html#patch[B>:A](from:Int,patchElems:Iterator[B],replaced:Int):Iterator[B]", "kind" : "def"}, {"label" : "duplicate", "tail" : "(): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.duplicate", "link" : "org\/apache\/spark\/InterruptibleIterator.html#duplicate:(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "scala.collection.Iterator.length", "link" : "org\/apache\/spark\/InterruptibleIterator.html#length:Int", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.sliding", "link" : "org\/apache\/spark\/InterruptibleIterator.html#sliding[B>:A](size:Int,step:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): GroupedIterator[B]", "member" : "scala.collection.Iterator.grouped", "link" : "org\/apache\/spark\/InterruptibleIterator.html#grouped[B>:A](size:Int):Iterator.this.GroupedIterator[B]", "kind" : "def"}, {"label" : "buffered", "tail" : "(): BufferedIterator[T]", "member" : "scala.collection.Iterator.buffered", "link" : "org\/apache\/spark\/InterruptibleIterator.html#buffered:scala.collection.BufferedIterator[A]", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B, from: Int): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "org\/apache\/spark\/InterruptibleIterator.html#indexOf[B>:A](elem:B,from:Int):Int", "kind" : "def"}, {"label" : "indexOf", "tail" : "(elem: B): Int", "member" : "scala.collection.Iterator.indexOf", "link" : "org\/apache\/spark\/InterruptibleIterator.html#indexOf[B>:A](elem:B):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (T) ⇒ Boolean, from: Int): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "org\/apache\/spark\/InterruptibleIterator.html#indexWhere(p:A=>Boolean,from:Int):Int", "kind" : "def"}, {"label" : "indexWhere", "tail" : "(p: (T) ⇒ Boolean): Int", "member" : "scala.collection.Iterator.indexWhere", "link" : "org\/apache\/spark\/InterruptibleIterator.html#indexWhere(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(p: (T) ⇒ Boolean): Option[T]", "member" : "scala.collection.Iterator.find", "link" : "org\/apache\/spark\/InterruptibleIterator.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: Any): Boolean", "member" : "scala.collection.Iterator.contains", "link" : "org\/apache\/spark\/InterruptibleIterator.html#contains(elem:Any):Boolean", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (T) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.exists", "link" : "org\/apache\/spark\/InterruptibleIterator.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (T) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.forall", "link" : "org\/apache\/spark\/InterruptibleIterator.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ U): Unit", "member" : "scala.collection.Iterator.foreach", "link" : "org\/apache\/spark\/InterruptibleIterator.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)]", "member" : "scala.collection.Iterator.zipAll", "link" : "org\/apache\/spark\/InterruptibleIterator.html#zipAll[B,A1>:A,B1>:B](that:Iterator[B],thisElem:A1,thatElem:B1):Iterator[(A1,B1)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): Iterator[(T, Int)]", "member" : "scala.collection.Iterator.zipWithIndex", "link" : "org\/apache\/spark\/InterruptibleIterator.html#zipWithIndex:Iterator[(A,Int)]", "kind" : "def"}, {"label" : "padTo", "tail" : "(len: Int, elem: A1): Iterator[A1]", "member" : "scala.collection.Iterator.padTo", "link" : "org\/apache\/spark\/InterruptibleIterator.html#padTo[A1>:A](len:Int,elem:A1):Iterator[A1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Iterator[B]): Iterator[(T, B)]", "member" : "scala.collection.Iterator.zip", "link" : "org\/apache\/spark\/InterruptibleIterator.html#zip[B](that:Iterator[B]):Iterator[(A,B)]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.dropWhile", "link" : "org\/apache\/spark\/InterruptibleIterator.html#dropWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "span", "tail" : "(p: (T) ⇒ Boolean): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.span", "link" : "org\/apache\/spark\/InterruptibleIterator.html#span(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "partition", "tail" : "(p: (T) ⇒ Boolean): (Iterator[T], Iterator[T])", "member" : "scala.collection.Iterator.partition", "link" : "org\/apache\/spark\/InterruptibleIterator.html#partition(p:A=>Boolean):(Iterator[A],Iterator[A])", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.takeWhile", "link" : "org\/apache\/spark\/InterruptibleIterator.html#takeWhile(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: (T, B) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanRight", "link" : "org\/apache\/spark\/InterruptibleIterator.html#scanRight[B](z:B)(op:(A,B)=>B):Iterator[B]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, T) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.scanLeft", "link" : "org\/apache\/spark\/InterruptibleIterator.html#scanLeft[B](z:B)(op:(B,A)=>B):Iterator[B]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[T, B]): Iterator[B]", "member" : "scala.collection.Iterator.collect", "link" : "org\/apache\/spark\/InterruptibleIterator.html#collect[B](pf:PartialFunction[A,B]):Iterator[B]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.filterNot", "link" : "org\/apache\/spark\/InterruptibleIterator.html#filterNot(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.withFilter", "link" : "org\/apache\/spark\/InterruptibleIterator.html#withFilter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "corresponds", "tail" : "(that: GenTraversableOnce[B])(p: (T, B) ⇒ Boolean): Boolean", "member" : "scala.collection.Iterator.corresponds", "link" : "org\/apache\/spark\/InterruptibleIterator.html#corresponds[B](that:scala.collection.GenTraversableOnce[B])(p:(A,B)=>Boolean):Boolean", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean): Iterator[T]", "member" : "scala.collection.Iterator.filter", "link" : "org\/apache\/spark\/InterruptibleIterator.html#filter(p:A=>Boolean):Iterator[A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.flatMap", "link" : "org\/apache\/spark\/InterruptibleIterator.html#flatMap[B](f:A=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "++", "tail" : "(that: ⇒ GenTraversableOnce[B]): Iterator[B]", "member" : "scala.collection.Iterator.++", "link" : "org\/apache\/spark\/InterruptibleIterator.html#++[B>:A](that:=>scala.collection.GenTraversableOnce[B]):Iterator[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ B): Iterator[B]", "member" : "scala.collection.Iterator.map", "link" : "org\/apache\/spark\/InterruptibleIterator.html#map[B](f:A=>B):Iterator[B]", "kind" : "def"}, {"label" : "sliceIterator", "tail" : "(from: Int, until: Int): Iterator[T]", "member" : "scala.collection.Iterator.sliceIterator", "link" : "org\/apache\/spark\/InterruptibleIterator.html#sliceIterator(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterator[T]", "member" : "scala.collection.Iterator.slice", "link" : "org\/apache\/spark\/InterruptibleIterator.html#slice(from:Int,until:Int):Iterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterator[T]", "member" : "scala.collection.Iterator.drop", "link" : "org\/apache\/spark\/InterruptibleIterator.html#drop(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterator[T]", "member" : "scala.collection.Iterator.take", "link" : "org\/apache\/spark\/InterruptibleIterator.html#take(n:Int):Iterator[A]", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.hasDefiniteSize", "link" : "org\/apache\/spark\/InterruptibleIterator.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isTraversableAgain", "link" : "org\/apache\/spark\/InterruptibleIterator.html#isTraversableAgain:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.Iterator.isEmpty", "link" : "org\/apache\/spark\/InterruptibleIterator.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "seq", "tail" : "(): Iterator[T]", "member" : "scala.collection.Iterator.seq", "link" : "org\/apache\/spark\/InterruptibleIterator.html#seq:Iterator[A]", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/InterruptibleIterator.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/InterruptibleIterator.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/InterruptibleIterator.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/InterruptibleIterator.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/InterruptibleIterator.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/InterruptibleIterator.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[T, (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, T, Col[T]]): Col[T]", "member" : "scala.collection.TraversableOnce.to", "link" : "org\/apache\/spark\/InterruptibleIterator.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[T]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[T]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[T]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[T]", "member" : "scala.collection.TraversableOnce.toIterable", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[T]", "member" : "scala.collection.TraversableOnce.toList", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "org\/apache\/spark\/InterruptibleIterator.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/apache\/spark\/InterruptibleIterator.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/apache\/spark\/InterruptibleIterator.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "org\/apache\/spark\/InterruptibleIterator.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: (T) ⇒ B)(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.minBy", "link" : "org\/apache\/spark\/InterruptibleIterator.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: (T) ⇒ B)(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "org\/apache\/spark\/InterruptibleIterator.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.max", "link" : "org\/apache\/spark\/InterruptibleIterator.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): T", "member" : "scala.collection.TraversableOnce.min", "link" : "org\/apache\/spark\/InterruptibleIterator.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "org\/apache\/spark\/InterruptibleIterator.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "org\/apache\/spark\/InterruptibleIterator.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, T) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "org\/apache\/spark\/InterruptibleIterator.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "org\/apache\/spark\/InterruptibleIterator.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "org\/apache\/spark\/InterruptibleIterator.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "org\/apache\/spark\/InterruptibleIterator.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: (T, B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "org\/apache\/spark\/InterruptibleIterator.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, T) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "org\/apache\/spark\/InterruptibleIterator.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceRight", "link" : "org\/apache\/spark\/InterruptibleIterator.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "org\/apache\/spark\/InterruptibleIterator.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldRight", "link" : "org\/apache\/spark\/InterruptibleIterator.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "org\/apache\/spark\/InterruptibleIterator.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: (T, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "org\/apache\/spark\/InterruptibleIterator.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, T) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "org\/apache\/spark\/InterruptibleIterator.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[T, B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "org\/apache\/spark\/InterruptibleIterator.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: (T) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "org\/apache\/spark\/InterruptibleIterator.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "org\/apache\/spark\/InterruptibleIterator.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "org\/apache\/spark\/InterruptibleIterator.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[T]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "org\/apache\/spark\/InterruptibleIterator.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "org\/apache\/spark\/InterruptibleIterator.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/InterruptibleIterator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/InterruptibleIterator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/InterruptibleIterator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/InterruptibleIterator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/InterruptibleIterator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/InterruptibleIterator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/InterruptibleIterator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/InterruptibleIterator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/InterruptibleIterator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/InterruptibleIterator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/InterruptibleIterator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/InterruptibleIterator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/InterruptibleIterator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/InterruptibleIterator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/InterruptibleIterator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/InterruptibleIterator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/InterruptibleIterator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/InterruptibleIterator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/InterruptibleIterator.html", "kind" : "class"}, {"name" : "org.apache.spark.JobExecutionStatus", "shortDescription" : "", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "org\/apache\/spark\/JobExecutionStatus.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[JobExecutionStatus]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "org\/apache\/spark\/JobExecutionStatus.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: JobExecutionStatus): Int", "member" : "java.lang.Enum.compareTo", "link" : "org\/apache\/spark\/JobExecutionStatus.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "org\/apache\/spark\/JobExecutionStatus.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "org\/apache\/spark\/JobExecutionStatus.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "org\/apache\/spark\/JobExecutionStatus.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "org\/apache\/spark\/JobExecutionStatus.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "org\/apache\/spark\/JobExecutionStatus.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "org\/apache\/spark\/JobExecutionStatus.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/JobExecutionStatus.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/JobExecutionStatus.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/JobExecutionStatus.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/JobExecutionStatus.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/JobExecutionStatus.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/JobExecutionStatus.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/JobExecutionStatus.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/JobExecutionStatus.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/JobExecutionStatus.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/JobExecutionStatus.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/JobExecutionStatus.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/JobExecutionStatus.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/JobExecutionStatus.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/JobExecutionStatus.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/JobExecutionStatus.html", "kind" : "class"}, {"name" : "org.apache.spark.JobSubmitter", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/JobSubmitter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/JobSubmitter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/JobSubmitter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/JobSubmitter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/JobSubmitter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/JobSubmitter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/JobSubmitter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/JobSubmitter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/JobSubmitter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/JobSubmitter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/JobSubmitter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/JobSubmitter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/JobSubmitter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/JobSubmitter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/JobSubmitter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/JobSubmitter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/JobSubmitter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/JobSubmitter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/JobSubmitter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "submitJob", "tail" : "(rdd: RDD[T], processPartition: (Iterator[T]) ⇒ U, partitions: Seq[Int], resultHandler: (Int, U) ⇒ Unit, resultFunc: ⇒ R): FutureAction[R]", "member" : "org.apache.spark.JobSubmitter.submitJob", "link" : "org\/apache\/spark\/JobSubmitter.html#submitJob[T,U,R](rdd:org.apache.spark.rdd.RDD[T],processPartition:Iterator[T]=>U,partitions:Seq[Int],resultHandler:(Int,U)=>Unit,resultFunc:=>R):org.apache.spark.FutureAction[R]", "kind" : "abstract def"}], "shortDescription" : "Handle via which a \"run\" function passed to a ComplexFutureActioncan submit jobs for execution.", "trait" : "org\/apache\/spark\/JobSubmitter.html", "kind" : "trait"}, {"name" : "org.apache.spark.NarrowDependency", "shortDescription" : ":: DeveloperApi ::Base class for dependencies where each partition of the child RDD depends on a small numberof partitions of the parent RDD.", "members_class" : [{"label" : "rdd", "tail" : "(): RDD[T]", "member" : "org.apache.spark.NarrowDependency.rdd", "link" : "org\/apache\/spark\/NarrowDependency.html#rdd:org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"member" : "org.apache.spark.NarrowDependency#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/NarrowDependency.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/NarrowDependency.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/NarrowDependency.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/NarrowDependency.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/NarrowDependency.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/NarrowDependency.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/NarrowDependency.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/NarrowDependency.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/NarrowDependency.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/NarrowDependency.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/NarrowDependency.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/NarrowDependency.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/NarrowDependency.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/NarrowDependency.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/NarrowDependency.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/NarrowDependency.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/NarrowDependency.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/NarrowDependency.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/NarrowDependency.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getParents", "tail" : "(partitionId: Int): Seq[Int]", "member" : "org.apache.spark.NarrowDependency.getParents", "link" : "org\/apache\/spark\/NarrowDependency.html#getParents(partitionId:Int):Seq[Int]", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/NarrowDependency.html", "kind" : "class"}, {"name" : "org.apache.spark.OneToOneDependency", "shortDescription" : ":: DeveloperApi ::Represents a one-to-one dependency between partitions of the parent and child RDDs.", "members_class" : [{"label" : "getParents", "tail" : "(partitionId: Int): List[Int]", "member" : "org.apache.spark.OneToOneDependency.getParents", "link" : "org\/apache\/spark\/OneToOneDependency.html#getParents(partitionId:Int):List[Int]", "kind" : "def"}, {"member" : "org.apache.spark.OneToOneDependency#<init>", "error" : "unsupported entity"}, {"label" : "rdd", "tail" : "(): RDD[T]", "member" : "org.apache.spark.NarrowDependency.rdd", "link" : "org\/apache\/spark\/OneToOneDependency.html#rdd:org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/OneToOneDependency.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/OneToOneDependency.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/OneToOneDependency.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/OneToOneDependency.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/OneToOneDependency.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/OneToOneDependency.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/OneToOneDependency.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/OneToOneDependency.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/OneToOneDependency.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/OneToOneDependency.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/OneToOneDependency.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/OneToOneDependency.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/OneToOneDependency.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/OneToOneDependency.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/OneToOneDependency.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/OneToOneDependency.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/OneToOneDependency.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/OneToOneDependency.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/OneToOneDependency.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/OneToOneDependency.html", "kind" : "class"}, {"name" : "org.apache.spark.Partition", "members_trait" : [{"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.Partition.equals", "link" : "org\/apache\/spark\/Partition.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.Partition.hashCode", "link" : "org\/apache\/spark\/Partition.html#hashCode():Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/Partition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/Partition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/Partition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/Partition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/Partition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/Partition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/Partition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/Partition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/Partition.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/Partition.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/Partition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/Partition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/Partition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/Partition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "index", "tail" : "(): Int", "member" : "org.apache.spark.Partition.index", "link" : "org\/apache\/spark\/Partition.html#index:Int", "kind" : "abstract def"}], "shortDescription" : "An identifier for a partition in an RDD.", "trait" : "org\/apache\/spark\/Partition.html", "kind" : "trait"}, {"name" : "org.apache.spark.Partitioner", "shortDescription" : "An object that defines how the elements in a key-value pair RDD are partitioned by key.", "object" : "org\/apache\/spark\/Partitioner$.html", "members_class" : [{"member" : "org.apache.spark.Partitioner#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/Partitioner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/Partitioner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/Partitioner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/Partitioner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/Partitioner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/Partitioner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/Partitioner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partitioner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partitioner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partitioner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/Partitioner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/Partitioner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/Partitioner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/Partitioner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/Partitioner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/Partitioner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/Partitioner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/Partitioner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/Partitioner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getPartition", "tail" : "(key: Any): Int", "member" : "org.apache.spark.Partitioner.getPartition", "link" : "org\/apache\/spark\/Partitioner.html#getPartition(key:Any):Int", "kind" : "abstract def"}, {"label" : "numPartitions", "tail" : "(): Int", "member" : "org.apache.spark.Partitioner.numPartitions", "link" : "org\/apache\/spark\/Partitioner.html#numPartitions:Int", "kind" : "abstract def"}], "members_object" : [{"label" : "defaultPartitioner", "tail" : "(rdd: RDD[_], others: RDD[_]*): Partitioner", "member" : "org.apache.spark.Partitioner.defaultPartitioner", "link" : "org\/apache\/spark\/Partitioner$.html#defaultPartitioner(rdd:org.apache.spark.rdd.RDD[_],others:org.apache.spark.rdd.RDD[_]*):org.apache.spark.Partitioner", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/Partitioner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/Partitioner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/Partitioner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/Partitioner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/Partitioner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/Partitioner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/Partitioner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partitioner$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partitioner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Partitioner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/Partitioner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/Partitioner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/Partitioner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/Partitioner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/Partitioner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/Partitioner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/Partitioner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/Partitioner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/Partitioner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/Partitioner.html", "kind" : "class"}, {"name" : "org.apache.spark.RangeDependency", "shortDescription" : ":: DeveloperApi ::Represents a one-to-one dependency between ranges of partitions in the parent and child RDDs.", "members_class" : [{"label" : "getParents", "tail" : "(partitionId: Int): List[Int]", "member" : "org.apache.spark.RangeDependency.getParents", "link" : "org\/apache\/spark\/RangeDependency.html#getParents(partitionId:Int):List[Int]", "kind" : "def"}, {"member" : "org.apache.spark.RangeDependency#<init>", "error" : "unsupported entity"}, {"label" : "rdd", "tail" : "(): RDD[T]", "member" : "org.apache.spark.NarrowDependency.rdd", "link" : "org\/apache\/spark\/RangeDependency.html#rdd:org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/RangeDependency.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/RangeDependency.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/RangeDependency.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/RangeDependency.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/RangeDependency.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/RangeDependency.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/RangeDependency.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/RangeDependency.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/RangeDependency.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/RangeDependency.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/RangeDependency.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/RangeDependency.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/RangeDependency.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/RangeDependency.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/RangeDependency.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/RangeDependency.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/RangeDependency.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/RangeDependency.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/RangeDependency.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/RangeDependency.html", "kind" : "class"}, {"name" : "org.apache.spark.RangePartitioner", "shortDescription" : "A org.apache.spark.Partitioner that partitions sortable records by range into roughlyequal ranges.", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.RangePartitioner.hashCode", "link" : "org\/apache\/spark\/RangePartitioner.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.RangePartitioner.equals", "link" : "org\/apache\/spark\/RangePartitioner.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "getPartition", "tail" : "(key: Any): Int", "member" : "org.apache.spark.RangePartitioner.getPartition", "link" : "org\/apache\/spark\/RangePartitioner.html#getPartition(key:Any):Int", "kind" : "def"}, {"label" : "numPartitions", "tail" : "(): Int", "member" : "org.apache.spark.RangePartitioner.numPartitions", "link" : "org\/apache\/spark\/RangePartitioner.html#numPartitions:Int", "kind" : "def"}, {"member" : "org.apache.spark.RangePartitioner#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.RangePartitioner#<init>", "error" : "unsupported entity"}, {"label" : "samplePointsPerPartitionHint", "tail" : ": Int", "member" : "org.apache.spark.RangePartitioner.samplePointsPerPartitionHint", "link" : "org\/apache\/spark\/RangePartitioner.html#samplePointsPerPartitionHint:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/RangePartitioner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/RangePartitioner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/RangePartitioner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/RangePartitioner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/RangePartitioner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/RangePartitioner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/RangePartitioner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/RangePartitioner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/RangePartitioner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/RangePartitioner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/RangePartitioner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/RangePartitioner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/RangePartitioner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/RangePartitioner.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/RangePartitioner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/RangePartitioner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/RangePartitioner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/RangePartitioner.html", "kind" : "class"}, {"name" : "org.apache.spark.Resubmitted", "shortDescription" : ":: DeveloperApi ::A org.apache.spark.scheduler.ShuffleMapTask that completed successfully earlier, but welost the executor before the stage completed.", "object" : "org\/apache\/spark\/Resubmitted$.html", "members_object" : [{"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.Resubmitted.toErrorString", "link" : "org\/apache\/spark\/Resubmitted$.html#toErrorString:String", "kind" : "def"}, {"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskFailedReason.countTowardsTaskFailures", "link" : "org\/apache\/spark\/Resubmitted$.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/Resubmitted$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/Resubmitted$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/Resubmitted$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/Resubmitted$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/Resubmitted$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/Resubmitted$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/Resubmitted$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Resubmitted$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Resubmitted$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Resubmitted$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/Resubmitted$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/Resubmitted$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/Resubmitted$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/Resubmitted$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/Resubmitted$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/Resubmitted$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/Resubmitted$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.SerializableWritable", "shortDescription" : "", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.SerializableWritable.toString", "link" : "org\/apache\/spark\/SerializableWritable.html#toString():String", "kind" : "def"}, {"label" : "value", "tail" : "(): T", "member" : "org.apache.spark.SerializableWritable.value", "link" : "org\/apache\/spark\/SerializableWritable.html#value:T", "kind" : "def"}, {"member" : "org.apache.spark.SerializableWritable#<init>", "error" : "unsupported entity"}, {"label" : "t", "tail" : ": T", "member" : "org.apache.spark.SerializableWritable.t", "link" : "org\/apache\/spark\/SerializableWritable.html#t:T", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SerializableWritable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SerializableWritable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SerializableWritable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SerializableWritable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SerializableWritable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SerializableWritable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SerializableWritable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SerializableWritable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SerializableWritable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SerializableWritable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SerializableWritable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SerializableWritable.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SerializableWritable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SerializableWritable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SerializableWritable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SerializableWritable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SerializableWritable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SerializableWritable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/SerializableWritable.html", "kind" : "class"}, {"name" : "org.apache.spark.ShuffleDependency", "shortDescription" : ":: DeveloperApi ::Represents a dependency on the output of a shuffle stage.", "members_class" : [{"label" : "newShuffleMergeState", "tail" : "(): Unit", "member" : "org.apache.spark.ShuffleDependency.newShuffleMergeState", "link" : "org\/apache\/spark\/ShuffleDependency.html#newShuffleMergeState():Unit", "kind" : "def"}, {"label" : "shuffleMergeFinalized", "tail" : "(): Boolean", "member" : "org.apache.spark.ShuffleDependency.shuffleMergeFinalized", "link" : "org\/apache\/spark\/ShuffleDependency.html#shuffleMergeFinalized:Boolean", "kind" : "def"}, {"label" : "getMergerLocs", "tail" : "(): Seq[BlockManagerId]", "member" : "org.apache.spark.ShuffleDependency.getMergerLocs", "link" : "org\/apache\/spark\/ShuffleDependency.html#getMergerLocs:Seq[org.apache.spark.storage.BlockManagerId]", "kind" : "def"}, {"label" : "setMergerLocs", "tail" : "(mergerLocs: Seq[BlockManagerId]): Unit", "member" : "org.apache.spark.ShuffleDependency.setMergerLocs", "link" : "org\/apache\/spark\/ShuffleDependency.html#setMergerLocs(mergerLocs:Seq[org.apache.spark.storage.BlockManagerId]):Unit", "kind" : "def"}, {"label" : "shuffleMergeId", "tail" : "(): Int", "member" : "org.apache.spark.ShuffleDependency.shuffleMergeId", "link" : "org\/apache\/spark\/ShuffleDependency.html#shuffleMergeId:Int", "kind" : "def"}, {"label" : "shuffleMergeEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.ShuffleDependency.shuffleMergeEnabled", "link" : "org\/apache\/spark\/ShuffleDependency.html#shuffleMergeEnabled:Boolean", "kind" : "def"}, {"label" : "shuffleHandle", "tail" : ": ShuffleHandle", "member" : "org.apache.spark.ShuffleDependency.shuffleHandle", "link" : "org\/apache\/spark\/ShuffleDependency.html#shuffleHandle:org.apache.spark.shuffle.ShuffleHandle", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.ShuffleDependency.shuffleId", "link" : "org\/apache\/spark\/ShuffleDependency.html#shuffleId:Int", "kind" : "val"}, {"label" : "rdd", "tail" : "(): RDD[Product2[K, V]]", "member" : "org.apache.spark.ShuffleDependency.rdd", "link" : "org\/apache\/spark\/ShuffleDependency.html#rdd:org.apache.spark.rdd.RDD[Product2[K,V]]", "kind" : "def"}, {"member" : "org.apache.spark.ShuffleDependency#<init>", "error" : "unsupported entity"}, {"label" : "shuffleWriterProcessor", "tail" : ": ShuffleWriteProcessor", "member" : "org.apache.spark.ShuffleDependency.shuffleWriterProcessor", "link" : "org\/apache\/spark\/ShuffleDependency.html#shuffleWriterProcessor:org.apache.spark.shuffle.ShuffleWriteProcessor", "kind" : "val"}, {"label" : "mapSideCombine", "tail" : ": Boolean", "member" : "org.apache.spark.ShuffleDependency.mapSideCombine", "link" : "org\/apache\/spark\/ShuffleDependency.html#mapSideCombine:Boolean", "kind" : "val"}, {"label" : "aggregator", "tail" : ": Option[Aggregator[K, V, C]]", "member" : "org.apache.spark.ShuffleDependency.aggregator", "link" : "org\/apache\/spark\/ShuffleDependency.html#aggregator:Option[org.apache.spark.Aggregator[K,V,C]]", "kind" : "val"}, {"label" : "keyOrdering", "tail" : ": Option[Ordering[K]]", "member" : "org.apache.spark.ShuffleDependency.keyOrdering", "link" : "org\/apache\/spark\/ShuffleDependency.html#keyOrdering:Option[Ordering[K]]", "kind" : "val"}, {"label" : "serializer", "tail" : ": Serializer", "member" : "org.apache.spark.ShuffleDependency.serializer", "link" : "org\/apache\/spark\/ShuffleDependency.html#serializer:org.apache.spark.serializer.Serializer", "kind" : "val"}, {"label" : "partitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.ShuffleDependency.partitioner", "link" : "org\/apache\/spark\/ShuffleDependency.html#partitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "_rdd", "tail" : ": RDD[_ <: Product2[K, V]]", "member" : "org.apache.spark.ShuffleDependency._rdd", "link" : "org\/apache\/spark\/ShuffleDependency.html#_rdd:org.apache.spark.rdd.RDD[_<:Product2[K,V]]", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/ShuffleDependency.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/ShuffleDependency.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/ShuffleDependency.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/ShuffleDependency.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/ShuffleDependency.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/ShuffleDependency.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/ShuffleDependency.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/ShuffleDependency.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/ShuffleDependency.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/ShuffleDependency.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/ShuffleDependency.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/ShuffleDependency.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/ShuffleDependency.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/ShuffleDependency.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/ShuffleDependency.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/ShuffleDependency.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/ShuffleDependency.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/ShuffleDependency.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/ShuffleDependency.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/ShuffleDependency.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/ShuffleDependency.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/ShuffleDependency.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ShuffleDependency.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ShuffleDependency.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/ShuffleDependency.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/ShuffleDependency.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/ShuffleDependency.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/ShuffleDependency.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/ShuffleDependency.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/ShuffleDependency.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/ShuffleDependency.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/ShuffleDependency.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/ShuffleDependency.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/ShuffleDependency.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/ShuffleDependency.html", "kind" : "class"}, {"name" : "org.apache.spark.SimpleFutureAction", "shortDescription" : "A FutureAction holding the result of an action that triggers a single job.", "members_class" : [{"label" : "transformWith", "tail" : "(f: (Try[T]) ⇒ Future[S])(e: ExecutionContext): Future[S]", "member" : "org.apache.spark.SimpleFutureAction.transformWith", "link" : "org\/apache\/spark\/SimpleFutureAction.html#transformWith[S](f:scala.util.Try[T]=>scala.concurrent.Future[S])(implicite:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Try[T]) ⇒ Try[S])(e: ExecutionContext): Future[S]", "member" : "org.apache.spark.SimpleFutureAction.transform", "link" : "org\/apache\/spark\/SimpleFutureAction.html#transform[S](f:scala.util.Try[T]=>scala.util.Try[S])(implicite:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "jobIds", "tail" : "(): Seq[Int]", "member" : "org.apache.spark.SimpleFutureAction.jobIds", "link" : "org\/apache\/spark\/SimpleFutureAction.html#jobIds:Seq[Int]", "kind" : "def"}, {"label" : "value", "tail" : "(): Option[Try[T]]", "member" : "org.apache.spark.SimpleFutureAction.value", "link" : "org\/apache\/spark\/SimpleFutureAction.html#value:Option[scala.util.Try[T]]", "kind" : "def"}, {"label" : "isCancelled", "tail" : "(): Boolean", "member" : "org.apache.spark.SimpleFutureAction.isCancelled", "link" : "org\/apache\/spark\/SimpleFutureAction.html#isCancelled:Boolean", "kind" : "def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "org.apache.spark.SimpleFutureAction.isCompleted", "link" : "org\/apache\/spark\/SimpleFutureAction.html#isCompleted:Boolean", "kind" : "def"}, {"label" : "onComplete", "tail" : "(func: (Try[T]) ⇒ U)(executor: ExecutionContext): Unit", "member" : "org.apache.spark.SimpleFutureAction.onComplete", "link" : "org\/apache\/spark\/SimpleFutureAction.html#onComplete[U](func:scala.util.Try[T]=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "result", "tail" : "(atMost: Duration)(permit: CanAwait): T", "member" : "org.apache.spark.SimpleFutureAction.result", "link" : "org\/apache\/spark\/SimpleFutureAction.html#result(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):T", "kind" : "def"}, {"label" : "ready", "tail" : "(atMost: Duration)(permit: CanAwait): SimpleFutureAction.this.type", "member" : "org.apache.spark.SimpleFutureAction.ready", "link" : "org\/apache\/spark\/SimpleFutureAction.html#ready(atMost:scala.concurrent.duration.Duration)(implicitpermit:scala.concurrent.CanAwait):SimpleFutureAction.this.type", "kind" : "def"}, {"label" : "cancel", "tail" : "(): Unit", "member" : "org.apache.spark.SimpleFutureAction.cancel", "link" : "org\/apache\/spark\/SimpleFutureAction.html#cancel():Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): T", "member" : "org.apache.spark.FutureAction.get", "link" : "org\/apache\/spark\/SimpleFutureAction.html#get():T", "kind" : "def"}, {"label" : "andThen", "tail" : "(pf: PartialFunction[Try[T], U])(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.andThen", "link" : "org\/apache\/spark\/SimpleFutureAction.html#andThen[U](pf:PartialFunction[scala.util.Try[T],U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "mapTo", "tail" : "(tag: ClassTag[S]): Future[S]", "member" : "scala.concurrent.Future.mapTo", "link" : "org\/apache\/spark\/SimpleFutureAction.html#mapTo[S](implicittag:scala.reflect.ClassTag[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "fallbackTo", "tail" : "(that: Future[U]): Future[U]", "member" : "scala.concurrent.Future.fallbackTo", "link" : "org\/apache\/spark\/SimpleFutureAction.html#fallbackTo[U>:T](that:scala.concurrent.Future[U]):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "zipWith", "tail" : "(that: Future[U])(f: (T, U) ⇒ R)(executor: ExecutionContext): Future[R]", "member" : "scala.concurrent.Future.zipWith", "link" : "org\/apache\/spark\/SimpleFutureAction.html#zipWith[U,R](that:scala.concurrent.Future[U])(f:(T,U)=>R)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[R]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: Future[U]): Future[(T, U)]", "member" : "scala.concurrent.Future.zip", "link" : "org\/apache\/spark\/SimpleFutureAction.html#zip[U](that:scala.concurrent.Future[U]):scala.concurrent.Future[(T,U)]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[Throwable, Future[U]])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recoverWith", "link" : "org\/apache\/spark\/SimpleFutureAction.html#recoverWith[U>:T](pf:PartialFunction[Throwable,scala.concurrent.Future[U]])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Future[U]", "member" : "scala.concurrent.Future.recover", "link" : "org\/apache\/spark\/SimpleFutureAction.html#recover[U>:T](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[U]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[T, S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.collect", "link" : "org\/apache\/spark\/SimpleFutureAction.html#collect[S](pf:PartialFunction[T,S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (T) ⇒ Boolean)(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.withFilter", "link" : "org\/apache\/spark\/SimpleFutureAction.html#withFilter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "final def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean)(executor: ExecutionContext): Future[T]", "member" : "scala.concurrent.Future.filter", "link" : "org\/apache\/spark\/SimpleFutureAction.html#filter(p:T=>Boolean)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[T, Future[S]]): Future[S]", "member" : "scala.concurrent.Future.flatten", "link" : "org\/apache\/spark\/SimpleFutureAction.html#flatten[S](implicitev:T<:<scala.concurrent.Future[S]):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ Future[S])(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.flatMap", "link" : "org\/apache\/spark\/SimpleFutureAction.html#flatMap[S](f:T=>scala.concurrent.Future[S])(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ S)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.map", "link" : "org\/apache\/spark\/SimpleFutureAction.html#map[S](f:T=>S)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "transform", "tail" : "(s: (T) ⇒ S, f: (Throwable) ⇒ Throwable)(executor: ExecutionContext): Future[S]", "member" : "scala.concurrent.Future.transform", "link" : "org\/apache\/spark\/SimpleFutureAction.html#transform[S](s:T=>S,f:Throwable=>Throwable)(implicitexecutor:scala.concurrent.ExecutionContext):scala.concurrent.Future[S]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ U)(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.foreach", "link" : "org\/apache\/spark\/SimpleFutureAction.html#foreach[U](f:T=>U)(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "failed", "tail" : "(): Future[Throwable]", "member" : "scala.concurrent.Future.failed", "link" : "org\/apache\/spark\/SimpleFutureAction.html#failed:scala.concurrent.Future[Throwable]", "kind" : "def"}, {"label" : "onFailure", "tail" : "(pf: PartialFunction[Throwable, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onFailure", "link" : "org\/apache\/spark\/SimpleFutureAction.html#onFailure[U](pf:PartialFunction[Throwable,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "onSuccess", "tail" : "(pf: PartialFunction[T, U])(executor: ExecutionContext): Unit", "member" : "scala.concurrent.Future.onSuccess", "link" : "org\/apache\/spark\/SimpleFutureAction.html#onSuccess[U](pf:PartialFunction[T,U])(implicitexecutor:scala.concurrent.ExecutionContext):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SimpleFutureAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SimpleFutureAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SimpleFutureAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SimpleFutureAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SimpleFutureAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SimpleFutureAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SimpleFutureAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SimpleFutureAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SimpleFutureAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SimpleFutureAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SimpleFutureAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SimpleFutureAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SimpleFutureAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SimpleFutureAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SimpleFutureAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SimpleFutureAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SimpleFutureAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SimpleFutureAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SimpleFutureAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/SimpleFutureAction.html", "kind" : "class"}, {"name" : "org.apache.spark.SparkConf", "shortDescription" : "Configuration for a Spark application.", "members_class" : [{"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.SparkConf.toDebugString", "link" : "org\/apache\/spark\/SparkConf.html#toDebugString:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): SparkConf", "member" : "org.apache.spark.SparkConf.clone", "link" : "org\/apache\/spark\/SparkConf.html#clone():org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "contains", "tail" : "(key: String): Boolean", "member" : "org.apache.spark.SparkConf.contains", "link" : "org\/apache\/spark\/SparkConf.html#contains(key:String):Boolean", "kind" : "def"}, {"label" : "getAppId", "tail" : "(): String", "member" : "org.apache.spark.SparkConf.getAppId", "link" : "org\/apache\/spark\/SparkConf.html#getAppId:String", "kind" : "def"}, {"label" : "getExecutorEnv", "tail" : "(): Seq[(String, String)]", "member" : "org.apache.spark.SparkConf.getExecutorEnv", "link" : "org\/apache\/spark\/SparkConf.html#getExecutorEnv:Seq[(String,String)]", "kind" : "def"}, {"label" : "getBoolean", "tail" : "(key: String, defaultValue: Boolean): Boolean", "member" : "org.apache.spark.SparkConf.getBoolean", "link" : "org\/apache\/spark\/SparkConf.html#getBoolean(key:String,defaultValue:Boolean):Boolean", "kind" : "def"}, {"label" : "getDouble", "tail" : "(key: String, defaultValue: Double): Double", "member" : "org.apache.spark.SparkConf.getDouble", "link" : "org\/apache\/spark\/SparkConf.html#getDouble(key:String,defaultValue:Double):Double", "kind" : "def"}, {"label" : "getLong", "tail" : "(key: String, defaultValue: Long): Long", "member" : "org.apache.spark.SparkConf.getLong", "link" : "org\/apache\/spark\/SparkConf.html#getLong(key:String,defaultValue:Long):Long", "kind" : "def"}, {"label" : "getInt", "tail" : "(key: String, defaultValue: Int): Int", "member" : "org.apache.spark.SparkConf.getInt", "link" : "org\/apache\/spark\/SparkConf.html#getInt(key:String,defaultValue:Int):Int", "kind" : "def"}, {"label" : "getAllWithPrefix", "tail" : "(prefix: String): Array[(String, String)]", "member" : "org.apache.spark.SparkConf.getAllWithPrefix", "link" : "org\/apache\/spark\/SparkConf.html#getAllWithPrefix(prefix:String):Array[(String,String)]", "kind" : "def"}, {"label" : "getAll", "tail" : "(): Array[(String, String)]", "member" : "org.apache.spark.SparkConf.getAll", "link" : "org\/apache\/spark\/SparkConf.html#getAll:Array[(String,String)]", "kind" : "def"}, {"label" : "getOption", "tail" : "(key: String): Option[String]", "member" : "org.apache.spark.SparkConf.getOption", "link" : "org\/apache\/spark\/SparkConf.html#getOption(key:String):Option[String]", "kind" : "def"}, {"label" : "getSizeAsGb", "tail" : "(key: String, defaultValue: String): Long", "member" : "org.apache.spark.SparkConf.getSizeAsGb", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsGb(key:String,defaultValue:String):Long", "kind" : "def"}, {"label" : "getSizeAsGb", "tail" : "(key: String): Long", "member" : "org.apache.spark.SparkConf.getSizeAsGb", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsGb(key:String):Long", "kind" : "def"}, {"label" : "getSizeAsMb", "tail" : "(key: String, defaultValue: String): Long", "member" : "org.apache.spark.SparkConf.getSizeAsMb", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsMb(key:String,defaultValue:String):Long", "kind" : "def"}, {"label" : "getSizeAsMb", "tail" : "(key: String): Long", "member" : "org.apache.spark.SparkConf.getSizeAsMb", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsMb(key:String):Long", "kind" : "def"}, {"label" : "getSizeAsKb", "tail" : "(key: String, defaultValue: String): Long", "member" : "org.apache.spark.SparkConf.getSizeAsKb", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsKb(key:String,defaultValue:String):Long", "kind" : "def"}, {"label" : "getSizeAsKb", "tail" : "(key: String): Long", "member" : "org.apache.spark.SparkConf.getSizeAsKb", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsKb(key:String):Long", "kind" : "def"}, {"label" : "getSizeAsBytes", "tail" : "(key: String, defaultValue: Long): Long", "member" : "org.apache.spark.SparkConf.getSizeAsBytes", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsBytes(key:String,defaultValue:Long):Long", "kind" : "def"}, {"label" : "getSizeAsBytes", "tail" : "(key: String, defaultValue: String): Long", "member" : "org.apache.spark.SparkConf.getSizeAsBytes", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsBytes(key:String,defaultValue:String):Long", "kind" : "def"}, {"label" : "getSizeAsBytes", "tail" : "(key: String): Long", "member" : "org.apache.spark.SparkConf.getSizeAsBytes", "link" : "org\/apache\/spark\/SparkConf.html#getSizeAsBytes(key:String):Long", "kind" : "def"}, {"label" : "getTimeAsMs", "tail" : "(key: String, defaultValue: String): Long", "member" : "org.apache.spark.SparkConf.getTimeAsMs", "link" : "org\/apache\/spark\/SparkConf.html#getTimeAsMs(key:String,defaultValue:String):Long", "kind" : "def"}, {"label" : "getTimeAsMs", "tail" : "(key: String): Long", "member" : "org.apache.spark.SparkConf.getTimeAsMs", "link" : "org\/apache\/spark\/SparkConf.html#getTimeAsMs(key:String):Long", "kind" : "def"}, {"label" : "getTimeAsSeconds", "tail" : "(key: String, defaultValue: String): Long", "member" : "org.apache.spark.SparkConf.getTimeAsSeconds", "link" : "org\/apache\/spark\/SparkConf.html#getTimeAsSeconds(key:String,defaultValue:String):Long", "kind" : "def"}, {"label" : "getTimeAsSeconds", "tail" : "(key: String): Long", "member" : "org.apache.spark.SparkConf.getTimeAsSeconds", "link" : "org\/apache\/spark\/SparkConf.html#getTimeAsSeconds(key:String):Long", "kind" : "def"}, {"label" : "get", "tail" : "(key: String, defaultValue: String): String", "member" : "org.apache.spark.SparkConf.get", "link" : "org\/apache\/spark\/SparkConf.html#get(key:String,defaultValue:String):String", "kind" : "def"}, {"label" : "get", "tail" : "(key: String): String", "member" : "org.apache.spark.SparkConf.get", "link" : "org\/apache\/spark\/SparkConf.html#get(key:String):String", "kind" : "def"}, {"label" : "remove", "tail" : "(key: String): SparkConf", "member" : "org.apache.spark.SparkConf.remove", "link" : "org\/apache\/spark\/SparkConf.html#remove(key:String):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "getAvroSchema", "tail" : "(): Map[Long, String]", "member" : "org.apache.spark.SparkConf.getAvroSchema", "link" : "org\/apache\/spark\/SparkConf.html#getAvroSchema:Map[Long,String]", "kind" : "def"}, {"label" : "registerAvroSchemas", "tail" : "(schemas: Schema*): SparkConf", "member" : "org.apache.spark.SparkConf.registerAvroSchemas", "link" : "org\/apache\/spark\/SparkConf.html#registerAvroSchemas(schemas:org.apache.avro.Schema*):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "registerKryoClasses", "tail" : "(classes: Array[Class[_]]): SparkConf", "member" : "org.apache.spark.SparkConf.registerKryoClasses", "link" : "org\/apache\/spark\/SparkConf.html#registerKryoClasses(classes:Array[Class[_]]):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setIfMissing", "tail" : "(key: String, value: String): SparkConf", "member" : "org.apache.spark.SparkConf.setIfMissing", "link" : "org\/apache\/spark\/SparkConf.html#setIfMissing(key:String,value:String):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setAll", "tail" : "(settings: Iterable[(String, String)]): SparkConf", "member" : "org.apache.spark.SparkConf.setAll", "link" : "org\/apache\/spark\/SparkConf.html#setAll(settings:Iterable[(String,String)]):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setSparkHome", "tail" : "(home: String): SparkConf", "member" : "org.apache.spark.SparkConf.setSparkHome", "link" : "org\/apache\/spark\/SparkConf.html#setSparkHome(home:String):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setExecutorEnv", "tail" : "(variables: Array[(String, String)]): SparkConf", "member" : "org.apache.spark.SparkConf.setExecutorEnv", "link" : "org\/apache\/spark\/SparkConf.html#setExecutorEnv(variables:Array[(String,String)]):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setExecutorEnv", "tail" : "(variables: Seq[(String, String)]): SparkConf", "member" : "org.apache.spark.SparkConf.setExecutorEnv", "link" : "org\/apache\/spark\/SparkConf.html#setExecutorEnv(variables:Seq[(String,String)]):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setExecutorEnv", "tail" : "(variable: String, value: String): SparkConf", "member" : "org.apache.spark.SparkConf.setExecutorEnv", "link" : "org\/apache\/spark\/SparkConf.html#setExecutorEnv(variable:String,value:String):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setJars", "tail" : "(jars: Array[String]): SparkConf", "member" : "org.apache.spark.SparkConf.setJars", "link" : "org\/apache\/spark\/SparkConf.html#setJars(jars:Array[String]):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setJars", "tail" : "(jars: Seq[String]): SparkConf", "member" : "org.apache.spark.SparkConf.setJars", "link" : "org\/apache\/spark\/SparkConf.html#setJars(jars:Seq[String]):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setAppName", "tail" : "(name: String): SparkConf", "member" : "org.apache.spark.SparkConf.setAppName", "link" : "org\/apache\/spark\/SparkConf.html#setAppName(name:String):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "setMaster", "tail" : "(master: String): SparkConf", "member" : "org.apache.spark.SparkConf.setMaster", "link" : "org\/apache\/spark\/SparkConf.html#setMaster(master:String):org.apache.spark.SparkConf", "kind" : "def"}, {"label" : "set", "tail" : "(key: String, value: String): SparkConf", "member" : "org.apache.spark.SparkConf.set", "link" : "org\/apache\/spark\/SparkConf.html#set(key:String,value:String):org.apache.spark.SparkConf", "kind" : "def"}, {"member" : "org.apache.spark.SparkConf#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.SparkConf#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkConf.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkConf.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/SparkConf.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkConf.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkConf.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkConf.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkConf.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkConf.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkConf.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkConf.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkConf.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkConf.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkConf.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/SparkConf.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/SparkConf.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkConf.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkConf.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkConf.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkConf.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkConf.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/SparkConf.html", "kind" : "class"}, {"name" : "org.apache.spark.SparkContext", "shortDescription" : "Main entry point for Spark functionality.", "object" : "org\/apache\/spark\/SparkContext$.html", "members_class" : [{"label" : "defaultMinPartitions", "tail" : "(): Int", "member" : "org.apache.spark.SparkContext.defaultMinPartitions", "link" : "org\/apache\/spark\/SparkContext.html#defaultMinPartitions:Int", "kind" : "def"}, {"label" : "defaultParallelism", "tail" : "(): Int", "member" : "org.apache.spark.SparkContext.defaultParallelism", "link" : "org\/apache\/spark\/SparkContext.html#defaultParallelism:Int", "kind" : "def"}, {"label" : "getCheckpointDir", "tail" : "(): Option[String]", "member" : "org.apache.spark.SparkContext.getCheckpointDir", "link" : "org\/apache\/spark\/SparkContext.html#getCheckpointDir:Option[String]", "kind" : "def"}, {"label" : "setCheckpointDir", "tail" : "(directory: String): Unit", "member" : "org.apache.spark.SparkContext.setCheckpointDir", "link" : "org\/apache\/spark\/SparkContext.html#setCheckpointDir(directory:String):Unit", "kind" : "def"}, {"label" : "killTaskAttempt", "tail" : "(taskId: Long, interruptThread: Boolean, reason: String): Boolean", "member" : "org.apache.spark.SparkContext.killTaskAttempt", "link" : "org\/apache\/spark\/SparkContext.html#killTaskAttempt(taskId:Long,interruptThread:Boolean,reason:String):Boolean", "kind" : "def"}, {"label" : "cancelStage", "tail" : "(stageId: Int): Unit", "member" : "org.apache.spark.SparkContext.cancelStage", "link" : "org\/apache\/spark\/SparkContext.html#cancelStage(stageId:Int):Unit", "kind" : "def"}, {"label" : "cancelStage", "tail" : "(stageId: Int, reason: String): Unit", "member" : "org.apache.spark.SparkContext.cancelStage", "link" : "org\/apache\/spark\/SparkContext.html#cancelStage(stageId:Int,reason:String):Unit", "kind" : "def"}, {"label" : "cancelJob", "tail" : "(jobId: Int): Unit", "member" : "org.apache.spark.SparkContext.cancelJob", "link" : "org\/apache\/spark\/SparkContext.html#cancelJob(jobId:Int):Unit", "kind" : "def"}, {"label" : "cancelJob", "tail" : "(jobId: Int, reason: String): Unit", "member" : "org.apache.spark.SparkContext.cancelJob", "link" : "org\/apache\/spark\/SparkContext.html#cancelJob(jobId:Int,reason:String):Unit", "kind" : "def"}, {"label" : "cancelAllJobs", "tail" : "(): Unit", "member" : "org.apache.spark.SparkContext.cancelAllJobs", "link" : "org\/apache\/spark\/SparkContext.html#cancelAllJobs():Unit", "kind" : "def"}, {"label" : "cancelJobGroup", "tail" : "(groupId: String): Unit", "member" : "org.apache.spark.SparkContext.cancelJobGroup", "link" : "org\/apache\/spark\/SparkContext.html#cancelJobGroup(groupId:String):Unit", "kind" : "def"}, {"label" : "submitJob", "tail" : "(rdd: RDD[T], processPartition: (Iterator[T]) ⇒ U, partitions: Seq[Int], resultHandler: (Int, U) ⇒ Unit, resultFunc: ⇒ R): SimpleFutureAction[R]", "member" : "org.apache.spark.SparkContext.submitJob", "link" : "org\/apache\/spark\/SparkContext.html#submitJob[T,U,R](rdd:org.apache.spark.rdd.RDD[T],processPartition:Iterator[T]=>U,partitions:Seq[Int],resultHandler:(Int,U)=>Unit,resultFunc:=>R):org.apache.spark.SimpleFutureAction[R]", "kind" : "def"}, {"label" : "runApproximateJob", "tail" : "(rdd: RDD[T], func: (TaskContext, Iterator[T]) ⇒ U, evaluator: ApproximateEvaluator[U, R], timeout: Long): PartialResult[R]", "member" : "org.apache.spark.SparkContext.runApproximateJob", "link" : "org\/apache\/spark\/SparkContext.html#runApproximateJob[T,U,R](rdd:org.apache.spark.rdd.RDD[T],func:(org.apache.spark.TaskContext,Iterator[T])=>U,evaluator:org.apache.spark.partial.ApproximateEvaluator[U,R],timeout:Long):org.apache.spark.partial.PartialResult[R]", "kind" : "def"}, {"label" : "runJob", "tail" : "(rdd: RDD[T], processPartition: (Iterator[T]) ⇒ U, resultHandler: (Int, U) ⇒ Unit)(arg0: ClassTag[U]): Unit", "member" : "org.apache.spark.SparkContext.runJob", "link" : "org\/apache\/spark\/SparkContext.html#runJob[T,U](rdd:org.apache.spark.rdd.RDD[T],processPartition:Iterator[T]=>U,resultHandler:(Int,U)=>Unit)(implicitevidence$16:scala.reflect.ClassTag[U]):Unit", "kind" : "def"}, {"label" : "runJob", "tail" : "(rdd: RDD[T], processPartition: (TaskContext, Iterator[T]) ⇒ U, resultHandler: (Int, U) ⇒ Unit)(arg0: ClassTag[U]): Unit", "member" : "org.apache.spark.SparkContext.runJob", "link" : "org\/apache\/spark\/SparkContext.html#runJob[T,U](rdd:org.apache.spark.rdd.RDD[T],processPartition:(org.apache.spark.TaskContext,Iterator[T])=>U,resultHandler:(Int,U)=>Unit)(implicitevidence$15:scala.reflect.ClassTag[U]):Unit", "kind" : "def"}, {"label" : "runJob", "tail" : "(rdd: RDD[T], func: (Iterator[T]) ⇒ U)(arg0: ClassTag[U]): Array[U]", "member" : "org.apache.spark.SparkContext.runJob", "link" : "org\/apache\/spark\/SparkContext.html#runJob[T,U](rdd:org.apache.spark.rdd.RDD[T],func:Iterator[T]=>U)(implicitevidence$14:scala.reflect.ClassTag[U]):Array[U]", "kind" : "def"}, {"label" : "runJob", "tail" : "(rdd: RDD[T], func: (TaskContext, Iterator[T]) ⇒ U)(arg0: ClassTag[U]): Array[U]", "member" : "org.apache.spark.SparkContext.runJob", "link" : "org\/apache\/spark\/SparkContext.html#runJob[T,U](rdd:org.apache.spark.rdd.RDD[T],func:(org.apache.spark.TaskContext,Iterator[T])=>U)(implicitevidence$13:scala.reflect.ClassTag[U]):Array[U]", "kind" : "def"}, {"label" : "runJob", "tail" : "(rdd: RDD[T], func: (Iterator[T]) ⇒ U, partitions: Seq[Int])(arg0: ClassTag[U]): Array[U]", "member" : "org.apache.spark.SparkContext.runJob", "link" : "org\/apache\/spark\/SparkContext.html#runJob[T,U](rdd:org.apache.spark.rdd.RDD[T],func:Iterator[T]=>U,partitions:Seq[Int])(implicitevidence$12:scala.reflect.ClassTag[U]):Array[U]", "kind" : "def"}, {"label" : "runJob", "tail" : "(rdd: RDD[T], func: (TaskContext, Iterator[T]) ⇒ U, partitions: Seq[Int])(arg0: ClassTag[U]): Array[U]", "member" : "org.apache.spark.SparkContext.runJob", "link" : "org\/apache\/spark\/SparkContext.html#runJob[T,U](rdd:org.apache.spark.rdd.RDD[T],func:(org.apache.spark.TaskContext,Iterator[T])=>U,partitions:Seq[Int])(implicitevidence$11:scala.reflect.ClassTag[U]):Array[U]", "kind" : "def"}, {"label" : "runJob", "tail" : "(rdd: RDD[T], func: (TaskContext, Iterator[T]) ⇒ U, partitions: Seq[Int], resultHandler: (Int, U) ⇒ Unit)(arg0: ClassTag[U]): Unit", "member" : "org.apache.spark.SparkContext.runJob", "link" : "org\/apache\/spark\/SparkContext.html#runJob[T,U](rdd:org.apache.spark.rdd.RDD[T],func:(org.apache.spark.TaskContext,Iterator[T])=>U,partitions:Seq[Int],resultHandler:(Int,U)=>Unit)(implicitevidence$10:scala.reflect.ClassTag[U]):Unit", "kind" : "def"}, {"label" : "clearCallSite", "tail" : "(): Unit", "member" : "org.apache.spark.SparkContext.clearCallSite", "link" : "org\/apache\/spark\/SparkContext.html#clearCallSite():Unit", "kind" : "def"}, {"label" : "setCallSite", "tail" : "(shortCallSite: String): Unit", "member" : "org.apache.spark.SparkContext.setCallSite", "link" : "org\/apache\/spark\/SparkContext.html#setCallSite(shortCallSite:String):Unit", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.spark.SparkContext.stop", "link" : "org\/apache\/spark\/SparkContext.html#stop():Unit", "kind" : "def"}, {"label" : "listJars", "tail" : "(): Seq[String]", "member" : "org.apache.spark.SparkContext.listJars", "link" : "org\/apache\/spark\/SparkContext.html#listJars():Seq[String]", "kind" : "def"}, {"label" : "addJar", "tail" : "(path: String): Unit", "member" : "org.apache.spark.SparkContext.addJar", "link" : "org\/apache\/spark\/SparkContext.html#addJar(path:String):Unit", "kind" : "def"}, {"label" : "getSchedulingMode", "tail" : "(): SchedulingMode", "member" : "org.apache.spark.SparkContext.getSchedulingMode", "link" : "org\/apache\/spark\/SparkContext.html#getSchedulingMode:org.apache.spark.scheduler.SchedulingMode.SchedulingMode", "kind" : "def"}, {"label" : "getPoolForName", "tail" : "(pool: String): Option[Schedulable]", "member" : "org.apache.spark.SparkContext.getPoolForName", "link" : "org\/apache\/spark\/SparkContext.html#getPoolForName(pool:String):Option[org.apache.spark.scheduler.Schedulable]", "kind" : "def"}, {"label" : "getAllPools", "tail" : "(): Seq[Schedulable]", "member" : "org.apache.spark.SparkContext.getAllPools", "link" : "org\/apache\/spark\/SparkContext.html#getAllPools:Seq[org.apache.spark.scheduler.Schedulable]", "kind" : "def"}, {"label" : "getPersistentRDDs", "tail" : "(): Map[Int, RDD[_]]", "member" : "org.apache.spark.SparkContext.getPersistentRDDs", "link" : "org\/apache\/spark\/SparkContext.html#getPersistentRDDs:scala.collection.Map[Int,org.apache.spark.rdd.RDD[_]]", "kind" : "def"}, {"label" : "getRDDStorageInfo", "tail" : "(): Array[RDDInfo]", "member" : "org.apache.spark.SparkContext.getRDDStorageInfo", "link" : "org\/apache\/spark\/SparkContext.html#getRDDStorageInfo:Array[org.apache.spark.storage.RDDInfo]", "kind" : "def"}, {"label" : "getExecutorMemoryStatus", "tail" : "(): Map[String, (Long, Long)]", "member" : "org.apache.spark.SparkContext.getExecutorMemoryStatus", "link" : "org\/apache\/spark\/SparkContext.html#getExecutorMemoryStatus:scala.collection.Map[String,(Long,Long)]", "kind" : "def"}, {"label" : "version", "tail" : "(): String", "member" : "org.apache.spark.SparkContext.version", "link" : "org\/apache\/spark\/SparkContext.html#version:String", "kind" : "def"}, {"label" : "killExecutor", "tail" : "(executorId: String): Boolean", "member" : "org.apache.spark.SparkContext.killExecutor", "link" : "org\/apache\/spark\/SparkContext.html#killExecutor(executorId:String):Boolean", "kind" : "def"}, {"label" : "killExecutors", "tail" : "(executorIds: Seq[String]): Boolean", "member" : "org.apache.spark.SparkContext.killExecutors", "link" : "org\/apache\/spark\/SparkContext.html#killExecutors(executorIds:Seq[String]):Boolean", "kind" : "def"}, {"label" : "requestExecutors", "tail" : "(numAdditionalExecutors: Int): Boolean", "member" : "org.apache.spark.SparkContext.requestExecutors", "link" : "org\/apache\/spark\/SparkContext.html#requestExecutors(numAdditionalExecutors:Int):Boolean", "kind" : "def"}, {"label" : "requestTotalExecutors", "tail" : "(numExecutors: Int, localityAwareTasks: Int, hostToLocalTaskCount: Map[String, Int]): Boolean", "member" : "org.apache.spark.SparkContext.requestTotalExecutors", "link" : "org\/apache\/spark\/SparkContext.html#requestTotalExecutors(numExecutors:Int,localityAwareTasks:Int,hostToLocalTaskCount:scala.collection.immutable.Map[String,Int]):Boolean", "kind" : "def"}, {"label" : "removeSparkListener", "tail" : "(listener: SparkListenerInterface): Unit", "member" : "org.apache.spark.SparkContext.removeSparkListener", "link" : "org\/apache\/spark\/SparkContext.html#removeSparkListener(listener:org.apache.spark.scheduler.SparkListenerInterface):Unit", "kind" : "def"}, {"label" : "addSparkListener", "tail" : "(listener: SparkListenerInterface): Unit", "member" : "org.apache.spark.SparkContext.addSparkListener", "link" : "org\/apache\/spark\/SparkContext.html#addSparkListener(listener:org.apache.spark.scheduler.SparkListenerInterface):Unit", "kind" : "def"}, {"label" : "addFile", "tail" : "(path: String, recursive: Boolean): Unit", "member" : "org.apache.spark.SparkContext.addFile", "link" : "org\/apache\/spark\/SparkContext.html#addFile(path:String,recursive:Boolean):Unit", "kind" : "def"}, {"label" : "listArchives", "tail" : "(): Seq[String]", "member" : "org.apache.spark.SparkContext.listArchives", "link" : "org\/apache\/spark\/SparkContext.html#listArchives():Seq[String]", "kind" : "def"}, {"label" : "addArchive", "tail" : "(path: String): Unit", "member" : "org.apache.spark.SparkContext.addArchive", "link" : "org\/apache\/spark\/SparkContext.html#addArchive(path:String):Unit", "kind" : "def"}, {"label" : "listFiles", "tail" : "(): Seq[String]", "member" : "org.apache.spark.SparkContext.listFiles", "link" : "org\/apache\/spark\/SparkContext.html#listFiles():Seq[String]", "kind" : "def"}, {"label" : "addFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.SparkContext.addFile", "link" : "org\/apache\/spark\/SparkContext.html#addFile(path:String):Unit", "kind" : "def"}, {"label" : "broadcast", "tail" : "(value: T)(arg0: ClassTag[T]): Broadcast[T]", "member" : "org.apache.spark.SparkContext.broadcast", "link" : "org\/apache\/spark\/SparkContext.html#broadcast[T](value:T)(implicitevidence$9:scala.reflect.ClassTag[T]):org.apache.spark.broadcast.Broadcast[T]", "kind" : "def"}, {"label" : "collectionAccumulator", "tail" : "(name: String): CollectionAccumulator[T]", "member" : "org.apache.spark.SparkContext.collectionAccumulator", "link" : "org\/apache\/spark\/SparkContext.html#collectionAccumulator[T](name:String):org.apache.spark.util.CollectionAccumulator[T]", "kind" : "def"}, {"label" : "collectionAccumulator", "tail" : "(): CollectionAccumulator[T]", "member" : "org.apache.spark.SparkContext.collectionAccumulator", "link" : "org\/apache\/spark\/SparkContext.html#collectionAccumulator[T]:org.apache.spark.util.CollectionAccumulator[T]", "kind" : "def"}, {"label" : "doubleAccumulator", "tail" : "(name: String): DoubleAccumulator", "member" : "org.apache.spark.SparkContext.doubleAccumulator", "link" : "org\/apache\/spark\/SparkContext.html#doubleAccumulator(name:String):org.apache.spark.util.DoubleAccumulator", "kind" : "def"}, {"label" : "doubleAccumulator", "tail" : "(): DoubleAccumulator", "member" : "org.apache.spark.SparkContext.doubleAccumulator", "link" : "org\/apache\/spark\/SparkContext.html#doubleAccumulator:org.apache.spark.util.DoubleAccumulator", "kind" : "def"}, {"label" : "longAccumulator", "tail" : "(name: String): LongAccumulator", "member" : "org.apache.spark.SparkContext.longAccumulator", "link" : "org\/apache\/spark\/SparkContext.html#longAccumulator(name:String):org.apache.spark.util.LongAccumulator", "kind" : "def"}, {"label" : "longAccumulator", "tail" : "(): LongAccumulator", "member" : "org.apache.spark.SparkContext.longAccumulator", "link" : "org\/apache\/spark\/SparkContext.html#longAccumulator:org.apache.spark.util.LongAccumulator", "kind" : "def"}, {"label" : "register", "tail" : "(acc: AccumulatorV2[_, _], name: String): Unit", "member" : "org.apache.spark.SparkContext.register", "link" : "org\/apache\/spark\/SparkContext.html#register(acc:org.apache.spark.util.AccumulatorV2[_,_],name:String):Unit", "kind" : "def"}, {"label" : "register", "tail" : "(acc: AccumulatorV2[_, _]): Unit", "member" : "org.apache.spark.SparkContext.register", "link" : "org\/apache\/spark\/SparkContext.html#register(acc:org.apache.spark.util.AccumulatorV2[_,_]):Unit", "kind" : "def"}, {"label" : "emptyRDD", "tail" : "(arg0: ClassTag[T]): RDD[T]", "member" : "org.apache.spark.SparkContext.emptyRDD", "link" : "org\/apache\/spark\/SparkContext.html#emptyRDD[T](implicitevidence$8:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(first: RDD[T], rest: RDD[T]*)(arg0: ClassTag[T]): RDD[T]", "member" : "org.apache.spark.SparkContext.union", "link" : "org\/apache\/spark\/SparkContext.html#union[T](first:org.apache.spark.rdd.RDD[T],rest:org.apache.spark.rdd.RDD[T]*)(implicitevidence$7:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(rdds: Seq[RDD[T]])(arg0: ClassTag[T]): RDD[T]", "member" : "org.apache.spark.SparkContext.union", "link" : "org\/apache\/spark\/SparkContext.html#union[T](rdds:Seq[org.apache.spark.rdd.RDD[T]])(implicitevidence$6:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "checkpointFile", "tail" : "(path: String)(arg0: ClassTag[T]): RDD[T]", "member" : "org.apache.spark.SparkContext.checkpointFile", "link" : "org\/apache\/spark\/SparkContext.html#checkpointFile[T](path:String)(implicitevidence$5:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "objectFile", "tail" : "(path: String, minPartitions: Int)(arg0: ClassTag[T]): RDD[T]", "member" : "org.apache.spark.SparkContext.objectFile", "link" : "org\/apache\/spark\/SparkContext.html#objectFile[T](path:String,minPartitions:Int)(implicitevidence$4:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sequenceFile", "tail" : "(path: String, minPartitions: Int)(km: ClassTag[K], vm: ClassTag[V], kcf: () ⇒ WritableConverter[K], vcf: () ⇒ WritableConverter[V]): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.sequenceFile", "link" : "org\/apache\/spark\/SparkContext.html#sequenceFile[K,V](path:String,minPartitions:Int)(implicitkm:scala.reflect.ClassTag[K],implicitvm:scala.reflect.ClassTag[V],implicitkcf:()=>org.apache.spark.WritableConverter[K],implicitvcf:()=>org.apache.spark.WritableConverter[V]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "sequenceFile", "tail" : "(path: String, keyClass: Class[K], valueClass: Class[V]): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.sequenceFile", "link" : "org\/apache\/spark\/SparkContext.html#sequenceFile[K,V](path:String,keyClass:Class[K],valueClass:Class[V]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "sequenceFile", "tail" : "(path: String, keyClass: Class[K], valueClass: Class[V], minPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.sequenceFile", "link" : "org\/apache\/spark\/SparkContext.html#sequenceFile[K,V](path:String,keyClass:Class[K],valueClass:Class[V],minPartitions:Int):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "newAPIHadoopRDD", "tail" : "(conf: Configuration, fClass: Class[F], kClass: Class[K], vClass: Class[V]): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.newAPIHadoopRDD", "link" : "org\/apache\/spark\/SparkContext.html#newAPIHadoopRDD[K,V,F<:org.apache.hadoop.mapreduce.InputFormat[K,V]](conf:org.apache.hadoop.conf.Configuration,fClass:Class[F],kClass:Class[K],vClass:Class[V]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "newAPIHadoopFile", "tail" : "(path: String, fClass: Class[F], kClass: Class[K], vClass: Class[V], conf: Configuration): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.newAPIHadoopFile", "link" : "org\/apache\/spark\/SparkContext.html#newAPIHadoopFile[K,V,F<:org.apache.hadoop.mapreduce.InputFormat[K,V]](path:String,fClass:Class[F],kClass:Class[K],vClass:Class[V],conf:org.apache.hadoop.conf.Configuration):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "newAPIHadoopFile", "tail" : "(path: String)(km: ClassTag[K], vm: ClassTag[V], fm: ClassTag[F]): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.newAPIHadoopFile", "link" : "org\/apache\/spark\/SparkContext.html#newAPIHadoopFile[K,V,F<:org.apache.hadoop.mapreduce.InputFormat[K,V]](path:String)(implicitkm:scala.reflect.ClassTag[K],implicitvm:scala.reflect.ClassTag[V],implicitfm:scala.reflect.ClassTag[F]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "hadoopFile", "tail" : "(path: String)(km: ClassTag[K], vm: ClassTag[V], fm: ClassTag[F]): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.hadoopFile", "link" : "org\/apache\/spark\/SparkContext.html#hadoopFile[K,V,F<:org.apache.hadoop.mapred.InputFormat[K,V]](path:String)(implicitkm:scala.reflect.ClassTag[K],implicitvm:scala.reflect.ClassTag[V],implicitfm:scala.reflect.ClassTag[F]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "hadoopFile", "tail" : "(path: String, minPartitions: Int)(km: ClassTag[K], vm: ClassTag[V], fm: ClassTag[F]): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.hadoopFile", "link" : "org\/apache\/spark\/SparkContext.html#hadoopFile[K,V,F<:org.apache.hadoop.mapred.InputFormat[K,V]](path:String,minPartitions:Int)(implicitkm:scala.reflect.ClassTag[K],implicitvm:scala.reflect.ClassTag[V],implicitfm:scala.reflect.ClassTag[F]):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "hadoopFile", "tail" : "(path: String, inputFormatClass: Class[_ <: InputFormat[K, V]], keyClass: Class[K], valueClass: Class[V], minPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.hadoopFile", "link" : "org\/apache\/spark\/SparkContext.html#hadoopFile[K,V](path:String,inputFormatClass:Class[_<:org.apache.hadoop.mapred.InputFormat[K,V]],keyClass:Class[K],valueClass:Class[V],minPartitions:Int):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "hadoopRDD", "tail" : "(conf: JobConf, inputFormatClass: Class[_ <: InputFormat[K, V]], keyClass: Class[K], valueClass: Class[V], minPartitions: Int): RDD[(K, V)]", "member" : "org.apache.spark.SparkContext.hadoopRDD", "link" : "org\/apache\/spark\/SparkContext.html#hadoopRDD[K,V](conf:org.apache.hadoop.mapred.JobConf,inputFormatClass:Class[_<:org.apache.hadoop.mapred.InputFormat[K,V]],keyClass:Class[K],valueClass:Class[V],minPartitions:Int):org.apache.spark.rdd.RDD[(K,V)]", "kind" : "def"}, {"label" : "binaryRecords", "tail" : "(path: String, recordLength: Int, conf: Configuration): RDD[Array[Byte]]", "member" : "org.apache.spark.SparkContext.binaryRecords", "link" : "org\/apache\/spark\/SparkContext.html#binaryRecords(path:String,recordLength:Int,conf:org.apache.hadoop.conf.Configuration):org.apache.spark.rdd.RDD[Array[Byte]]", "kind" : "def"}, {"label" : "binaryFiles", "tail" : "(path: String, minPartitions: Int): RDD[(String, PortableDataStream)]", "member" : "org.apache.spark.SparkContext.binaryFiles", "link" : "org\/apache\/spark\/SparkContext.html#binaryFiles(path:String,minPartitions:Int):org.apache.spark.rdd.RDD[(String,org.apache.spark.input.PortableDataStream)]", "kind" : "def"}, {"label" : "wholeTextFiles", "tail" : "(path: String, minPartitions: Int): RDD[(String, String)]", "member" : "org.apache.spark.SparkContext.wholeTextFiles", "link" : "org\/apache\/spark\/SparkContext.html#wholeTextFiles(path:String,minPartitions:Int):org.apache.spark.rdd.RDD[(String,String)]", "kind" : "def"}, {"label" : "textFile", "tail" : "(path: String, minPartitions: Int): RDD[String]", "member" : "org.apache.spark.SparkContext.textFile", "link" : "org\/apache\/spark\/SparkContext.html#textFile(path:String,minPartitions:Int):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "makeRDD", "tail" : "(seq: Seq[(T, Seq[String])])(arg0: ClassTag[T]): RDD[T]", "member" : "org.apache.spark.SparkContext.makeRDD", "link" : "org\/apache\/spark\/SparkContext.html#makeRDD[T](seq:Seq[(T,Seq[String])])(implicitevidence$3:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "makeRDD", "tail" : "(seq: Seq[T], numSlices: Int)(arg0: ClassTag[T]): RDD[T]", "member" : "org.apache.spark.SparkContext.makeRDD", "link" : "org\/apache\/spark\/SparkContext.html#makeRDD[T](seq:Seq[T],numSlices:Int)(implicitevidence$2:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "range", "tail" : "(start: Long, end: Long, step: Long, numSlices: Int): RDD[Long]", "member" : "org.apache.spark.SparkContext.range", "link" : "org\/apache\/spark\/SparkContext.html#range(start:Long,end:Long,step:Long,numSlices:Int):org.apache.spark.rdd.RDD[Long]", "kind" : "def"}, {"label" : "parallelize", "tail" : "(seq: Seq[T], numSlices: Int)(arg0: ClassTag[T]): RDD[T]", "member" : "org.apache.spark.SparkContext.parallelize", "link" : "org\/apache\/spark\/SparkContext.html#parallelize[T](seq:Seq[T],numSlices:Int)(implicitevidence$1:scala.reflect.ClassTag[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "clearJobGroup", "tail" : "(): Unit", "member" : "org.apache.spark.SparkContext.clearJobGroup", "link" : "org\/apache\/spark\/SparkContext.html#clearJobGroup():Unit", "kind" : "def"}, {"label" : "setJobGroup", "tail" : "(groupId: String, description: String, interruptOnCancel: Boolean): Unit", "member" : "org.apache.spark.SparkContext.setJobGroup", "link" : "org\/apache\/spark\/SparkContext.html#setJobGroup(groupId:String,description:String,interruptOnCancel:Boolean):Unit", "kind" : "def"}, {"label" : "setJobDescription", "tail" : "(value: String): Unit", "member" : "org.apache.spark.SparkContext.setJobDescription", "link" : "org\/apache\/spark\/SparkContext.html#setJobDescription(value:String):Unit", "kind" : "def"}, {"label" : "getLocalProperty", "tail" : "(key: String): String", "member" : "org.apache.spark.SparkContext.getLocalProperty", "link" : "org\/apache\/spark\/SparkContext.html#getLocalProperty(key:String):String", "kind" : "def"}, {"label" : "setLocalProperty", "tail" : "(key: String, value: String): Unit", "member" : "org.apache.spark.SparkContext.setLocalProperty", "link" : "org\/apache\/spark\/SparkContext.html#setLocalProperty(key:String,value:String):Unit", "kind" : "def"}, {"label" : "setLogLevel", "tail" : "(logLevel: String): Unit", "member" : "org.apache.spark.SparkContext.setLogLevel", "link" : "org\/apache\/spark\/SparkContext.html#setLogLevel(logLevel:String):Unit", "kind" : "def"}, {"label" : "localProperties", "tail" : ": InheritableThreadLocal[Properties]", "member" : "org.apache.spark.SparkContext.localProperties", "link" : "org\/apache\/spark\/SparkContext.html#localProperties:InheritableThreadLocal[java.util.Properties]", "kind" : "val"}, {"label" : "applicationAttemptId", "tail" : "(): Option[String]", "member" : "org.apache.spark.SparkContext.applicationAttemptId", "link" : "org\/apache\/spark\/SparkContext.html#applicationAttemptId:Option[String]", "kind" : "def"}, {"label" : "applicationId", "tail" : "(): String", "member" : "org.apache.spark.SparkContext.applicationId", "link" : "org\/apache\/spark\/SparkContext.html#applicationId:String", "kind" : "def"}, {"label" : "sparkUser", "tail" : ": String", "member" : "org.apache.spark.SparkContext.sparkUser", "link" : "org\/apache\/spark\/SparkContext.html#sparkUser:String", "kind" : "val"}, {"label" : "hadoopConfiguration", "tail" : "(): Configuration", "member" : "org.apache.spark.SparkContext.hadoopConfiguration", "link" : "org\/apache\/spark\/SparkContext.html#hadoopConfiguration:org.apache.hadoop.conf.Configuration", "kind" : "def"}, {"label" : "uiWebUrl", "tail" : "(): Option[String]", "member" : "org.apache.spark.SparkContext.uiWebUrl", "link" : "org\/apache\/spark\/SparkContext.html#uiWebUrl:Option[String]", "kind" : "def"}, {"label" : "statusTracker", "tail" : "(): SparkStatusTracker", "member" : "org.apache.spark.SparkContext.statusTracker", "link" : "org\/apache\/spark\/SparkContext.html#statusTracker:org.apache.spark.SparkStatusTracker", "kind" : "def"}, {"label" : "isStopped", "tail" : "(): Boolean", "member" : "org.apache.spark.SparkContext.isStopped", "link" : "org\/apache\/spark\/SparkContext.html#isStopped:Boolean", "kind" : "def"}, {"label" : "isLocal", "tail" : "(): Boolean", "member" : "org.apache.spark.SparkContext.isLocal", "link" : "org\/apache\/spark\/SparkContext.html#isLocal:Boolean", "kind" : "def"}, {"label" : "appName", "tail" : "(): String", "member" : "org.apache.spark.SparkContext.appName", "link" : "org\/apache\/spark\/SparkContext.html#appName:String", "kind" : "def"}, {"label" : "deployMode", "tail" : "(): String", "member" : "org.apache.spark.SparkContext.deployMode", "link" : "org\/apache\/spark\/SparkContext.html#deployMode:String", "kind" : "def"}, {"label" : "master", "tail" : "(): String", "member" : "org.apache.spark.SparkContext.master", "link" : "org\/apache\/spark\/SparkContext.html#master:String", "kind" : "def"}, {"label" : "archives", "tail" : "(): Seq[String]", "member" : "org.apache.spark.SparkContext.archives", "link" : "org\/apache\/spark\/SparkContext.html#archives:Seq[String]", "kind" : "def"}, {"label" : "files", "tail" : "(): Seq[String]", "member" : "org.apache.spark.SparkContext.files", "link" : "org\/apache\/spark\/SparkContext.html#files:Seq[String]", "kind" : "def"}, {"label" : "jars", "tail" : "(): Seq[String]", "member" : "org.apache.spark.SparkContext.jars", "link" : "org\/apache\/spark\/SparkContext.html#jars:Seq[String]", "kind" : "def"}, {"label" : "resources", "tail" : "(): Map[String, ResourceInformation]", "member" : "org.apache.spark.SparkContext.resources", "link" : "org\/apache\/spark\/SparkContext.html#resources:scala.collection.Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "def"}, {"label" : "getConf", "tail" : "(): SparkConf", "member" : "org.apache.spark.SparkContext.getConf", "link" : "org\/apache\/spark\/SparkContext.html#getConf:org.apache.spark.SparkConf", "kind" : "def"}, {"member" : "org.apache.spark.SparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.SparkContext#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.SparkContext#<init>", "error" : "unsupported entity"}, {"label" : "startTime", "tail" : ": Long", "member" : "org.apache.spark.SparkContext.startTime", "link" : "org\/apache\/spark\/SparkContext.html#startTime:Long", "kind" : "val"}, {"label" : "myLogger", "tail" : ": Logger", "member" : "org.apache.spark.SparkContext.myLogger", "link" : "org\/apache\/spark\/SparkContext.html#myLogger:org.apache.log4j.Logger", "kind" : "lazy val"}, {"member" : "org.apache.spark.SparkContext#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkContext.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkContext.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/SparkContext.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkContext.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkContext.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkContext.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkContext.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkContext.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkContext.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkContext.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkContext.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkContext.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkContext.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/SparkContext.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/SparkContext.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "jarOfObject", "tail" : "(obj: AnyRef): Option[String]", "member" : "org.apache.spark.SparkContext.jarOfObject", "link" : "org\/apache\/spark\/SparkContext$.html#jarOfObject(obj:AnyRef):Option[String]", "kind" : "def"}, {"label" : "jarOfClass", "tail" : "(cls: Class[_]): Option[String]", "member" : "org.apache.spark.SparkContext.jarOfClass", "link" : "org\/apache\/spark\/SparkContext$.html#jarOfClass(cls:Class[_]):Option[String]", "kind" : "def"}, {"label" : "getOrCreate", "tail" : "(): SparkContext", "member" : "org.apache.spark.SparkContext.getOrCreate", "link" : "org\/apache\/spark\/SparkContext$.html#getOrCreate():org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "getOrCreate", "tail" : "(config: SparkConf): SparkContext", "member" : "org.apache.spark.SparkContext.getOrCreate", "link" : "org\/apache\/spark\/SparkContext$.html#getOrCreate(config:org.apache.spark.SparkConf):org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkContext$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkContext$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/SparkContext$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkContext$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkContext$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkContext$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkContext$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkContext$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkContext$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkContext$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkContext$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkContext$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkContext$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/SparkContext$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/SparkContext$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkContext$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/SparkContext.html", "kind" : "class"}, {"name" : "org.apache.spark.SparkEnv", "shortDescription" : ":: DeveloperApi ::Holds all the runtime environment objects for a running Spark instance (either master or worker),including the serializer, RpcEnv, block manager, map output tracker, etc.", "object" : "org\/apache\/spark\/SparkEnv$.html", "members_class" : [{"member" : "org.apache.spark.SparkEnv#<init>", "error" : "unsupported entity"}, {"label" : "conf", "tail" : ": SparkConf", "member" : "org.apache.spark.SparkEnv.conf", "link" : "org\/apache\/spark\/SparkEnv.html#conf:org.apache.spark.SparkConf", "kind" : "val"}, {"label" : "outputCommitCoordinator", "tail" : ": OutputCommitCoordinator", "member" : "org.apache.spark.SparkEnv.outputCommitCoordinator", "link" : "org\/apache\/spark\/SparkEnv.html#outputCommitCoordinator:org.apache.spark.scheduler.OutputCommitCoordinator", "kind" : "val"}, {"label" : "memoryManager", "tail" : ": MemoryManager", "member" : "org.apache.spark.SparkEnv.memoryManager", "link" : "org\/apache\/spark\/SparkEnv.html#memoryManager:org.apache.spark.memory.MemoryManager", "kind" : "val"}, {"label" : "metricsSystem", "tail" : ": MetricsSystem", "member" : "org.apache.spark.SparkEnv.metricsSystem", "link" : "org\/apache\/spark\/SparkEnv.html#metricsSystem:org.apache.spark.metrics.MetricsSystem", "kind" : "val"}, {"label" : "securityManager", "tail" : ": SecurityManager", "member" : "org.apache.spark.SparkEnv.securityManager", "link" : "org\/apache\/spark\/SparkEnv.html#securityManager:org.apache.spark.SecurityManager", "kind" : "val"}, {"label" : "blockManager", "tail" : ": BlockManager", "member" : "org.apache.spark.SparkEnv.blockManager", "link" : "org\/apache\/spark\/SparkEnv.html#blockManager:org.apache.spark.storage.BlockManager", "kind" : "val"}, {"label" : "broadcastManager", "tail" : ": BroadcastManager", "member" : "org.apache.spark.SparkEnv.broadcastManager", "link" : "org\/apache\/spark\/SparkEnv.html#broadcastManager:org.apache.spark.broadcast.BroadcastManager", "kind" : "val"}, {"label" : "shuffleManager", "tail" : ": ShuffleManager", "member" : "org.apache.spark.SparkEnv.shuffleManager", "link" : "org\/apache\/spark\/SparkEnv.html#shuffleManager:org.apache.spark.shuffle.ShuffleManager", "kind" : "val"}, {"label" : "mapOutputTracker", "tail" : ": MapOutputTracker", "member" : "org.apache.spark.SparkEnv.mapOutputTracker", "link" : "org\/apache\/spark\/SparkEnv.html#mapOutputTracker:org.apache.spark.MapOutputTracker", "kind" : "val"}, {"label" : "serializerManager", "tail" : ": SerializerManager", "member" : "org.apache.spark.SparkEnv.serializerManager", "link" : "org\/apache\/spark\/SparkEnv.html#serializerManager:org.apache.spark.serializer.SerializerManager", "kind" : "val"}, {"label" : "closureSerializer", "tail" : ": Serializer", "member" : "org.apache.spark.SparkEnv.closureSerializer", "link" : "org\/apache\/spark\/SparkEnv.html#closureSerializer:org.apache.spark.serializer.Serializer", "kind" : "val"}, {"label" : "serializer", "tail" : ": Serializer", "member" : "org.apache.spark.SparkEnv.serializer", "link" : "org\/apache\/spark\/SparkEnv.html#serializer:org.apache.spark.serializer.Serializer", "kind" : "val"}, {"label" : "executorId", "tail" : ": String", "member" : "org.apache.spark.SparkEnv.executorId", "link" : "org\/apache\/spark\/SparkEnv.html#executorId:String", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkEnv.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkEnv.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/SparkEnv.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkEnv.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkEnv.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkEnv.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkEnv.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkEnv.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkEnv.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkEnv.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkEnv.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkEnv.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkEnv.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/SparkEnv.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/SparkEnv.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkEnv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkEnv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkEnv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkEnv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkEnv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkEnv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkEnv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkEnv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkEnv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkEnv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkEnv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkEnv.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkEnv.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkEnv.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkEnv.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkEnv.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkEnv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkEnv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkEnv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "get", "tail" : "(): SparkEnv", "member" : "org.apache.spark.SparkEnv.get", "link" : "org\/apache\/spark\/SparkEnv$.html#get:org.apache.spark.SparkEnv", "kind" : "def"}, {"label" : "set", "tail" : "(e: SparkEnv): Unit", "member" : "org.apache.spark.SparkEnv.set", "link" : "org\/apache\/spark\/SparkEnv$.html#set(e:org.apache.spark.SparkEnv):Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkEnv$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/SparkEnv$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/SparkEnv$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkEnv$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkEnv$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkEnv$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkEnv$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkEnv$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/SparkEnv$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/SparkEnv$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/SparkEnv$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/SparkEnv$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/SparkEnv$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/SparkEnv$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/SparkEnv$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkEnv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkEnv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkEnv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkEnv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkEnv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkEnv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkEnv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkEnv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkEnv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkEnv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkEnv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkEnv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkEnv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkEnv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkEnv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkEnv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkEnv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkEnv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkEnv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/SparkEnv.html", "kind" : "class"}, {"name" : "org.apache.spark.SparkException", "shortDescription" : "", "members_class" : [{"label" : "getSqlState", "tail" : "(): String", "member" : "org.apache.spark.SparkException.getSqlState", "link" : "org\/apache\/spark\/SparkException.html#getSqlState():String", "kind" : "def"}, {"label" : "getErrorClass", "tail" : "(): String", "member" : "org.apache.spark.SparkException.getErrorClass", "link" : "org\/apache\/spark\/SparkException.html#getErrorClass():String", "kind" : "def"}, {"member" : "org.apache.spark.SparkException#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.SparkException#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.SparkException#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.SparkException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/apache\/spark\/SparkException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/apache\/spark\/SparkException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/apache\/spark\/SparkException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/apache\/spark\/SparkException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/apache\/spark\/SparkException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/SparkException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/SparkException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/SparkException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/apache\/spark\/SparkException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/apache\/spark\/SparkException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/apache\/spark\/SparkException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/apache\/spark\/SparkException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/apache\/spark\/SparkException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/SparkException.html", "kind" : "class"}, {"name" : "org.apache.spark.SparkExecutorInfo", "members_trait" : [{"member" : "org.apache.spark.SparkExecutorInfo#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkExecutorInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "totalOffHeapStorageMemory", "tail" : "(): Long", "member" : "org.apache.spark.SparkExecutorInfo.totalOffHeapStorageMemory", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#totalOffHeapStorageMemory():Long", "kind" : "abstract def"}, {"label" : "totalOnHeapStorageMemory", "tail" : "(): Long", "member" : "org.apache.spark.SparkExecutorInfo.totalOnHeapStorageMemory", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#totalOnHeapStorageMemory():Long", "kind" : "abstract def"}, {"label" : "usedOffHeapStorageMemory", "tail" : "(): Long", "member" : "org.apache.spark.SparkExecutorInfo.usedOffHeapStorageMemory", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#usedOffHeapStorageMemory():Long", "kind" : "abstract def"}, {"label" : "usedOnHeapStorageMemory", "tail" : "(): Long", "member" : "org.apache.spark.SparkExecutorInfo.usedOnHeapStorageMemory", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#usedOnHeapStorageMemory():Long", "kind" : "abstract def"}, {"label" : "numRunningTasks", "tail" : "(): Int", "member" : "org.apache.spark.SparkExecutorInfo.numRunningTasks", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#numRunningTasks():Int", "kind" : "abstract def"}, {"label" : "cacheSize", "tail" : "(): Long", "member" : "org.apache.spark.SparkExecutorInfo.cacheSize", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#cacheSize():Long", "kind" : "abstract def"}, {"label" : "port", "tail" : "(): Int", "member" : "org.apache.spark.SparkExecutorInfo.port", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#port():Int", "kind" : "abstract def"}, {"label" : "host", "tail" : "(): String", "member" : "org.apache.spark.SparkExecutorInfo.host", "link" : "org\/apache\/spark\/SparkExecutorInfo.html#host():String", "kind" : "abstract def"}], "shortDescription" : "Exposes information about Spark Executors.", "trait" : "org\/apache\/spark\/SparkExecutorInfo.html", "kind" : "trait"}, {"name" : "org.apache.spark.SparkFiles", "shortDescription" : "Resolves paths to files added through SparkContext.addFile().", "object" : "org\/apache\/spark\/SparkFiles$.html", "members_object" : [{"label" : "getRootDirectory", "tail" : "(): String", "member" : "org.apache.spark.SparkFiles.getRootDirectory", "link" : "org\/apache\/spark\/SparkFiles$.html#getRootDirectory():String", "kind" : "def"}, {"label" : "get", "tail" : "(filename: String): String", "member" : "org.apache.spark.SparkFiles.get", "link" : "org\/apache\/spark\/SparkFiles$.html#get(filename:String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkFiles$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkFiles$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkFiles$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkFiles$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkFiles$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkFiles$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkFiles$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkFiles$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkFiles$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkFiles$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkFiles$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkFiles$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkFiles$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkFiles$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkFiles$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkFiles$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkFiles$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkFiles$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkFiles$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.SparkFirehoseListener", "shortDescription" : "Class that allows users to receive all SparkListener events.", "members_class" : [{"label" : "onOtherEvent", "tail" : "(event: SparkListenerEvent): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onOtherEvent", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onOtherEvent(event:org.apache.spark.scheduler.SparkListenerEvent):Unit", "kind" : "def"}, {"label" : "onResourceProfileAdded", "tail" : "(event: SparkListenerResourceProfileAdded): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onResourceProfileAdded", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onResourceProfileAdded(event:org.apache.spark.scheduler.SparkListenerResourceProfileAdded):Unit", "kind" : "def"}, {"label" : "onUnschedulableTaskSetRemoved", "tail" : "(unschedulableTaskSetRemoved: SparkListenerUnschedulableTaskSetRemoved): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onUnschedulableTaskSetRemoved", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onUnschedulableTaskSetRemoved(unschedulableTaskSetRemoved:org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetRemoved):Unit", "kind" : "def"}, {"label" : "onUnschedulableTaskSetAdded", "tail" : "(unschedulableTaskSetAdded: SparkListenerUnschedulableTaskSetAdded): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onUnschedulableTaskSetAdded", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onUnschedulableTaskSetAdded(unschedulableTaskSetAdded:org.apache.spark.scheduler.SparkListenerUnschedulableTaskSetAdded):Unit", "kind" : "def"}, {"label" : "onSpeculativeTaskSubmitted", "tail" : "(speculativeTask: SparkListenerSpeculativeTaskSubmitted): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onSpeculativeTaskSubmitted", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onSpeculativeTaskSubmitted(speculativeTask:org.apache.spark.scheduler.SparkListenerSpeculativeTaskSubmitted):Unit", "kind" : "def"}, {"label" : "onBlockUpdated", "tail" : "(blockUpdated: SparkListenerBlockUpdated): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onBlockUpdated", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onBlockUpdated(blockUpdated:org.apache.spark.scheduler.SparkListenerBlockUpdated):Unit", "kind" : "def"}, {"label" : "onNodeUnexcluded", "tail" : "(nodeUnexcluded: SparkListenerNodeUnexcluded): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onNodeUnexcluded", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onNodeUnexcluded(nodeUnexcluded:org.apache.spark.scheduler.SparkListenerNodeUnexcluded):Unit", "kind" : "final def"}, {"label" : "onNodeUnblacklisted", "tail" : "(nodeUnblacklisted: SparkListenerNodeUnblacklisted): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onNodeUnblacklisted", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onNodeUnblacklisted(nodeUnblacklisted:org.apache.spark.scheduler.SparkListenerNodeUnblacklisted):Unit", "kind" : "final def"}, {"label" : "onNodeExcluded", "tail" : "(nodeExcluded: SparkListenerNodeExcluded): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onNodeExcluded", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onNodeExcluded(nodeExcluded:org.apache.spark.scheduler.SparkListenerNodeExcluded):Unit", "kind" : "final def"}, {"label" : "onNodeBlacklisted", "tail" : "(nodeBlacklisted: SparkListenerNodeBlacklisted): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onNodeBlacklisted", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onNodeBlacklisted(nodeBlacklisted:org.apache.spark.scheduler.SparkListenerNodeBlacklisted):Unit", "kind" : "final def"}, {"label" : "onExecutorUnexcluded", "tail" : "(executorUnexcluded: SparkListenerExecutorUnexcluded): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorUnexcluded", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorUnexcluded(executorUnexcluded:org.apache.spark.scheduler.SparkListenerExecutorUnexcluded):Unit", "kind" : "final def"}, {"label" : "onExecutorUnblacklisted", "tail" : "(executorUnblacklisted: SparkListenerExecutorUnblacklisted): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorUnblacklisted", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorUnblacklisted(executorUnblacklisted:org.apache.spark.scheduler.SparkListenerExecutorUnblacklisted):Unit", "kind" : "final def"}, {"label" : "onNodeExcludedForStage", "tail" : "(nodeExcludedForStage: SparkListenerNodeExcludedForStage): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onNodeExcludedForStage", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onNodeExcludedForStage(nodeExcludedForStage:org.apache.spark.scheduler.SparkListenerNodeExcludedForStage):Unit", "kind" : "def"}, {"label" : "onNodeBlacklistedForStage", "tail" : "(nodeBlacklistedForStage: SparkListenerNodeBlacklistedForStage): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onNodeBlacklistedForStage", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onNodeBlacklistedForStage(nodeBlacklistedForStage:org.apache.spark.scheduler.SparkListenerNodeBlacklistedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorExcludedForStage", "tail" : "(executorExcludedForStage: SparkListenerExecutorExcludedForStage): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorExcludedForStage", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorExcludedForStage(executorExcludedForStage:org.apache.spark.scheduler.SparkListenerExecutorExcludedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorBlacklistedForStage", "tail" : "(executorBlacklistedForStage: SparkListenerExecutorBlacklistedForStage): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorBlacklistedForStage", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorBlacklistedForStage(executorBlacklistedForStage:org.apache.spark.scheduler.SparkListenerExecutorBlacklistedForStage):Unit", "kind" : "def"}, {"label" : "onExecutorExcluded", "tail" : "(executorExcluded: SparkListenerExecutorExcluded): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorExcluded", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorExcluded(executorExcluded:org.apache.spark.scheduler.SparkListenerExecutorExcluded):Unit", "kind" : "final def"}, {"label" : "onExecutorBlacklisted", "tail" : "(executorBlacklisted: SparkListenerExecutorBlacklisted): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorBlacklisted", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorBlacklisted(executorBlacklisted:org.apache.spark.scheduler.SparkListenerExecutorBlacklisted):Unit", "kind" : "final def"}, {"label" : "onExecutorRemoved", "tail" : "(executorRemoved: SparkListenerExecutorRemoved): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorRemoved", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorRemoved(executorRemoved:org.apache.spark.scheduler.SparkListenerExecutorRemoved):Unit", "kind" : "final def"}, {"label" : "onExecutorAdded", "tail" : "(executorAdded: SparkListenerExecutorAdded): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorAdded", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorAdded(executorAdded:org.apache.spark.scheduler.SparkListenerExecutorAdded):Unit", "kind" : "final def"}, {"label" : "onStageExecutorMetrics", "tail" : "(executorMetrics: SparkListenerStageExecutorMetrics): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onStageExecutorMetrics", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onStageExecutorMetrics(executorMetrics:org.apache.spark.scheduler.SparkListenerStageExecutorMetrics):Unit", "kind" : "final def"}, {"label" : "onExecutorMetricsUpdate", "tail" : "(executorMetricsUpdate: SparkListenerExecutorMetricsUpdate): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onExecutorMetricsUpdate", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onExecutorMetricsUpdate(executorMetricsUpdate:org.apache.spark.scheduler.SparkListenerExecutorMetricsUpdate):Unit", "kind" : "final def"}, {"label" : "onApplicationEnd", "tail" : "(applicationEnd: SparkListenerApplicationEnd): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onApplicationEnd", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onApplicationEnd(applicationEnd:org.apache.spark.scheduler.SparkListenerApplicationEnd):Unit", "kind" : "final def"}, {"label" : "onApplicationStart", "tail" : "(applicationStart: SparkListenerApplicationStart): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onApplicationStart", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onApplicationStart(applicationStart:org.apache.spark.scheduler.SparkListenerApplicationStart):Unit", "kind" : "final def"}, {"label" : "onUnpersistRDD", "tail" : "(unpersistRDD: SparkListenerUnpersistRDD): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onUnpersistRDD", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onUnpersistRDD(unpersistRDD:org.apache.spark.scheduler.SparkListenerUnpersistRDD):Unit", "kind" : "final def"}, {"label" : "onBlockManagerRemoved", "tail" : "(blockManagerRemoved: SparkListenerBlockManagerRemoved): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onBlockManagerRemoved", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onBlockManagerRemoved(blockManagerRemoved:org.apache.spark.scheduler.SparkListenerBlockManagerRemoved):Unit", "kind" : "final def"}, {"label" : "onBlockManagerAdded", "tail" : "(blockManagerAdded: SparkListenerBlockManagerAdded): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onBlockManagerAdded", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onBlockManagerAdded(blockManagerAdded:org.apache.spark.scheduler.SparkListenerBlockManagerAdded):Unit", "kind" : "final def"}, {"label" : "onEnvironmentUpdate", "tail" : "(environmentUpdate: SparkListenerEnvironmentUpdate): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onEnvironmentUpdate", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onEnvironmentUpdate(environmentUpdate:org.apache.spark.scheduler.SparkListenerEnvironmentUpdate):Unit", "kind" : "final def"}, {"label" : "onJobEnd", "tail" : "(jobEnd: SparkListenerJobEnd): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onJobEnd", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onJobEnd(jobEnd:org.apache.spark.scheduler.SparkListenerJobEnd):Unit", "kind" : "final def"}, {"label" : "onJobStart", "tail" : "(jobStart: SparkListenerJobStart): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onJobStart", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onJobStart(jobStart:org.apache.spark.scheduler.SparkListenerJobStart):Unit", "kind" : "final def"}, {"label" : "onTaskEnd", "tail" : "(taskEnd: SparkListenerTaskEnd): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onTaskEnd", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onTaskEnd(taskEnd:org.apache.spark.scheduler.SparkListenerTaskEnd):Unit", "kind" : "final def"}, {"label" : "onTaskGettingResult", "tail" : "(taskGettingResult: SparkListenerTaskGettingResult): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onTaskGettingResult", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onTaskGettingResult(taskGettingResult:org.apache.spark.scheduler.SparkListenerTaskGettingResult):Unit", "kind" : "final def"}, {"label" : "onTaskStart", "tail" : "(taskStart: SparkListenerTaskStart): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onTaskStart", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onTaskStart(taskStart:org.apache.spark.scheduler.SparkListenerTaskStart):Unit", "kind" : "final def"}, {"label" : "onStageSubmitted", "tail" : "(stageSubmitted: SparkListenerStageSubmitted): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onStageSubmitted", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onStageSubmitted(stageSubmitted:org.apache.spark.scheduler.SparkListenerStageSubmitted):Unit", "kind" : "final def"}, {"label" : "onStageCompleted", "tail" : "(stageCompleted: SparkListenerStageCompleted): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onStageCompleted", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onStageCompleted(stageCompleted:org.apache.spark.scheduler.SparkListenerStageCompleted):Unit", "kind" : "final def"}, {"label" : "onEvent", "tail" : "(event: SparkListenerEvent): Unit", "member" : "org.apache.spark.SparkFirehoseListener.onEvent", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#onEvent(event:org.apache.spark.scheduler.SparkListenerEvent):Unit", "kind" : "def"}, {"member" : "org.apache.spark.SparkFirehoseListener#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkFirehoseListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkFirehoseListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/SparkFirehoseListener.html", "kind" : "class"}, {"name" : "org.apache.spark.SparkJobInfo", "members_trait" : [{"member" : "org.apache.spark.SparkJobInfo#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkJobInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkJobInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkJobInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkJobInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkJobInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkJobInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkJobInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkJobInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkJobInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkJobInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkJobInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkJobInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkJobInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkJobInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkJobInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkJobInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkJobInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkJobInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkJobInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "status", "tail" : "(): JobExecutionStatus", "member" : "org.apache.spark.SparkJobInfo.status", "link" : "org\/apache\/spark\/SparkJobInfo.html#status():org.apache.spark.JobExecutionStatus", "kind" : "abstract def"}, {"label" : "stageIds", "tail" : "(): Array[Int]", "member" : "org.apache.spark.SparkJobInfo.stageIds", "link" : "org\/apache\/spark\/SparkJobInfo.html#stageIds():Array[Int]", "kind" : "abstract def"}, {"label" : "jobId", "tail" : "(): Int", "member" : "org.apache.spark.SparkJobInfo.jobId", "link" : "org\/apache\/spark\/SparkJobInfo.html#jobId():Int", "kind" : "abstract def"}], "shortDescription" : "Exposes information about Spark Jobs.", "trait" : "org\/apache\/spark\/SparkJobInfo.html", "kind" : "trait"}, {"name" : "org.apache.spark.SparkStageInfo", "members_trait" : [{"member" : "org.apache.spark.SparkStageInfo#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkStageInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkStageInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkStageInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkStageInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkStageInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkStageInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkStageInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkStageInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkStageInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkStageInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkStageInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkStageInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkStageInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkStageInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkStageInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkStageInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkStageInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkStageInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkStageInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "numFailedTasks", "tail" : "(): Int", "member" : "org.apache.spark.SparkStageInfo.numFailedTasks", "link" : "org\/apache\/spark\/SparkStageInfo.html#numFailedTasks():Int", "kind" : "abstract def"}, {"label" : "numCompletedTasks", "tail" : "(): Int", "member" : "org.apache.spark.SparkStageInfo.numCompletedTasks", "link" : "org\/apache\/spark\/SparkStageInfo.html#numCompletedTasks():Int", "kind" : "abstract def"}, {"label" : "numActiveTasks", "tail" : "(): Int", "member" : "org.apache.spark.SparkStageInfo.numActiveTasks", "link" : "org\/apache\/spark\/SparkStageInfo.html#numActiveTasks():Int", "kind" : "abstract def"}, {"label" : "numTasks", "tail" : "(): Int", "member" : "org.apache.spark.SparkStageInfo.numTasks", "link" : "org\/apache\/spark\/SparkStageInfo.html#numTasks():Int", "kind" : "abstract def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.SparkStageInfo.name", "link" : "org\/apache\/spark\/SparkStageInfo.html#name():String", "kind" : "abstract def"}, {"label" : "submissionTime", "tail" : "(): Long", "member" : "org.apache.spark.SparkStageInfo.submissionTime", "link" : "org\/apache\/spark\/SparkStageInfo.html#submissionTime():Long", "kind" : "abstract def"}, {"label" : "currentAttemptId", "tail" : "(): Int", "member" : "org.apache.spark.SparkStageInfo.currentAttemptId", "link" : "org\/apache\/spark\/SparkStageInfo.html#currentAttemptId():Int", "kind" : "abstract def"}, {"label" : "stageId", "tail" : "(): Int", "member" : "org.apache.spark.SparkStageInfo.stageId", "link" : "org\/apache\/spark\/SparkStageInfo.html#stageId():Int", "kind" : "abstract def"}], "shortDescription" : "Exposes information about Spark Stages.", "trait" : "org\/apache\/spark\/SparkStageInfo.html", "kind" : "trait"}, {"name" : "org.apache.spark.SparkStatusTracker", "shortDescription" : "Low-level status reporting APIs for monitoring job and stage progress.", "members_class" : [{"label" : "getExecutorInfos", "tail" : "(): Array[SparkExecutorInfo]", "member" : "org.apache.spark.SparkStatusTracker.getExecutorInfos", "link" : "org\/apache\/spark\/SparkStatusTracker.html#getExecutorInfos:Array[org.apache.spark.SparkExecutorInfo]", "kind" : "def"}, {"label" : "getStageInfo", "tail" : "(stageId: Int): Option[SparkStageInfo]", "member" : "org.apache.spark.SparkStatusTracker.getStageInfo", "link" : "org\/apache\/spark\/SparkStatusTracker.html#getStageInfo(stageId:Int):Option[org.apache.spark.SparkStageInfo]", "kind" : "def"}, {"label" : "getJobInfo", "tail" : "(jobId: Int): Option[SparkJobInfo]", "member" : "org.apache.spark.SparkStatusTracker.getJobInfo", "link" : "org\/apache\/spark\/SparkStatusTracker.html#getJobInfo(jobId:Int):Option[org.apache.spark.SparkJobInfo]", "kind" : "def"}, {"label" : "getActiveJobIds", "tail" : "(): Array[Int]", "member" : "org.apache.spark.SparkStatusTracker.getActiveJobIds", "link" : "org\/apache\/spark\/SparkStatusTracker.html#getActiveJobIds():Array[Int]", "kind" : "def"}, {"label" : "getActiveStageIds", "tail" : "(): Array[Int]", "member" : "org.apache.spark.SparkStatusTracker.getActiveStageIds", "link" : "org\/apache\/spark\/SparkStatusTracker.html#getActiveStageIds():Array[Int]", "kind" : "def"}, {"label" : "getJobIdsForGroup", "tail" : "(jobGroup: String): Array[Int]", "member" : "org.apache.spark.SparkStatusTracker.getJobIdsForGroup", "link" : "org\/apache\/spark\/SparkStatusTracker.html#getJobIdsForGroup(jobGroup:String):Array[Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkStatusTracker.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkStatusTracker.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkStatusTracker.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkStatusTracker.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkStatusTracker.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkStatusTracker.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkStatusTracker.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkStatusTracker.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkStatusTracker.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkStatusTracker.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkStatusTracker.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkStatusTracker.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkStatusTracker.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkStatusTracker.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkStatusTracker.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkStatusTracker.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkStatusTracker.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkStatusTracker.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkStatusTracker.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/SparkStatusTracker.html", "kind" : "class"}, {"name" : "org.apache.spark.SparkThrowable", "members_trait" : [{"member" : "org.apache.spark.SparkThrowable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/SparkThrowable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/SparkThrowable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/SparkThrowable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/SparkThrowable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/SparkThrowable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/SparkThrowable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/SparkThrowable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkThrowable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkThrowable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/SparkThrowable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/SparkThrowable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/SparkThrowable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/SparkThrowable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/SparkThrowable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/SparkThrowable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/SparkThrowable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/SparkThrowable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/SparkThrowable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/SparkThrowable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getSqlState", "tail" : "(): String", "member" : "org.apache.spark.SparkThrowable.getSqlState", "link" : "org\/apache\/spark\/SparkThrowable.html#getSqlState():String", "kind" : "abstract def"}, {"label" : "getErrorClass", "tail" : "(): String", "member" : "org.apache.spark.SparkThrowable.getErrorClass", "link" : "org\/apache\/spark\/SparkThrowable.html#getErrorClass():String", "kind" : "abstract def"}], "shortDescription" : "Interface mixed into Throwables thrown from Spark.", "trait" : "org\/apache\/spark\/SparkThrowable.html", "kind" : "trait"}, {"name" : "org.apache.spark.Success", "shortDescription" : ":: DeveloperApi ::Task succeeded.", "object" : "org\/apache\/spark\/Success$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/Success$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/Success$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/Success$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/Success$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/Success$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/Success$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/Success$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Success$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Success$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/Success$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/Success$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/Success$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/Success$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/Success$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/Success$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/Success$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/Success$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.TaskCommitDenied", "shortDescription" : ":: DeveloperApi ::Task requested the driver to commit, but was denied.", "members_case class" : [{"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskCommitDenied.countTowardsTaskFailures", "link" : "org\/apache\/spark\/TaskCommitDenied.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.TaskCommitDenied.toErrorString", "link" : "org\/apache\/spark\/TaskCommitDenied.html#toErrorString:String", "kind" : "def"}, {"member" : "org.apache.spark.TaskCommitDenied#<init>", "error" : "unsupported entity"}, {"label" : "attemptNumber", "tail" : ": Int", "member" : "org.apache.spark.TaskCommitDenied.attemptNumber", "link" : "org\/apache\/spark\/TaskCommitDenied.html#attemptNumber:Int", "kind" : "val"}, {"label" : "partitionID", "tail" : ": Int", "member" : "org.apache.spark.TaskCommitDenied.partitionID", "link" : "org\/apache\/spark\/TaskCommitDenied.html#partitionID:Int", "kind" : "val"}, {"label" : "jobID", "tail" : ": Int", "member" : "org.apache.spark.TaskCommitDenied.jobID", "link" : "org\/apache\/spark\/TaskCommitDenied.html#jobID:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/TaskCommitDenied.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/TaskCommitDenied.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/TaskCommitDenied.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/TaskCommitDenied.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/TaskCommitDenied.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/TaskCommitDenied.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/TaskCommitDenied.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskCommitDenied.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskCommitDenied.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskCommitDenied.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/TaskCommitDenied.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/TaskCommitDenied.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/TaskCommitDenied.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/TaskCommitDenied.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/TaskCommitDenied.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/TaskCommitDenied.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/TaskCommitDenied.html", "kind" : "case class"}, {"name" : "org.apache.spark.TaskContext", "shortDescription" : "", "object" : "org\/apache\/spark\/TaskContext$.html", "members_class" : [{"label" : "addTaskFailureListener", "tail" : "(f: (TaskContext, Throwable) ⇒ Unit): TaskContext", "member" : "org.apache.spark.TaskContext.addTaskFailureListener", "link" : "org\/apache\/spark\/TaskContext.html#addTaskFailureListener(f:(org.apache.spark.TaskContext,Throwable)=>Unit):org.apache.spark.TaskContext", "kind" : "def"}, {"label" : "addTaskCompletionListener", "tail" : "(f: (TaskContext) ⇒ U): TaskContext", "member" : "org.apache.spark.TaskContext.addTaskCompletionListener", "link" : "org\/apache\/spark\/TaskContext.html#addTaskCompletionListener[U](f:org.apache.spark.TaskContext=>U):org.apache.spark.TaskContext", "kind" : "def"}, {"member" : "org.apache.spark.TaskContext#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/TaskContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/TaskContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/TaskContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/TaskContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/TaskContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/TaskContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/TaskContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/TaskContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/TaskContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/TaskContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/TaskContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/TaskContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/TaskContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/TaskContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/TaskContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/TaskContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getMetricsSources", "tail" : "(sourceName: String): Seq[Source]", "member" : "org.apache.spark.TaskContext.getMetricsSources", "link" : "org\/apache\/spark\/TaskContext.html#getMetricsSources(sourceName:String):Seq[org.apache.spark.metrics.source.Source]", "kind" : "abstract def"}, {"label" : "taskMetrics", "tail" : "(): TaskMetrics", "member" : "org.apache.spark.TaskContext.taskMetrics", "link" : "org\/apache\/spark\/TaskContext.html#taskMetrics():org.apache.spark.executor.TaskMetrics", "kind" : "abstract def"}, {"label" : "resourcesJMap", "tail" : "(): Map[String, ResourceInformation]", "member" : "org.apache.spark.TaskContext.resourcesJMap", "link" : "org\/apache\/spark\/TaskContext.html#resourcesJMap():java.util.Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "abstract def"}, {"label" : "resources", "tail" : "(): Map[String, ResourceInformation]", "member" : "org.apache.spark.TaskContext.resources", "link" : "org\/apache\/spark\/TaskContext.html#resources():Map[String,org.apache.spark.resource.ResourceInformation]", "kind" : "abstract def"}, {"label" : "getLocalProperty", "tail" : "(key: String): String", "member" : "org.apache.spark.TaskContext.getLocalProperty", "link" : "org\/apache\/spark\/TaskContext.html#getLocalProperty(key:String):String", "kind" : "abstract def"}, {"label" : "taskAttemptId", "tail" : "(): Long", "member" : "org.apache.spark.TaskContext.taskAttemptId", "link" : "org\/apache\/spark\/TaskContext.html#taskAttemptId():Long", "kind" : "abstract def"}, {"label" : "attemptNumber", "tail" : "(): Int", "member" : "org.apache.spark.TaskContext.attemptNumber", "link" : "org\/apache\/spark\/TaskContext.html#attemptNumber():Int", "kind" : "abstract def"}, {"label" : "partitionId", "tail" : "(): Int", "member" : "org.apache.spark.TaskContext.partitionId", "link" : "org\/apache\/spark\/TaskContext.html#partitionId():Int", "kind" : "abstract def"}, {"label" : "stageAttemptNumber", "tail" : "(): Int", "member" : "org.apache.spark.TaskContext.stageAttemptNumber", "link" : "org\/apache\/spark\/TaskContext.html#stageAttemptNumber():Int", "kind" : "abstract def"}, {"label" : "stageId", "tail" : "(): Int", "member" : "org.apache.spark.TaskContext.stageId", "link" : "org\/apache\/spark\/TaskContext.html#stageId():Int", "kind" : "abstract def"}, {"label" : "addTaskFailureListener", "tail" : "(listener: TaskFailureListener): TaskContext", "member" : "org.apache.spark.TaskContext.addTaskFailureListener", "link" : "org\/apache\/spark\/TaskContext.html#addTaskFailureListener(listener:org.apache.spark.util.TaskFailureListener):org.apache.spark.TaskContext", "kind" : "abstract def"}, {"label" : "addTaskCompletionListener", "tail" : "(listener: TaskCompletionListener): TaskContext", "member" : "org.apache.spark.TaskContext.addTaskCompletionListener", "link" : "org\/apache\/spark\/TaskContext.html#addTaskCompletionListener(listener:org.apache.spark.util.TaskCompletionListener):org.apache.spark.TaskContext", "kind" : "abstract def"}, {"label" : "isInterrupted", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskContext.isInterrupted", "link" : "org\/apache\/spark\/TaskContext.html#isInterrupted():Boolean", "kind" : "abstract def"}, {"label" : "isCompleted", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskContext.isCompleted", "link" : "org\/apache\/spark\/TaskContext.html#isCompleted():Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "unset", "tail" : "(): Unit", "member" : "org.apache.spark.TaskContext.unset", "link" : "org\/apache\/spark\/TaskContext$.html#unset():Unit", "kind" : "def"}, {"label" : "setTaskContext", "tail" : "(tc: TaskContext): Unit", "member" : "org.apache.spark.TaskContext.setTaskContext", "link" : "org\/apache\/spark\/TaskContext$.html#setTaskContext(tc:org.apache.spark.TaskContext):Unit", "kind" : "def"}, {"label" : "getPartitionId", "tail" : "(): Int", "member" : "org.apache.spark.TaskContext.getPartitionId", "link" : "org\/apache\/spark\/TaskContext$.html#getPartitionId():Int", "kind" : "def"}, {"label" : "get", "tail" : "(): TaskContext", "member" : "org.apache.spark.TaskContext.get", "link" : "org\/apache\/spark\/TaskContext$.html#get():org.apache.spark.TaskContext", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/TaskContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/TaskContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/TaskContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/TaskContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/TaskContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/TaskContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/TaskContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/TaskContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/TaskContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/TaskContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/TaskContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/TaskContext$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/TaskContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/TaskContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/TaskContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/TaskContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/TaskContext.html", "kind" : "object"}, {"name" : "org.apache.spark.TaskEndReason", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/TaskEndReason.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/TaskEndReason.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/TaskEndReason.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/TaskEndReason.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/TaskEndReason.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/TaskEndReason.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/TaskEndReason.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskEndReason.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskEndReason.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskEndReason.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/TaskEndReason.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/TaskEndReason.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/TaskEndReason.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/TaskEndReason.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/TaskEndReason.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/TaskEndReason.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/TaskEndReason.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/TaskEndReason.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/TaskEndReason.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ":: DeveloperApi ::Various possible reasons why a task ended.", "trait" : "org\/apache\/spark\/TaskEndReason.html", "kind" : "trait"}, {"name" : "org.apache.spark.TaskFailedReason", "members_trait" : [{"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskFailedReason.countTowardsTaskFailures", "link" : "org\/apache\/spark\/TaskFailedReason.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/TaskFailedReason.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/TaskFailedReason.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/TaskFailedReason.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/TaskFailedReason.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/TaskFailedReason.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/TaskFailedReason.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/TaskFailedReason.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskFailedReason.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskFailedReason.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskFailedReason.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/TaskFailedReason.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/TaskFailedReason.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/TaskFailedReason.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/TaskFailedReason.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/TaskFailedReason.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/TaskFailedReason.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/TaskFailedReason.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/TaskFailedReason.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/TaskFailedReason.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.TaskFailedReason.toErrorString", "link" : "org\/apache\/spark\/TaskFailedReason.html#toErrorString:String", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::Various possible reasons why a task failed.", "trait" : "org\/apache\/spark\/TaskFailedReason.html", "kind" : "trait"}, {"name" : "org.apache.spark.TaskKilled", "shortDescription" : ":: DeveloperApi ::Task was killed intentionally and needs to be rescheduled.", "members_case class" : [{"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskKilled.countTowardsTaskFailures", "link" : "org\/apache\/spark\/TaskKilled.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.TaskKilled.toErrorString", "link" : "org\/apache\/spark\/TaskKilled.html#toErrorString:String", "kind" : "def"}, {"member" : "org.apache.spark.TaskKilled#<init>", "error" : "unsupported entity"}, {"label" : "metricPeaks", "tail" : ": Seq[Long]", "member" : "org.apache.spark.TaskKilled.metricPeaks", "link" : "org\/apache\/spark\/TaskKilled.html#metricPeaks:Seq[Long]", "kind" : "val"}, {"label" : "accumUpdates", "tail" : ": Seq[AccumulableInfo]", "member" : "org.apache.spark.TaskKilled.accumUpdates", "link" : "org\/apache\/spark\/TaskKilled.html#accumUpdates:Seq[org.apache.spark.scheduler.AccumulableInfo]", "kind" : "val"}, {"label" : "reason", "tail" : ": String", "member" : "org.apache.spark.TaskKilled.reason", "link" : "org\/apache\/spark\/TaskKilled.html#reason:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/TaskKilled.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/TaskKilled.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/TaskKilled.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/TaskKilled.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/TaskKilled.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/TaskKilled.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/TaskKilled.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskKilled.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskKilled.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskKilled.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/TaskKilled.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/TaskKilled.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/TaskKilled.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/TaskKilled.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/TaskKilled.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/TaskKilled.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/TaskKilled.html", "kind" : "case class"}, {"name" : "org.apache.spark.TaskKilledException", "shortDescription" : ":: DeveloperApi ::Exception thrown when a task is explicitly killed (i.e., task failure is expected).", "members_class" : [{"member" : "org.apache.spark.TaskKilledException#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.TaskKilledException#<init>", "error" : "unsupported entity"}, {"label" : "reason", "tail" : ": String", "member" : "org.apache.spark.TaskKilledException.reason", "link" : "org\/apache\/spark\/TaskKilledException.html#reason:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/apache\/spark\/TaskKilledException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/apache\/spark\/TaskKilledException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/apache\/spark\/TaskKilledException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/apache\/spark\/TaskKilledException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/apache\/spark\/TaskKilledException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/TaskKilledException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/TaskKilledException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/TaskKilledException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/apache\/spark\/TaskKilledException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/apache\/spark\/TaskKilledException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/apache\/spark\/TaskKilledException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/apache\/spark\/TaskKilledException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/apache\/spark\/TaskKilledException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/TaskKilledException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/TaskKilledException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/TaskKilledException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/TaskKilledException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/TaskKilledException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/TaskKilledException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/TaskKilledException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskKilledException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskKilledException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskKilledException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/TaskKilledException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/TaskKilledException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/TaskKilledException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/TaskKilledException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/TaskKilledException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/TaskKilledException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/TaskKilledException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/TaskKilledException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/TaskKilledException.html", "kind" : "class"}, {"name" : "org.apache.spark.TaskResultLost", "shortDescription" : ":: DeveloperApi ::The task finished successfully, but the result was lost from the executor's block manager beforeit was fetched.", "object" : "org\/apache\/spark\/TaskResultLost$.html", "members_object" : [{"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.TaskResultLost.toErrorString", "link" : "org\/apache\/spark\/TaskResultLost$.html#toErrorString:String", "kind" : "def"}, {"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskFailedReason.countTowardsTaskFailures", "link" : "org\/apache\/spark\/TaskResultLost$.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/TaskResultLost$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/TaskResultLost$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/TaskResultLost$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/TaskResultLost$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/TaskResultLost$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/TaskResultLost$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/TaskResultLost$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskResultLost$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskResultLost$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/TaskResultLost$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/TaskResultLost$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/TaskResultLost$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/TaskResultLost$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/TaskResultLost$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/TaskResultLost$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/TaskResultLost$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/TaskResultLost$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.UnknownReason", "shortDescription" : ":: DeveloperApi ::We don't know why the task ended -- for example, because of a ClassNotFound exception whendeserializing the task result.", "object" : "org\/apache\/spark\/UnknownReason$.html", "members_object" : [{"label" : "toErrorString", "tail" : "(): String", "member" : "org.apache.spark.UnknownReason.toErrorString", "link" : "org\/apache\/spark\/UnknownReason$.html#toErrorString:String", "kind" : "def"}, {"label" : "countTowardsTaskFailures", "tail" : "(): Boolean", "member" : "org.apache.spark.TaskFailedReason.countTowardsTaskFailures", "link" : "org\/apache\/spark\/UnknownReason$.html#countTowardsTaskFailures:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/UnknownReason$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/UnknownReason$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/UnknownReason$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/UnknownReason$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/UnknownReason$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/UnknownReason$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/UnknownReason$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/UnknownReason$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/UnknownReason$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/UnknownReason$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/UnknownReason$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/UnknownReason$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/UnknownReason$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/UnknownReason$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/UnknownReason$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/UnknownReason$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/UnknownReason$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.WritableConverter", "shortDescription" : "", "object" : "org\/apache\/spark\/WritableConverter$.html", "members_object" : [{"label" : "writableWritableConverter", "tail" : "(): WritableConverter[T]", "member" : "org.apache.spark.WritableConverter.writableWritableConverter", "link" : "org\/apache\/spark\/WritableConverter$.html#writableWritableConverter[T<:org.apache.hadoop.io.Writable]():org.apache.spark.WritableConverter[T]", "kind" : "implicit def"}, {"label" : "stringWritableConverter", "tail" : "(): WritableConverter[String]", "member" : "org.apache.spark.WritableConverter.stringWritableConverter", "link" : "org\/apache\/spark\/WritableConverter$.html#stringWritableConverter():org.apache.spark.WritableConverter[String]", "kind" : "implicit def"}, {"label" : "bytesWritableConverter", "tail" : "(): WritableConverter[Array[Byte]]", "member" : "org.apache.spark.WritableConverter.bytesWritableConverter", "link" : "org\/apache\/spark\/WritableConverter$.html#bytesWritableConverter():org.apache.spark.WritableConverter[Array[Byte]]", "kind" : "implicit def"}, {"label" : "booleanWritableConverter", "tail" : "(): WritableConverter[Boolean]", "member" : "org.apache.spark.WritableConverter.booleanWritableConverter", "link" : "org\/apache\/spark\/WritableConverter$.html#booleanWritableConverter():org.apache.spark.WritableConverter[Boolean]", "kind" : "implicit def"}, {"label" : "floatWritableConverter", "tail" : "(): WritableConverter[Float]", "member" : "org.apache.spark.WritableConverter.floatWritableConverter", "link" : "org\/apache\/spark\/WritableConverter$.html#floatWritableConverter():org.apache.spark.WritableConverter[Float]", "kind" : "implicit def"}, {"label" : "doubleWritableConverter", "tail" : "(): WritableConverter[Double]", "member" : "org.apache.spark.WritableConverter.doubleWritableConverter", "link" : "org\/apache\/spark\/WritableConverter$.html#doubleWritableConverter():org.apache.spark.WritableConverter[Double]", "kind" : "implicit def"}, {"label" : "longWritableConverter", "tail" : "(): WritableConverter[Long]", "member" : "org.apache.spark.WritableConverter.longWritableConverter", "link" : "org\/apache\/spark\/WritableConverter$.html#longWritableConverter():org.apache.spark.WritableConverter[Long]", "kind" : "implicit def"}, {"label" : "intWritableConverter", "tail" : "(): WritableConverter[Int]", "member" : "org.apache.spark.WritableConverter.intWritableConverter", "link" : "org\/apache\/spark\/WritableConverter$.html#intWritableConverter():org.apache.spark.WritableConverter[Int]", "kind" : "implicit def"}, {"label" : "writableWritableConverterFn", "tail" : "(arg0: ClassTag[T]): () ⇒ WritableConverter[T]", "member" : "org.apache.spark.WritableConverter.writableWritableConverterFn", "link" : "org\/apache\/spark\/WritableConverter$.html#writableWritableConverterFn[T<:org.apache.hadoop.io.Writable](implicitevidence$19:scala.reflect.ClassTag[T]):()=>org.apache.spark.WritableConverter[T]", "kind" : "implicit def"}, {"label" : "stringWritableConverterFn", "tail" : ": () ⇒ WritableConverter[String]", "member" : "org.apache.spark.WritableConverter.stringWritableConverterFn", "link" : "org\/apache\/spark\/WritableConverter$.html#stringWritableConverterFn:()=>org.apache.spark.WritableConverter[String]", "kind" : "implicit val"}, {"label" : "bytesWritableConverterFn", "tail" : ": () ⇒ WritableConverter[Array[Byte]]", "member" : "org.apache.spark.WritableConverter.bytesWritableConverterFn", "link" : "org\/apache\/spark\/WritableConverter$.html#bytesWritableConverterFn:()=>org.apache.spark.WritableConverter[Array[Byte]]", "kind" : "implicit val"}, {"label" : "booleanWritableConverterFn", "tail" : ": () ⇒ WritableConverter[Boolean]", "member" : "org.apache.spark.WritableConverter.booleanWritableConverterFn", "link" : "org\/apache\/spark\/WritableConverter$.html#booleanWritableConverterFn:()=>org.apache.spark.WritableConverter[Boolean]", "kind" : "implicit val"}, {"label" : "floatWritableConverterFn", "tail" : ": () ⇒ WritableConverter[Float]", "member" : "org.apache.spark.WritableConverter.floatWritableConverterFn", "link" : "org\/apache\/spark\/WritableConverter$.html#floatWritableConverterFn:()=>org.apache.spark.WritableConverter[Float]", "kind" : "implicit val"}, {"label" : "doubleWritableConverterFn", "tail" : ": () ⇒ WritableConverter[Double]", "member" : "org.apache.spark.WritableConverter.doubleWritableConverterFn", "link" : "org\/apache\/spark\/WritableConverter$.html#doubleWritableConverterFn:()=>org.apache.spark.WritableConverter[Double]", "kind" : "implicit val"}, {"label" : "longWritableConverterFn", "tail" : ": () ⇒ WritableConverter[Long]", "member" : "org.apache.spark.WritableConverter.longWritableConverterFn", "link" : "org\/apache\/spark\/WritableConverter$.html#longWritableConverterFn:()=>org.apache.spark.WritableConverter[Long]", "kind" : "implicit val"}, {"label" : "intWritableConverterFn", "tail" : ": () ⇒ WritableConverter[Int]", "member" : "org.apache.spark.WritableConverter.intWritableConverterFn", "link" : "org\/apache\/spark\/WritableConverter$.html#intWritableConverterFn:()=>org.apache.spark.WritableConverter[Int]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/WritableConverter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/WritableConverter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/WritableConverter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/WritableConverter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/WritableConverter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/WritableConverter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/WritableConverter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/WritableConverter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/WritableConverter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/WritableConverter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/WritableConverter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/WritableConverter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/WritableConverter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/WritableConverter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/WritableConverter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/WritableConverter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/WritableConverter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/WritableConverter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/WritableConverter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.WritableFactory", "shortDescription" : "", "object" : "org\/apache\/spark\/WritableFactory$.html", "members_object" : [{"label" : "writableWritableFactory", "tail" : "(arg0: ClassTag[T]): WritableFactory[T]", "member" : "org.apache.spark.WritableFactory.writableWritableFactory", "link" : "org\/apache\/spark\/WritableFactory$.html#writableWritableFactory[T<:org.apache.hadoop.io.Writable](implicitevidence$22:scala.reflect.ClassTag[T]):org.apache.spark.WritableFactory[T]", "kind" : "implicit def"}, {"label" : "stringWritableFactory", "tail" : "(): WritableFactory[String]", "member" : "org.apache.spark.WritableFactory.stringWritableFactory", "link" : "org\/apache\/spark\/WritableFactory$.html#stringWritableFactory:org.apache.spark.WritableFactory[String]", "kind" : "implicit def"}, {"label" : "bytesWritableFactory", "tail" : "(): WritableFactory[Array[Byte]]", "member" : "org.apache.spark.WritableFactory.bytesWritableFactory", "link" : "org\/apache\/spark\/WritableFactory$.html#bytesWritableFactory:org.apache.spark.WritableFactory[Array[Byte]]", "kind" : "implicit def"}, {"label" : "booleanWritableFactory", "tail" : "(): WritableFactory[Boolean]", "member" : "org.apache.spark.WritableFactory.booleanWritableFactory", "link" : "org\/apache\/spark\/WritableFactory$.html#booleanWritableFactory:org.apache.spark.WritableFactory[Boolean]", "kind" : "implicit def"}, {"label" : "doubleWritableFactory", "tail" : "(): WritableFactory[Double]", "member" : "org.apache.spark.WritableFactory.doubleWritableFactory", "link" : "org\/apache\/spark\/WritableFactory$.html#doubleWritableFactory:org.apache.spark.WritableFactory[Double]", "kind" : "implicit def"}, {"label" : "floatWritableFactory", "tail" : "(): WritableFactory[Float]", "member" : "org.apache.spark.WritableFactory.floatWritableFactory", "link" : "org\/apache\/spark\/WritableFactory$.html#floatWritableFactory:org.apache.spark.WritableFactory[Float]", "kind" : "implicit def"}, {"label" : "longWritableFactory", "tail" : "(): WritableFactory[Long]", "member" : "org.apache.spark.WritableFactory.longWritableFactory", "link" : "org\/apache\/spark\/WritableFactory$.html#longWritableFactory:org.apache.spark.WritableFactory[Long]", "kind" : "implicit def"}, {"label" : "intWritableFactory", "tail" : "(): WritableFactory[Int]", "member" : "org.apache.spark.WritableFactory.intWritableFactory", "link" : "org\/apache\/spark\/WritableFactory$.html#intWritableFactory:org.apache.spark.WritableFactory[Int]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/WritableFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/WritableFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/WritableFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/WritableFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/WritableFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/WritableFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/WritableFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/WritableFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/WritableFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/WritableFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/WritableFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/WritableFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/WritableFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/WritableFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/WritableFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/WritableFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/WritableFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/WritableFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/WritableFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache" : [], "org.apache.spark.mapred" : [{"name" : "org.apache.spark.mapred.SparkHadoopMapRedUtil", "shortDescription" : "", "object" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html", "members_object" : [{"label" : "commitTask", "tail" : "(committer: OutputCommitter, mrTaskContext: TaskAttemptContext, jobId: Int, splitId: Int): Unit", "member" : "org.apache.spark.mapred.SparkHadoopMapRedUtil.commitTask", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#commitTask(committer:org.apache.hadoop.mapreduce.OutputCommitter,mrTaskContext:org.apache.hadoop.mapreduce.TaskAttemptContext,jobId:Int,splitId:Int):Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/mapred\/SparkHadoopMapRedUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.deploy.history" : [{"name" : "org.apache.spark.deploy.history.CompactionResult", "shortDescription" : "Describes the result of compaction.", "members_case class" : [{"member" : "org.apache.spark.deploy.history.CompactionResult#<init>", "error" : "unsupported entity"}, {"label" : "compactIndex", "tail" : ": Option[Long]", "member" : "org.apache.spark.deploy.history.CompactionResult.compactIndex", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#compactIndex:Option[Long]", "kind" : "val"}, {"label" : "code", "tail" : ": CompactionResultCode.Value", "member" : "org.apache.spark.deploy.history.CompactionResult.code", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#code:org.apache.spark.deploy.history.CompactionResultCode.Value", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/deploy\/history\/CompactionResult.html", "kind" : "case class"}, {"name" : "org.apache.spark.deploy.history.CompactionResultCode", "shortDescription" : "", "object" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "LOW_SCORE_FOR_COMPACTION", "tail" : ": Value", "member" : "org.apache.spark.deploy.history.CompactionResultCode.LOW_SCORE_FOR_COMPACTION", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#LOW_SCORE_FOR_COMPACTION:org.apache.spark.deploy.history.CompactionResultCode.Value", "kind" : "val"}, {"label" : "NOT_ENOUGH_FILES", "tail" : ": Value", "member" : "org.apache.spark.deploy.history.CompactionResultCode.NOT_ENOUGH_FILES", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#NOT_ENOUGH_FILES:org.apache.spark.deploy.history.CompactionResultCode.Value", "kind" : "val"}, {"label" : "SUCCESS", "tail" : ": Value", "member" : "org.apache.spark.deploy.history.CompactionResultCode.SUCCESS", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#SUCCESS:org.apache.spark.deploy.history.CompactionResultCode.Value", "kind" : "val"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/CompactionResultCode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.deploy.history.EventLogFileCompactor", "shortDescription" : "This class compacts the old event log files into one compact file, via two phases reading:", "members_class" : [{"label" : "compact", "tail" : "(eventLogFiles: Seq[FileStatus]): CompactionResult", "member" : "org.apache.spark.deploy.history.EventLogFileCompactor.compact", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#compact(eventLogFiles:Seq[org.apache.hadoop.fs.FileStatus]):org.apache.spark.deploy.history.CompactionResult", "kind" : "def"}, {"member" : "org.apache.spark.deploy.history.EventLogFileCompactor#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/deploy\/history\/EventLogFileCompactor.html", "kind" : "class"}, {"name" : "org.apache.spark.deploy.history.EventLogFileReader", "shortDescription" : "The base class of reader which will read the information of event log file(s).", "object" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html", "members_class" : [{"label" : "addFileAsZipEntry", "tail" : "(zipStream: ZipOutputStream, path: Path, entryName: String): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileReader.addFileAsZipEntry", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#addFileAsZipEntry(zipStream:java.util.zip.ZipOutputStream,path:org.apache.hadoop.fs.Path,entryName:String):Unit", "kind" : "def"}, {"label" : "fileSizeForDFS", "tail" : "(path: Path): Option[Long]", "member" : "org.apache.spark.deploy.history.EventLogFileReader.fileSizeForDFS", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#fileSizeForDFS(path:org.apache.hadoop.fs.Path):Option[Long]", "kind" : "def"}, {"member" : "org.apache.spark.deploy.history.EventLogFileReader#<init>", "error" : "unsupported entity"}, {"label" : "rootPath", "tail" : ": Path", "member" : "org.apache.spark.deploy.history.EventLogFileReader.rootPath", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#rootPath:org.apache.hadoop.fs.Path", "kind" : "val"}, {"label" : "fileSystem", "tail" : ": FileSystem", "member" : "org.apache.spark.deploy.history.EventLogFileReader.fileSystem", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#fileSystem:org.apache.hadoop.fs.FileSystem", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "totalSize", "tail" : "(): Long", "member" : "org.apache.spark.deploy.history.EventLogFileReader.totalSize", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#totalSize:Long", "kind" : "abstract def"}, {"label" : "compressionCodec", "tail" : "(): Option[String]", "member" : "org.apache.spark.deploy.history.EventLogFileReader.compressionCodec", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#compressionCodec:Option[String]", "kind" : "abstract def"}, {"label" : "listEventLogFiles", "tail" : "(): Seq[FileStatus]", "member" : "org.apache.spark.deploy.history.EventLogFileReader.listEventLogFiles", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#listEventLogFiles:Seq[org.apache.hadoop.fs.FileStatus]", "kind" : "abstract def"}, {"label" : "zipEventLogFiles", "tail" : "(zipStream: ZipOutputStream): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileReader.zipEventLogFiles", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#zipEventLogFiles(zipStream:java.util.zip.ZipOutputStream):Unit", "kind" : "abstract def"}, {"label" : "modificationTime", "tail" : "(): Long", "member" : "org.apache.spark.deploy.history.EventLogFileReader.modificationTime", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#modificationTime:Long", "kind" : "abstract def"}, {"label" : "fileSizeForLastIndexForDFS", "tail" : "(): Option[Long]", "member" : "org.apache.spark.deploy.history.EventLogFileReader.fileSizeForLastIndexForDFS", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#fileSizeForLastIndexForDFS:Option[Long]", "kind" : "abstract def"}, {"label" : "completed", "tail" : "(): Boolean", "member" : "org.apache.spark.deploy.history.EventLogFileReader.completed", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#completed:Boolean", "kind" : "abstract def"}, {"label" : "fileSizeForLastIndex", "tail" : "(): Long", "member" : "org.apache.spark.deploy.history.EventLogFileReader.fileSizeForLastIndex", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#fileSizeForLastIndex:Long", "kind" : "abstract def"}, {"label" : "lastIndex", "tail" : "(): Option[Long]", "member" : "org.apache.spark.deploy.history.EventLogFileReader.lastIndex", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html#lastIndex:Option[Long]", "kind" : "abstract def"}], "members_object" : [{"label" : "openEventLog", "tail" : "(log: Path, fs: FileSystem): InputStream", "member" : "org.apache.spark.deploy.history.EventLogFileReader.openEventLog", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#openEventLog(log:org.apache.hadoop.fs.Path,fs:org.apache.hadoop.fs.FileSystem):java.io.InputStream", "kind" : "def"}, {"label" : "apply", "tail" : "(fs: FileSystem, status: FileStatus): Option[EventLogFileReader]", "member" : "org.apache.spark.deploy.history.EventLogFileReader.apply", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#apply(fs:org.apache.hadoop.fs.FileSystem,status:org.apache.hadoop.fs.FileStatus):Option[org.apache.spark.deploy.history.EventLogFileReader]", "kind" : "def"}, {"label" : "apply", "tail" : "(fs: FileSystem, path: Path): Option[EventLogFileReader]", "member" : "org.apache.spark.deploy.history.EventLogFileReader.apply", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#apply(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path):Option[org.apache.spark.deploy.history.EventLogFileReader]", "kind" : "def"}, {"label" : "apply", "tail" : "(fs: FileSystem, path: Path, lastIndex: Option[Long]): EventLogFileReader", "member" : "org.apache.spark.deploy.history.EventLogFileReader.apply", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#apply(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,lastIndex:Option[Long]):org.apache.spark.deploy.history.EventLogFileReader", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/deploy\/history\/EventLogFileReader.html", "kind" : "class"}, {"name" : "org.apache.spark.deploy.history.EventLogFileWriter", "shortDescription" : "The base class of writer which will write event logs into file.", "object" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html", "members_class" : [{"label" : "renameFile", "tail" : "(src: Path, dest: Path, overwrite: Boolean): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.renameFile", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#renameFile(src:org.apache.hadoop.fs.Path,dest:org.apache.hadoop.fs.Path,overwrite:Boolean):Unit", "kind" : "def"}, {"label" : "closeWriter", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.closeWriter", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#closeWriter():Unit", "kind" : "def"}, {"label" : "writeLine", "tail" : "(line: String, flushLogger: Boolean): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.writeLine", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#writeLine(line:String,flushLogger:Boolean):Unit", "kind" : "def"}, {"label" : "initLogFile", "tail" : "(path: Path)(fnSetupWriter: (OutputStream) ⇒ PrintWriter): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.initLogFile", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#initLogFile(path:org.apache.hadoop.fs.Path)(fnSetupWriter:java.io.OutputStream=>java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "requireLogBaseDirAsDirectory", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.requireLogBaseDirAsDirectory", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#requireLogBaseDirAsDirectory():Unit", "kind" : "def"}, {"label" : "writer", "tail" : ": Option[PrintWriter]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.writer", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#writer:Option[java.io.PrintWriter]", "kind" : "var"}, {"label" : "hadoopDataStream", "tail" : ": Option[FSDataOutputStream]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.hadoopDataStream", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#hadoopDataStream:Option[org.apache.hadoop.fs.FSDataOutputStream]", "kind" : "var"}, {"label" : "compressionCodec", "tail" : ": Option[CompressionCodec]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.compressionCodec", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#compressionCodec:Option[org.apache.spark.io.CompressionCodec]", "kind" : "val"}, {"label" : "fileSystem", "tail" : ": FileSystem", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.fileSystem", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#fileSystem:org.apache.hadoop.fs.FileSystem", "kind" : "val"}, {"label" : "outputBufferSize", "tail" : ": Int", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.outputBufferSize", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#outputBufferSize:Int", "kind" : "val"}, {"label" : "shouldOverwrite", "tail" : ": Boolean", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.shouldOverwrite", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#shouldOverwrite:Boolean", "kind" : "val"}, {"label" : "shouldCompress", "tail" : ": Boolean", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.shouldCompress", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#shouldCompress:Boolean", "kind" : "val"}, {"member" : "org.apache.spark.deploy.history.EventLogFileWriter#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "logPath", "tail" : "(): String", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.logPath", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#logPath:String", "kind" : "abstract def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.stop", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#stop():Unit", "kind" : "abstract def"}, {"label" : "writeEvent", "tail" : "(eventJson: String, flushLogger: Boolean): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.writeEvent", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#writeEvent(eventJson:String,flushLogger:Boolean):Unit", "kind" : "abstract def"}, {"label" : "start", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.start", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html#start():Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "isCompacted", "tail" : "(log: Path): Boolean", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.isCompacted", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#isCompacted(log:org.apache.hadoop.fs.Path):Boolean", "kind" : "def"}, {"label" : "codecName", "tail" : "(log: Path): Option[String]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.codecName", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#codecName(log:org.apache.hadoop.fs.Path):Option[String]", "kind" : "def"}, {"label" : "nameForAppAndAttempt", "tail" : "(appId: String, appAttemptId: Option[String]): String", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.nameForAppAndAttempt", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#nameForAppAndAttempt(appId:String,appAttemptId:Option[String]):String", "kind" : "def"}, {"label" : "apply", "tail" : "(appId: String, appAttemptId: Option[String], logBaseDir: URI, sparkConf: SparkConf, hadoopConf: Configuration): EventLogFileWriter", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.apply", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#apply(appId:String,appAttemptId:Option[String],logBaseDir:java.net.URI,sparkConf:org.apache.spark.SparkConf,hadoopConf:org.apache.hadoop.conf.Configuration):org.apache.spark.deploy.history.EventLogFileWriter", "kind" : "def"}, {"label" : "LOG_FOLDER_PERMISSIONS", "tail" : ": FsPermission", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.LOG_FOLDER_PERMISSIONS", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#LOG_FOLDER_PERMISSIONS:org.apache.hadoop.fs.permission.FsPermission", "kind" : "val"}, {"label" : "LOG_FILE_PERMISSIONS", "tail" : ": FsPermission", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.LOG_FILE_PERMISSIONS", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#LOG_FILE_PERMISSIONS:org.apache.hadoop.fs.permission.FsPermission", "kind" : "val"}, {"label" : "COMPACTED", "tail" : ": String", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.COMPACTED", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#COMPACTED:String", "kind" : "val"}, {"label" : "IN_PROGRESS", "tail" : ": String", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.IN_PROGRESS", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#IN_PROGRESS:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/deploy\/history\/EventLogFileWriter.html", "kind" : "class"}, {"name" : "org.apache.spark.deploy.history.HistoryServer", "shortDescription" : "A web server that renders SparkUIs of completed applications.", "object" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.deploy.history.HistoryServer.toString", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#toString():String", "kind" : "def"}, {"label" : "getProviderConfig", "tail" : "(): Map[String, String]", "member" : "org.apache.spark.deploy.history.HistoryServer.getProviderConfig", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getProviderConfig():Map[String,String]", "kind" : "def"}, {"label" : "emptyListingHtml", "tail" : "(): Seq[Node]", "member" : "org.apache.spark.deploy.history.HistoryServer.emptyListingHtml", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#emptyListingHtml():Seq[scala.xml.Node]", "kind" : "def"}, {"label" : "writeEventLogs", "tail" : "(appId: String, attemptId: Option[String], zipStream: ZipOutputStream): Unit", "member" : "org.apache.spark.deploy.history.HistoryServer.writeEventLogs", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#writeEventLogs(appId:String,attemptId:Option[String],zipStream:java.util.zip.ZipOutputStream):Unit", "kind" : "def"}, {"label" : "getApplicationInfo", "tail" : "(appId: String): Option[ApplicationInfo]", "member" : "org.apache.spark.deploy.history.HistoryServer.getApplicationInfo", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getApplicationInfo(appId:String):Option[org.apache.spark.status.api.v1.ApplicationInfo]", "kind" : "def"}, {"label" : "getApplicationInfoList", "tail" : "(): Iterator[ApplicationInfo]", "member" : "org.apache.spark.deploy.history.HistoryServer.getApplicationInfoList", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getApplicationInfoList:Iterator[org.apache.spark.status.api.v1.ApplicationInfo]", "kind" : "def"}, {"label" : "getLastUpdatedTime", "tail" : "(): Long", "member" : "org.apache.spark.deploy.history.HistoryServer.getLastUpdatedTime", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getLastUpdatedTime():Long", "kind" : "def"}, {"label" : "getEventLogsUnderProcess", "tail" : "(): Int", "member" : "org.apache.spark.deploy.history.HistoryServer.getEventLogsUnderProcess", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getEventLogsUnderProcess():Int", "kind" : "def"}, {"label" : "getApplicationList", "tail" : "(): Iterator[ApplicationInfo]", "member" : "org.apache.spark.deploy.history.HistoryServer.getApplicationList", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getApplicationList():Iterator[org.apache.spark.status.api.v1.ApplicationInfo]", "kind" : "def"}, {"label" : "getAppUI", "tail" : "(appId: String, attemptId: Option[String]): Option[LoadedAppUI]", "member" : "org.apache.spark.deploy.history.HistoryServer.getAppUI", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getAppUI(appId:String,attemptId:Option[String]):Option[org.apache.spark.deploy.history.LoadedAppUI]", "kind" : "def"}, {"label" : "detachSparkUI", "tail" : "(appId: String, attemptId: Option[String], ui: SparkUI): Unit", "member" : "org.apache.spark.deploy.history.HistoryServer.detachSparkUI", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#detachSparkUI(appId:String,attemptId:Option[String],ui:org.apache.spark.ui.SparkUI):Unit", "kind" : "def"}, {"label" : "attachSparkUI", "tail" : "(appId: String, attemptId: Option[String], ui: SparkUI, completed: Boolean): Unit", "member" : "org.apache.spark.deploy.history.HistoryServer.attachSparkUI", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#attachSparkUI(appId:String,attemptId:Option[String],ui:org.apache.spark.ui.SparkUI,completed:Boolean):Unit", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.HistoryServer.stop", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#stop():Unit", "kind" : "def"}, {"label" : "bind", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.HistoryServer.bind", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#bind():Unit", "kind" : "def"}, {"label" : "initialize", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.HistoryServer.initialize", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#initialize():Unit", "kind" : "def"}, {"label" : "checkUIViewPermissions", "tail" : "(appId: String, attemptId: Option[String], user: String): Boolean", "member" : "org.apache.spark.deploy.history.HistoryServer.checkUIViewPermissions", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#checkUIViewPermissions(appId:String,attemptId:Option[String],user:String):Boolean", "kind" : "def"}, {"label" : "withSparkUI", "tail" : "(appId: String, attemptId: Option[String])(fn: (SparkUI) ⇒ T): T", "member" : "org.apache.spark.deploy.history.HistoryServer.withSparkUI", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#withSparkUI[T](appId:String,attemptId:Option[String])(fn:org.apache.spark.ui.SparkUI=>T):T", "kind" : "def"}, {"label" : "cacheMetrics", "tail" : ": CacheMetrics", "member" : "org.apache.spark.deploy.history.HistoryServer.cacheMetrics", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#cacheMetrics:org.apache.spark.deploy.history.CacheMetrics", "kind" : "val"}, {"member" : "org.apache.spark.deploy.history.HistoryServer#<init>", "error" : "unsupported entity"}, {"label" : "boundPort", "tail" : "(): Int", "member" : "org.apache.spark.ui.WebUI.boundPort", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#boundPort:Int", "kind" : "def"}, {"label" : "webUrl", "tail" : "(): String", "member" : "org.apache.spark.ui.WebUI.webUrl", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#webUrl:String", "kind" : "def"}, {"label" : "scheme", "tail" : "(): String", "member" : "org.apache.spark.ui.WebUI.scheme", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#scheme:String", "kind" : "def"}, {"label" : "isSecure", "tail" : "(): Boolean", "member" : "org.apache.spark.ui.WebUI.isSecure", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#isSecure:Boolean", "kind" : "def"}, {"label" : "addStaticHandler", "tail" : "(resourceBase: String, path: String): Unit", "member" : "org.apache.spark.ui.WebUI.addStaticHandler", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#addStaticHandler(resourceBase:String,path:String):Unit", "kind" : "def"}, {"label" : "detachHandler", "tail" : "(path: String): Unit", "member" : "org.apache.spark.ui.WebUI.detachHandler", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#detachHandler(path:String):Unit", "kind" : "def"}, {"label" : "detachHandler", "tail" : "(handler: ServletContextHandler): Unit", "member" : "org.apache.spark.ui.WebUI.detachHandler", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#detachHandler(handler:org.eclipse.jetty.servlet.ServletContextHandler):Unit", "kind" : "def"}, {"label" : "attachHandler", "tail" : "(contextPath: String, httpServlet: HttpServlet, pathSpec: String): Unit", "member" : "org.apache.spark.ui.WebUI.attachHandler", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#attachHandler(contextPath:String,httpServlet:javax.servlet.http.HttpServlet,pathSpec:String):Unit", "kind" : "def"}, {"label" : "attachHandler", "tail" : "(handler: ServletContextHandler): Unit", "member" : "org.apache.spark.ui.WebUI.attachHandler", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#attachHandler(handler:org.eclipse.jetty.servlet.ServletContextHandler):Unit", "kind" : "def"}, {"label" : "attachPage", "tail" : "(page: WebUIPage): Unit", "member" : "org.apache.spark.ui.WebUI.attachPage", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#attachPage(page:org.apache.spark.ui.WebUIPage):Unit", "kind" : "def"}, {"label" : "detachPage", "tail" : "(page: WebUIPage): Unit", "member" : "org.apache.spark.ui.WebUI.detachPage", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#detachPage(page:org.apache.spark.ui.WebUIPage):Unit", "kind" : "def"}, {"label" : "detachTab", "tail" : "(tab: WebUITab): Unit", "member" : "org.apache.spark.ui.WebUI.detachTab", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#detachTab(tab:org.apache.spark.ui.WebUITab):Unit", "kind" : "def"}, {"label" : "attachTab", "tail" : "(tab: WebUITab): Unit", "member" : "org.apache.spark.ui.WebUI.attachTab", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#attachTab(tab:org.apache.spark.ui.WebUITab):Unit", "kind" : "def"}, {"label" : "getDelegatingHandlers", "tail" : "(): Seq[DelegatingServletContextHandler]", "member" : "org.apache.spark.ui.WebUI.getDelegatingHandlers", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getDelegatingHandlers:Seq[org.apache.spark.ui.DelegatingServletContextHandler]", "kind" : "def"}, {"label" : "getHandlers", "tail" : "(): Seq[ServletContextHandler]", "member" : "org.apache.spark.ui.WebUI.getHandlers", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getHandlers:Seq[org.eclipse.jetty.servlet.ServletContextHandler]", "kind" : "def"}, {"label" : "getTabs", "tail" : "(): Seq[WebUITab]", "member" : "org.apache.spark.ui.WebUI.getTabs", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getTabs:Seq[org.apache.spark.ui.WebUITab]", "kind" : "def"}, {"label" : "getBasePath", "tail" : "(): String", "member" : "org.apache.spark.ui.WebUI.getBasePath", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getBasePath:String", "kind" : "def"}, {"label" : "publicHostName", "tail" : ": String", "member" : "org.apache.spark.ui.WebUI.publicHostName", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#publicHostName:String", "kind" : "val"}, {"label" : "serverInfo", "tail" : ": Option[ServerInfo]", "member" : "org.apache.spark.ui.WebUI.serverInfo", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#serverInfo:Option[org.apache.spark.ui.ServerInfo]", "kind" : "var"}, {"label" : "pageToHandlers", "tail" : ": HashMap[WebUIPage, ArrayBuffer[ServletContextHandler]]", "member" : "org.apache.spark.ui.WebUI.pageToHandlers", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#pageToHandlers:scala.collection.mutable.HashMap[org.apache.spark.ui.WebUIPage,scala.collection.mutable.ArrayBuffer[org.eclipse.jetty.servlet.ServletContextHandler]]", "kind" : "val"}, {"label" : "handlers", "tail" : ": ArrayBuffer[ServletContextHandler]", "member" : "org.apache.spark.ui.WebUI.handlers", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#handlers:scala.collection.mutable.ArrayBuffer[org.eclipse.jetty.servlet.ServletContextHandler]", "kind" : "val"}, {"label" : "tabs", "tail" : ": ArrayBuffer[WebUITab]", "member" : "org.apache.spark.ui.WebUI.tabs", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#tabs:scala.collection.mutable.ArrayBuffer[org.apache.spark.ui.WebUITab]", "kind" : "val"}, {"label" : "sslOptions", "tail" : ": SSLOptions", "member" : "org.apache.spark.ui.WebUI.sslOptions", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#sslOptions:org.apache.spark.SSLOptions", "kind" : "val"}, {"label" : "securityManager", "tail" : ": SecurityManager", "member" : "org.apache.spark.ui.WebUI.securityManager", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#securityManager:org.apache.spark.SecurityManager", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "initSecurity", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.HistoryServer.initSecurity", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#initSecurity():Unit", "kind" : "def"}, {"label" : "main", "tail" : "(argStrings: Array[String]): Unit", "member" : "org.apache.spark.deploy.history.HistoryServer.main", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#main(argStrings:Array[String]):Unit", "kind" : "def"}, {"label" : "UI_PATH_PREFIX", "tail" : ": String", "member" : "org.apache.spark.deploy.history.HistoryServer.UI_PATH_PREFIX", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#UI_PATH_PREFIX:String", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/HistoryServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/deploy\/history\/HistoryServer.html", "kind" : "class"}, {"name" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter", "shortDescription" : "The writer to write event logs into multiple log files, rolled over via configured size.", "object" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html", "members_class" : [{"label" : "logPath", "tail" : "(): String", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.logPath", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logPath:String", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.stop", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#stop():Unit", "kind" : "def"}, {"label" : "writeEvent", "tail" : "(eventJson: String, flushLogger: Boolean): Unit", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.writeEvent", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#writeEvent(eventJson:String,flushLogger:Boolean):Unit", "kind" : "def"}, {"label" : "start", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.start", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#start():Unit", "kind" : "def"}, {"member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter#<init>", "error" : "unsupported entity"}, {"label" : "renameFile", "tail" : "(src: Path, dest: Path, overwrite: Boolean): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.renameFile", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#renameFile(src:org.apache.hadoop.fs.Path,dest:org.apache.hadoop.fs.Path,overwrite:Boolean):Unit", "kind" : "def"}, {"label" : "closeWriter", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.closeWriter", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#closeWriter():Unit", "kind" : "def"}, {"label" : "writeLine", "tail" : "(line: String, flushLogger: Boolean): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.writeLine", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#writeLine(line:String,flushLogger:Boolean):Unit", "kind" : "def"}, {"label" : "initLogFile", "tail" : "(path: Path)(fnSetupWriter: (OutputStream) ⇒ PrintWriter): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.initLogFile", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#initLogFile(path:org.apache.hadoop.fs.Path)(fnSetupWriter:java.io.OutputStream=>java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "requireLogBaseDirAsDirectory", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.requireLogBaseDirAsDirectory", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#requireLogBaseDirAsDirectory():Unit", "kind" : "def"}, {"label" : "writer", "tail" : ": Option[PrintWriter]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.writer", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#writer:Option[java.io.PrintWriter]", "kind" : "var"}, {"label" : "hadoopDataStream", "tail" : ": Option[FSDataOutputStream]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.hadoopDataStream", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#hadoopDataStream:Option[org.apache.hadoop.fs.FSDataOutputStream]", "kind" : "var"}, {"label" : "compressionCodec", "tail" : ": Option[CompressionCodec]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.compressionCodec", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#compressionCodec:Option[org.apache.spark.io.CompressionCodec]", "kind" : "val"}, {"label" : "fileSystem", "tail" : ": FileSystem", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.fileSystem", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#fileSystem:org.apache.hadoop.fs.FileSystem", "kind" : "val"}, {"label" : "outputBufferSize", "tail" : ": Int", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.outputBufferSize", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#outputBufferSize:Int", "kind" : "val"}, {"label" : "shouldOverwrite", "tail" : ": Boolean", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.shouldOverwrite", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#shouldOverwrite:Boolean", "kind" : "val"}, {"label" : "shouldCompress", "tail" : ": Boolean", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.shouldCompress", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#shouldCompress:Boolean", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "getEventLogFileIndex", "tail" : "(eventLogFileName: String): Long", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.getEventLogFileIndex", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#getEventLogFileIndex(eventLogFileName:String):Long", "kind" : "def"}, {"label" : "isAppStatusFile", "tail" : "(status: FileStatus): Boolean", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.isAppStatusFile", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#isAppStatusFile(status:org.apache.hadoop.fs.FileStatus):Boolean", "kind" : "def"}, {"label" : "isEventLogFile", "tail" : "(status: FileStatus): Boolean", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.isEventLogFile", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#isEventLogFile(status:org.apache.hadoop.fs.FileStatus):Boolean", "kind" : "def"}, {"label" : "isEventLogFile", "tail" : "(fileName: String): Boolean", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.isEventLogFile", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#isEventLogFile(fileName:String):Boolean", "kind" : "def"}, {"label" : "isEventLogDir", "tail" : "(status: FileStatus): Boolean", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.isEventLogDir", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#isEventLogDir(status:org.apache.hadoop.fs.FileStatus):Boolean", "kind" : "def"}, {"label" : "getEventLogFilePath", "tail" : "(appLogDir: Path, appId: String, appAttemptId: Option[String], index: Long, codecName: Option[String]): Path", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.getEventLogFilePath", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#getEventLogFilePath(appLogDir:org.apache.hadoop.fs.Path,appId:String,appAttemptId:Option[String],index:Long,codecName:Option[String]):org.apache.hadoop.fs.Path", "kind" : "def"}, {"label" : "getAppStatusFilePath", "tail" : "(appLogDir: Path, appId: String, appAttemptId: Option[String], inProgress: Boolean): Path", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.getAppStatusFilePath", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#getAppStatusFilePath(appLogDir:org.apache.hadoop.fs.Path,appId:String,appAttemptId:Option[String],inProgress:Boolean):org.apache.hadoop.fs.Path", "kind" : "def"}, {"label" : "getAppEventLogDirPath", "tail" : "(logBaseDir: URI, appId: String, appAttemptId: Option[String]): Path", "member" : "org.apache.spark.deploy.history.RollingEventLogFilesWriter.getAppEventLogDirPath", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#getAppEventLogDirPath(logBaseDir:java.net.URI,appId:String,appAttemptId:Option[String]):org.apache.hadoop.fs.Path", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/deploy\/history\/RollingEventLogFilesWriter.html", "kind" : "class"}, {"name" : "org.apache.spark.deploy.history.SingleEventLogFileWriter", "shortDescription" : "The writer to write event logs into single file.", "object" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html", "members_class" : [{"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.SingleEventLogFileWriter.stop", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#stop():Unit", "kind" : "def"}, {"label" : "writeEvent", "tail" : "(eventJson: String, flushLogger: Boolean): Unit", "member" : "org.apache.spark.deploy.history.SingleEventLogFileWriter.writeEvent", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#writeEvent(eventJson:String,flushLogger:Boolean):Unit", "kind" : "def"}, {"label" : "start", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.SingleEventLogFileWriter.start", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#start():Unit", "kind" : "def"}, {"label" : "inProgressPath", "tail" : "(): String", "member" : "org.apache.spark.deploy.history.SingleEventLogFileWriter.inProgressPath", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#inProgressPath:String", "kind" : "def"}, {"label" : "logPath", "tail" : ": String", "member" : "org.apache.spark.deploy.history.SingleEventLogFileWriter.logPath", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logPath:String", "kind" : "val"}, {"member" : "org.apache.spark.deploy.history.SingleEventLogFileWriter#<init>", "error" : "unsupported entity"}, {"label" : "renameFile", "tail" : "(src: Path, dest: Path, overwrite: Boolean): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.renameFile", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#renameFile(src:org.apache.hadoop.fs.Path,dest:org.apache.hadoop.fs.Path,overwrite:Boolean):Unit", "kind" : "def"}, {"label" : "closeWriter", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.closeWriter", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#closeWriter():Unit", "kind" : "def"}, {"label" : "writeLine", "tail" : "(line: String, flushLogger: Boolean): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.writeLine", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#writeLine(line:String,flushLogger:Boolean):Unit", "kind" : "def"}, {"label" : "initLogFile", "tail" : "(path: Path)(fnSetupWriter: (OutputStream) ⇒ PrintWriter): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.initLogFile", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#initLogFile(path:org.apache.hadoop.fs.Path)(fnSetupWriter:java.io.OutputStream=>java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "requireLogBaseDirAsDirectory", "tail" : "(): Unit", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.requireLogBaseDirAsDirectory", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#requireLogBaseDirAsDirectory():Unit", "kind" : "def"}, {"label" : "writer", "tail" : ": Option[PrintWriter]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.writer", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#writer:Option[java.io.PrintWriter]", "kind" : "var"}, {"label" : "hadoopDataStream", "tail" : ": Option[FSDataOutputStream]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.hadoopDataStream", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#hadoopDataStream:Option[org.apache.hadoop.fs.FSDataOutputStream]", "kind" : "var"}, {"label" : "compressionCodec", "tail" : ": Option[CompressionCodec]", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.compressionCodec", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#compressionCodec:Option[org.apache.spark.io.CompressionCodec]", "kind" : "val"}, {"label" : "fileSystem", "tail" : ": FileSystem", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.fileSystem", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#fileSystem:org.apache.hadoop.fs.FileSystem", "kind" : "val"}, {"label" : "outputBufferSize", "tail" : ": Int", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.outputBufferSize", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#outputBufferSize:Int", "kind" : "val"}, {"label" : "shouldOverwrite", "tail" : ": Boolean", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.shouldOverwrite", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#shouldOverwrite:Boolean", "kind" : "val"}, {"label" : "shouldCompress", "tail" : ": Boolean", "member" : "org.apache.spark.deploy.history.EventLogFileWriter.shouldCompress", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#shouldCompress:Boolean", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "getLogPath", "tail" : "(logBaseDir: URI, appId: String, appAttemptId: Option[String], compressionCodecName: Option[String]): String", "member" : "org.apache.spark.deploy.history.SingleEventLogFileWriter.getLogPath", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#getLogPath(logBaseDir:java.net.URI,appId:String,appAttemptId:Option[String],compressionCodecName:Option[String]):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/deploy\/history\/SingleEventLogFileWriter.html", "kind" : "class"}], "org.apache.spark.resource" : [{"name" : "org.apache.spark.resource.ExecutorResourceRequest", "shortDescription" : "An Executor resource request.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.resource.ExecutorResourceRequest.toString", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.resource.ExecutorResourceRequest.hashCode", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "org.apache.spark.resource.ExecutorResourceRequest.equals", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#equals(obj:Any):Boolean", "kind" : "def"}, {"member" : "org.apache.spark.resource.ExecutorResourceRequest#<init>", "error" : "unsupported entity"}, {"label" : "vendor", "tail" : ": String", "member" : "org.apache.spark.resource.ExecutorResourceRequest.vendor", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#vendor:String", "kind" : "val"}, {"label" : "discoveryScript", "tail" : ": String", "member" : "org.apache.spark.resource.ExecutorResourceRequest.discoveryScript", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#discoveryScript:String", "kind" : "val"}, {"label" : "amount", "tail" : ": Long", "member" : "org.apache.spark.resource.ExecutorResourceRequest.amount", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#amount:Long", "kind" : "val"}, {"label" : "resourceName", "tail" : ": String", "member" : "org.apache.spark.resource.ExecutorResourceRequest.resourceName", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#resourceName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/ExecutorResourceRequest.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.ExecutorResourceRequests", "shortDescription" : "A set of Executor resource requests.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.resource.ExecutorResourceRequests.toString", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#toString():String", "kind" : "def"}, {"label" : "resource", "tail" : "(resourceName: String, amount: Long, discoveryScript: String, vendor: String): ExecutorResourceRequests.this.type", "member" : "org.apache.spark.resource.ExecutorResourceRequests.resource", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#resource(resourceName:String,amount:Long,discoveryScript:String,vendor:String):ExecutorResourceRequests.this.type", "kind" : "def"}, {"label" : "cores", "tail" : "(amount: Int): ExecutorResourceRequests.this.type", "member" : "org.apache.spark.resource.ExecutorResourceRequests.cores", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#cores(amount:Int):ExecutorResourceRequests.this.type", "kind" : "def"}, {"label" : "pysparkMemory", "tail" : "(amount: String): ExecutorResourceRequests.this.type", "member" : "org.apache.spark.resource.ExecutorResourceRequests.pysparkMemory", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#pysparkMemory(amount:String):ExecutorResourceRequests.this.type", "kind" : "def"}, {"label" : "memoryOverhead", "tail" : "(amount: String): ExecutorResourceRequests.this.type", "member" : "org.apache.spark.resource.ExecutorResourceRequests.memoryOverhead", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#memoryOverhead(amount:String):ExecutorResourceRequests.this.type", "kind" : "def"}, {"label" : "offHeapMemory", "tail" : "(amount: String): ExecutorResourceRequests.this.type", "member" : "org.apache.spark.resource.ExecutorResourceRequests.offHeapMemory", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#offHeapMemory(amount:String):ExecutorResourceRequests.this.type", "kind" : "def"}, {"label" : "memory", "tail" : "(amount: String): ExecutorResourceRequests.this.type", "member" : "org.apache.spark.resource.ExecutorResourceRequests.memory", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#memory(amount:String):ExecutorResourceRequests.this.type", "kind" : "def"}, {"label" : "requestsJMap", "tail" : "(): Map[String, ExecutorResourceRequest]", "member" : "org.apache.spark.resource.ExecutorResourceRequests.requestsJMap", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#requestsJMap:java.util.Map[String,org.apache.spark.resource.ExecutorResourceRequest]", "kind" : "def"}, {"label" : "requests", "tail" : "(): Map[String, ExecutorResourceRequest]", "member" : "org.apache.spark.resource.ExecutorResourceRequests.requests", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#requests:Map[String,org.apache.spark.resource.ExecutorResourceRequest]", "kind" : "def"}, {"member" : "org.apache.spark.resource.ExecutorResourceRequests#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/ExecutorResourceRequests.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.ResourceDiscoveryScriptPlugin", "shortDescription" : "The default plugin that is loaded into a Spark application to control how customresources are discovered.", "members_class" : [{"label" : "discoverResource", "tail" : "(request: ResourceRequest, sparkConf: SparkConf): Optional[ResourceInformation]", "member" : "org.apache.spark.resource.ResourceDiscoveryScriptPlugin.discoverResource", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#discoverResource(request:org.apache.spark.resource.ResourceRequest,sparkConf:org.apache.spark.SparkConf):java.util.Optional[org.apache.spark.resource.ResourceInformation]", "kind" : "def"}, {"member" : "org.apache.spark.resource.ResourceDiscoveryScriptPlugin#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/ResourceDiscoveryScriptPlugin.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.ResourceID", "shortDescription" : "Resource identifier.", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.resource.ResourceID.hashCode", "link" : "org\/apache\/spark\/resource\/ResourceID.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "org.apache.spark.resource.ResourceID.equals", "link" : "org\/apache\/spark\/resource\/ResourceID.html#equals(obj:Any):Boolean", "kind" : "def"}, {"member" : "org.apache.spark.resource.ResourceID#<init>", "error" : "unsupported entity"}, {"label" : "resourceName", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceID.resourceName", "link" : "org\/apache\/spark\/resource\/ResourceID.html#resourceName:String", "kind" : "val"}, {"label" : "componentName", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceID.componentName", "link" : "org\/apache\/spark\/resource\/ResourceID.html#componentName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ResourceID.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ResourceID.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ResourceID.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ResourceID.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ResourceID.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ResourceID.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ResourceID.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceID.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceID.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceID.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ResourceID.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ResourceID.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/resource\/ResourceID.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ResourceID.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ResourceID.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceID.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceID.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/ResourceID.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.ResourceInformation", "shortDescription" : "Class to hold information about a type of Resource.", "members_class" : [{"label" : "toJson", "tail" : "(): JValue", "member" : "org.apache.spark.resource.ResourceInformation.toJson", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#toJson():org.json4s.JValue", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.resource.ResourceInformation.hashCode", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "org.apache.spark.resource.ResourceInformation.equals", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.resource.ResourceInformation.toString", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#toString():String", "kind" : "def"}, {"member" : "org.apache.spark.resource.ResourceInformation#<init>", "error" : "unsupported entity"}, {"label" : "addresses", "tail" : ": Array[String]", "member" : "org.apache.spark.resource.ResourceInformation.addresses", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#addresses:Array[String]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceInformation.name", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceInformation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/ResourceInformation.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.ResourceProfile", "shortDescription" : "Resource profile to associate with an RDD.", "object" : "org\/apache\/spark\/resource\/ResourceProfile$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.resource.ResourceProfile.toString", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.resource.ResourceProfile.hashCode", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "org.apache.spark.resource.ResourceProfile.equals", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "executorResourcesJMap", "tail" : "(): Map[String, ExecutorResourceRequest]", "member" : "org.apache.spark.resource.ResourceProfile.executorResourcesJMap", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#executorResourcesJMap:java.util.Map[String,org.apache.spark.resource.ExecutorResourceRequest]", "kind" : "def"}, {"label" : "taskResourcesJMap", "tail" : "(): Map[String, TaskResourceRequest]", "member" : "org.apache.spark.resource.ResourceProfile.taskResourcesJMap", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#taskResourcesJMap:java.util.Map[String,org.apache.spark.resource.TaskResourceRequest]", "kind" : "def"}, {"label" : "id", "tail" : "(): Int", "member" : "org.apache.spark.resource.ResourceProfile.id", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#id:Int", "kind" : "def"}, {"member" : "org.apache.spark.resource.ResourceProfile#<init>", "error" : "unsupported entity"}, {"label" : "taskResources", "tail" : ": Map[String, TaskResourceRequest]", "member" : "org.apache.spark.resource.ResourceProfile.taskResources", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#taskResources:Map[String,org.apache.spark.resource.TaskResourceRequest]", "kind" : "val"}, {"label" : "executorResources", "tail" : ": Map[String, ExecutorResourceRequest]", "member" : "org.apache.spark.resource.ResourceProfile.executorResources", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#executorResources:Map[String,org.apache.spark.resource.ExecutorResourceRequest]", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceProfile.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "DEFAULT_RESOURCE_PROFILE_ID", "tail" : ": Int", "member" : "org.apache.spark.resource.ResourceProfile.DEFAULT_RESOURCE_PROFILE_ID", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#DEFAULT_RESOURCE_PROFILE_ID:Int", "kind" : "val"}, {"label" : "UNKNOWN_RESOURCE_PROFILE_ID", "tail" : ": Int", "member" : "org.apache.spark.resource.ResourceProfile.UNKNOWN_RESOURCE_PROFILE_ID", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#UNKNOWN_RESOURCE_PROFILE_ID:Int", "kind" : "val"}, {"label" : "allSupportedExecutorResources", "tail" : "(): Array[String]", "member" : "org.apache.spark.resource.ResourceProfile.allSupportedExecutorResources", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#allSupportedExecutorResources:Array[String]", "kind" : "def"}, {"label" : "PYSPARK_MEM", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceProfile.PYSPARK_MEM", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#PYSPARK_MEM:String", "kind" : "val"}, {"label" : "OVERHEAD_MEM", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceProfile.OVERHEAD_MEM", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#OVERHEAD_MEM:String", "kind" : "val"}, {"label" : "OFFHEAP_MEM", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceProfile.OFFHEAP_MEM", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#OFFHEAP_MEM:String", "kind" : "val"}, {"label" : "MEMORY", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceProfile.MEMORY", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#MEMORY:String", "kind" : "val"}, {"label" : "CORES", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceProfile.CORES", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#CORES:String", "kind" : "val"}, {"label" : "CPUS", "tail" : ": String", "member" : "org.apache.spark.resource.ResourceProfile.CPUS", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#CPUS:String", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceProfile$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/ResourceProfile.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.ResourceProfileBuilder", "shortDescription" : "Resource profile builder to build a ResourceProfile to associate with an RDD.", "members_class" : [{"label" : "build", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.resource.ResourceProfileBuilder.build", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#build():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.resource.ResourceProfileBuilder.toString", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#toString():String", "kind" : "def"}, {"label" : "clearTaskResourceRequests", "tail" : "(): ResourceProfileBuilder.this.type", "member" : "org.apache.spark.resource.ResourceProfileBuilder.clearTaskResourceRequests", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#clearTaskResourceRequests():ResourceProfileBuilder.this.type", "kind" : "def"}, {"label" : "clearExecutorResourceRequests", "tail" : "(): ResourceProfileBuilder.this.type", "member" : "org.apache.spark.resource.ResourceProfileBuilder.clearExecutorResourceRequests", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#clearExecutorResourceRequests():ResourceProfileBuilder.this.type", "kind" : "def"}, {"label" : "require", "tail" : "(requests: TaskResourceRequests): ResourceProfileBuilder.this.type", "member" : "org.apache.spark.resource.ResourceProfileBuilder.require", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#require(requests:org.apache.spark.resource.TaskResourceRequests):ResourceProfileBuilder.this.type", "kind" : "def"}, {"label" : "require", "tail" : "(requests: ExecutorResourceRequests): ResourceProfileBuilder.this.type", "member" : "org.apache.spark.resource.ResourceProfileBuilder.require", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#require(requests:org.apache.spark.resource.ExecutorResourceRequests):ResourceProfileBuilder.this.type", "kind" : "def"}, {"label" : "executorResourcesJMap", "tail" : "(): Map[String, ExecutorResourceRequest]", "member" : "org.apache.spark.resource.ResourceProfileBuilder.executorResourcesJMap", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#executorResourcesJMap:java.util.Map[String,org.apache.spark.resource.ExecutorResourceRequest]", "kind" : "def"}, {"label" : "taskResourcesJMap", "tail" : "(): Map[String, TaskResourceRequest]", "member" : "org.apache.spark.resource.ResourceProfileBuilder.taskResourcesJMap", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#taskResourcesJMap:java.util.Map[String,org.apache.spark.resource.TaskResourceRequest]", "kind" : "def"}, {"label" : "executorResources", "tail" : "(): Map[String, ExecutorResourceRequest]", "member" : "org.apache.spark.resource.ResourceProfileBuilder.executorResources", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#executorResources:Map[String,org.apache.spark.resource.ExecutorResourceRequest]", "kind" : "def"}, {"label" : "taskResources", "tail" : "(): Map[String, TaskResourceRequest]", "member" : "org.apache.spark.resource.ResourceProfileBuilder.taskResources", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#taskResources:Map[String,org.apache.spark.resource.TaskResourceRequest]", "kind" : "def"}, {"member" : "org.apache.spark.resource.ResourceProfileBuilder#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/ResourceProfileBuilder.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.ResourceRequest", "shortDescription" : "Class that represents a resource request.", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.resource.ResourceRequest.hashCode", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "org.apache.spark.resource.ResourceRequest.equals", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#equals(obj:Any):Boolean", "kind" : "def"}, {"member" : "org.apache.spark.resource.ResourceRequest#<init>", "error" : "unsupported entity"}, {"label" : "vendor", "tail" : ": Optional[String]", "member" : "org.apache.spark.resource.ResourceRequest.vendor", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#vendor:java.util.Optional[String]", "kind" : "val"}, {"label" : "discoveryScript", "tail" : ": Optional[String]", "member" : "org.apache.spark.resource.ResourceRequest.discoveryScript", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#discoveryScript:java.util.Optional[String]", "kind" : "val"}, {"label" : "amount", "tail" : ": Long", "member" : "org.apache.spark.resource.ResourceRequest.amount", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#amount:Long", "kind" : "val"}, {"label" : "id", "tail" : ": ResourceID", "member" : "org.apache.spark.resource.ResourceRequest.id", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#id:org.apache.spark.resource.ResourceID", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/ResourceRequest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/ResourceRequest.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.TaskResourceRequest", "shortDescription" : "A task resource request.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.resource.TaskResourceRequest.toString", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.resource.TaskResourceRequest.hashCode", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "org.apache.spark.resource.TaskResourceRequest.equals", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#equals(obj:Any):Boolean", "kind" : "def"}, {"member" : "org.apache.spark.resource.TaskResourceRequest#<init>", "error" : "unsupported entity"}, {"label" : "amount", "tail" : ": Double", "member" : "org.apache.spark.resource.TaskResourceRequest.amount", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#amount:Double", "kind" : "val"}, {"label" : "resourceName", "tail" : ": String", "member" : "org.apache.spark.resource.TaskResourceRequest.resourceName", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#resourceName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/TaskResourceRequest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/TaskResourceRequest.html", "kind" : "class"}, {"name" : "org.apache.spark.resource.TaskResourceRequests", "shortDescription" : "A set of task resource requests.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.resource.TaskResourceRequests.toString", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#toString():String", "kind" : "def"}, {"label" : "addRequest", "tail" : "(treq: TaskResourceRequest): TaskResourceRequests.this.type", "member" : "org.apache.spark.resource.TaskResourceRequests.addRequest", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#addRequest(treq:org.apache.spark.resource.TaskResourceRequest):TaskResourceRequests.this.type", "kind" : "def"}, {"label" : "resource", "tail" : "(resourceName: String, amount: Double): TaskResourceRequests.this.type", "member" : "org.apache.spark.resource.TaskResourceRequests.resource", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#resource(resourceName:String,amount:Double):TaskResourceRequests.this.type", "kind" : "def"}, {"label" : "cpus", "tail" : "(amount: Int): TaskResourceRequests.this.type", "member" : "org.apache.spark.resource.TaskResourceRequests.cpus", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#cpus(amount:Int):TaskResourceRequests.this.type", "kind" : "def"}, {"label" : "requestsJMap", "tail" : "(): Map[String, TaskResourceRequest]", "member" : "org.apache.spark.resource.TaskResourceRequests.requestsJMap", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#requestsJMap:java.util.Map[String,org.apache.spark.resource.TaskResourceRequest]", "kind" : "def"}, {"label" : "requests", "tail" : "(): Map[String, TaskResourceRequest]", "member" : "org.apache.spark.resource.TaskResourceRequests.requests", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#requests:Map[String,org.apache.spark.resource.TaskResourceRequest]", "kind" : "def"}, {"member" : "org.apache.spark.resource.TaskResourceRequests#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/resource\/TaskResourceRequests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/resource\/TaskResourceRequests.html", "kind" : "class"}], "org.apache.spark.shuffle.sort" : [{"name" : "org.apache.spark.shuffle.sort.UnsafeShuffleWriter", "shortDescription" : "", "members_class" : [{"label" : "getLengthByMicroRddId", "tail" : "(): Map[Integer, Long]", "member" : "org.apache.spark.shuffle.sort.UnsafeShuffleWriter.getLengthByMicroRddId", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#getLengthByMicroRddId():java.util.Map[Integer,Long]", "kind" : "def"}, {"label" : "getPartitionLengths", "tail" : "(): Array[Long]", "member" : "org.apache.spark.shuffle.sort.UnsafeShuffleWriter.getPartitionLengths", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#getPartitionLengths():Array[Long]", "kind" : "def"}, {"label" : "stop", "tail" : "(success: Boolean): Option[MapStatus]", "member" : "org.apache.spark.shuffle.sort.UnsafeShuffleWriter.stop", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#stop(success:Boolean):Option[org.apache.spark.scheduler.MapStatus]", "kind" : "def"}, {"label" : "write", "tail" : "(records: Iterator[Product2[K, V]]): Unit", "member" : "org.apache.spark.shuffle.sort.UnsafeShuffleWriter.write", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#write(records:Iterator[Product2[K,V]]):Unit", "kind" : "def"}, {"label" : "write", "tail" : "(records: Iterator[Product2[K, V]]): Unit", "member" : "org.apache.spark.shuffle.sort.UnsafeShuffleWriter.write", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#write(records:java.util.Iterator[Product2[K,V]]):Unit", "kind" : "def"}, {"label" : "getPeakMemoryUsedBytes", "tail" : "(): Long", "member" : "org.apache.spark.shuffle.sort.UnsafeShuffleWriter.getPeakMemoryUsedBytes", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#getPeakMemoryUsedBytes():Long", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.sort.UnsafeShuffleWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/shuffle\/sort\/UnsafeShuffleWriter.html", "kind" : "class"}], "org.apache.spark.shuffle.sort.io" : [{"name" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDataIO", "shortDescription" : "Implementation of the ShuffleDataIO plugin system that replicates the local shufflestorage and index file functionality that has historically been used from Spark 2.4 and earlier.", "members_class" : [{"label" : "driver", "tail" : "(): ShuffleDriverComponents", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDataIO.driver", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#driver():org.apache.spark.shuffle.api.ShuffleDriverComponents", "kind" : "def"}, {"label" : "executor", "tail" : "(): ShuffleExecutorComponents", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDataIO.executor", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#executor():org.apache.spark.shuffle.api.ShuffleExecutorComponents", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDataIO#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDataIO.html", "kind" : "class"}, {"name" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDriverComponents", "shortDescription" : "", "members_class" : [{"label" : "removeShuffle", "tail" : "(shuffleId: Int, blocking: Boolean): Unit", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDriverComponents.removeShuffle", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#removeShuffle(shuffleId:Int,blocking:Boolean):Unit", "kind" : "def"}, {"label" : "cleanupApplication", "tail" : "(): Unit", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDriverComponents.cleanupApplication", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#cleanupApplication():Unit", "kind" : "def"}, {"label" : "initializeApplication", "tail" : "(): Map[String, String]", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDriverComponents.initializeApplication", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#initializeApplication():java.util.Map[String,String]", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleDriverComponents#<init>", "error" : "unsupported entity"}, {"label" : "registerShuffle", "tail" : "(shuffleId: Int): Unit", "member" : "org.apache.spark.shuffle.api.ShuffleDriverComponents.registerShuffle", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#registerShuffle(shuffleId:Int):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleDriverComponents.html", "kind" : "class"}, {"name" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleExecutorComponents", "shortDescription" : "", "members_class" : [{"label" : "createSingleFileMapOutputWriter", "tail" : "(shuffleId: Int, mapId: Long): Optional[SingleSpillShuffleMapOutputWriter]", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleExecutorComponents.createSingleFileMapOutputWriter", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#createSingleFileMapOutputWriter(shuffleId:Int,mapId:Long):java.util.Optional[org.apache.spark.shuffle.api.SingleSpillShuffleMapOutputWriter]", "kind" : "def"}, {"label" : "createMapOutputWriter", "tail" : "(shuffleId: Int, mapTaskId: Long, numPartitions: Int): ShuffleMapOutputWriter", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleExecutorComponents.createMapOutputWriter", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#createMapOutputWriter(shuffleId:Int,mapTaskId:Long,numPartitions:Int):org.apache.spark.shuffle.api.ShuffleMapOutputWriter", "kind" : "def"}, {"label" : "initializeExecutor", "tail" : "(appId: String, execId: String, extraConfigs: Map[String, String]): Unit", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleExecutorComponents.initializeExecutor", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#initializeExecutor(appId:String,execId:String,extraConfigs:java.util.Map[String,String]):Unit", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleExecutorComponents#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleExecutorComponents#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleExecutorComponents.html", "kind" : "class"}, {"name" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleMapOutputWriter", "shortDescription" : "Implementation of ShuffleMapOutputWriter that replicates the functionality of shufflepersisting shuffle data to local disk alongside index files, identical to Spark's historiccanonical shuffle storage mechanism.", "members_class" : [{"label" : "abort", "tail" : "(error: Throwable): Unit", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleMapOutputWriter.abort", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#abort(error:Throwable):Unit", "kind" : "def"}, {"label" : "commitAllPartitions", "tail" : "(checksums: Array[Long]): MapOutputCommitMessage", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleMapOutputWriter.commitAllPartitions", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#commitAllPartitions(checksums:Array[Long]):org.apache.spark.shuffle.api.metadata.MapOutputCommitMessage", "kind" : "def"}, {"label" : "getPartitionWriter", "tail" : "(reducePartitionId: Int): ShufflePartitionWriter", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleMapOutputWriter.getPartitionWriter", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#getPartitionWriter(reducePartitionId:Int):org.apache.spark.shuffle.api.ShufflePartitionWriter", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.sort.io.LocalDiskShuffleMapOutputWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskShuffleMapOutputWriter.html", "kind" : "class"}, {"name" : "org.apache.spark.shuffle.sort.io.LocalDiskSingleSpillMapOutputWriter", "shortDescription" : "", "members_class" : [{"label" : "transferMapSpillFile", "tail" : "(mapSpillFile: File, partitionLengths: Array[Long], checksums: Array[Long], lengthByMicroRddId: Map[Integer, Long]): Unit", "member" : "org.apache.spark.shuffle.sort.io.LocalDiskSingleSpillMapOutputWriter.transferMapSpillFile", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#transferMapSpillFile(mapSpillFile:java.io.File,partitionLengths:Array[Long],checksums:Array[Long],lengthByMicroRddId:java.util.Map[Integer,Long]):Unit", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.sort.io.LocalDiskSingleSpillMapOutputWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/shuffle\/sort\/io\/LocalDiskSingleSpillMapOutputWriter.html", "kind" : "class"}], "org.apache.spark.storage" : [{"name" : "org.apache.spark.storage.BasicBlockReplicationPolicy", "shortDescription" : "", "members_class" : [{"label" : "prioritize", "tail" : "(blockManagerId: BlockManagerId, peers: Seq[BlockManagerId], peersReplicatedTo: HashSet[BlockManagerId], blockId: BlockId, numReplicas: Int): List[BlockManagerId]", "member" : "org.apache.spark.storage.BasicBlockReplicationPolicy.prioritize", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#prioritize(blockManagerId:org.apache.spark.storage.BlockManagerId,peers:Seq[org.apache.spark.storage.BlockManagerId],peersReplicatedTo:scala.collection.mutable.HashSet[org.apache.spark.storage.BlockManagerId],blockId:org.apache.spark.storage.BlockId,numReplicas:Int):List[org.apache.spark.storage.BlockManagerId]", "kind" : "def"}, {"member" : "org.apache.spark.storage.BasicBlockReplicationPolicy#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/BasicBlockReplicationPolicy.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.BlockId", "shortDescription" : ":: DeveloperApi ::Identifies a particular Block of data, usually associated with a single file.", "object" : "org\/apache\/spark\/storage\/BlockId$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/BlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/BlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/BlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/BlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/BlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/BlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockId.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/BlockId.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/BlockId.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.name", "link" : "org\/apache\/spark\/storage\/BlockId.html#name:String", "kind" : "abstract def"}], "members_object" : [{"label" : "apply", "tail" : "(name: String): BlockId", "member" : "org.apache.spark.storage.BlockId.apply", "link" : "org\/apache\/spark\/storage\/BlockId$.html#apply(name:String):org.apache.spark.storage.BlockId", "kind" : "def"}, {"label" : "TEST", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.TEST", "link" : "org\/apache\/spark\/storage\/BlockId$.html#TEST:scala.util.matching.Regex", "kind" : "val"}, {"label" : "TEMP_SHUFFLE", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.TEMP_SHUFFLE", "link" : "org\/apache\/spark\/storage\/BlockId$.html#TEMP_SHUFFLE:scala.util.matching.Regex", "kind" : "val"}, {"label" : "TEMP_LOCAL", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.TEMP_LOCAL", "link" : "org\/apache\/spark\/storage\/BlockId$.html#TEMP_LOCAL:scala.util.matching.Regex", "kind" : "val"}, {"label" : "STREAM", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.STREAM", "link" : "org\/apache\/spark\/storage\/BlockId$.html#STREAM:scala.util.matching.Regex", "kind" : "val"}, {"label" : "TASKRESULT", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.TASKRESULT", "link" : "org\/apache\/spark\/storage\/BlockId$.html#TASKRESULT:scala.util.matching.Regex", "kind" : "val"}, {"label" : "BROADCAST", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.BROADCAST", "link" : "org\/apache\/spark\/storage\/BlockId$.html#BROADCAST:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_CHUNK", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_CHUNK", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_CHUNK:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_MERGED_META", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_MERGED_META", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_MERGED_META:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_MERGED_INDEX", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_MERGED_INDEX", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_MERGED_INDEX:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_MERGED_DATA", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_MERGED_DATA", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_MERGED_DATA:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_MERGED", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_MERGED", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_MERGED:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_PUSH", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_PUSH", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_PUSH:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_INDEX", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_INDEX", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_INDEX:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_DATA", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_DATA", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_DATA:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE_BATCH", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE_BATCH", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE_BATCH:scala.util.matching.Regex", "kind" : "val"}, {"label" : "SHUFFLE", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.SHUFFLE", "link" : "org\/apache\/spark\/storage\/BlockId$.html#SHUFFLE:scala.util.matching.Regex", "kind" : "val"}, {"label" : "RDD", "tail" : ": Regex", "member" : "org.apache.spark.storage.BlockId.RDD", "link" : "org\/apache\/spark\/storage\/BlockId$.html#RDD:scala.util.matching.Regex", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockId$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockId$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockId$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockId$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockId$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockId$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockId$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockId$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockId$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockId$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockId$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockId$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/BlockId$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockId$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/BlockId$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/BlockId$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockId$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockId$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockId$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/BlockId.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.BlockManagerId", "shortDescription" : ":: DeveloperApi ::This class represent a unique identifier for a BlockManager.", "members_class" : [{"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "org.apache.spark.storage.BlockManagerId.equals", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.storage.BlockManagerId.hashCode", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockManagerId.toString", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#toString():String", "kind" : "def"}, {"label" : "readExternal", "tail" : "(in: ObjectInput): Unit", "member" : "org.apache.spark.storage.BlockManagerId.readExternal", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#readExternal(in:java.io.ObjectInput):Unit", "kind" : "def"}, {"label" : "writeExternal", "tail" : "(out: ObjectOutput): Unit", "member" : "org.apache.spark.storage.BlockManagerId.writeExternal", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#writeExternal(out:java.io.ObjectOutput):Unit", "kind" : "def"}, {"label" : "isDriver", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockManagerId.isDriver", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#isDriver:Boolean", "kind" : "def"}, {"label" : "topologyInfo", "tail" : "(): Option[String]", "member" : "org.apache.spark.storage.BlockManagerId.topologyInfo", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#topologyInfo:Option[String]", "kind" : "def"}, {"label" : "port", "tail" : "(): Int", "member" : "org.apache.spark.storage.BlockManagerId.port", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#port:Int", "kind" : "def"}, {"label" : "host", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockManagerId.host", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#host:String", "kind" : "def"}, {"label" : "hostPort", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockManagerId.hostPort", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#hostPort:String", "kind" : "def"}, {"label" : "executorId", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockManagerId.executorId", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#executorId:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockManagerId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/BlockManagerId.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.BlockNotFoundException", "shortDescription" : "", "members_class" : [{"member" : "org.apache.spark.storage.BlockNotFoundException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockNotFoundException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/BlockNotFoundException.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.BlockReplicationPolicy", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "prioritize", "tail" : "(blockManagerId: BlockManagerId, peers: Seq[BlockManagerId], peersReplicatedTo: HashSet[BlockManagerId], blockId: BlockId, numReplicas: Int): List[BlockManagerId]", "member" : "org.apache.spark.storage.BlockReplicationPolicy.prioritize", "link" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html#prioritize(blockManagerId:org.apache.spark.storage.BlockManagerId,peers:Seq[org.apache.spark.storage.BlockManagerId],peersReplicatedTo:scala.collection.mutable.HashSet[org.apache.spark.storage.BlockManagerId],blockId:org.apache.spark.storage.BlockId,numReplicas:Int):List[org.apache.spark.storage.BlockManagerId]", "kind" : "abstract def"}], "shortDescription" : "::DeveloperApi::BlockReplicationPrioritization provides logic for prioritizing a sequence of peers forreplicating blocks.", "trait" : "org\/apache\/spark\/storage\/BlockReplicationPolicy.html", "kind" : "trait"}, {"name" : "org.apache.spark.storage.BlockReplicationUtils", "shortDescription" : "", "object" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html", "members_object" : [{"label" : "getRandomSample", "tail" : "(elems: Seq[T], m: Int, r: Random): List[T]", "member" : "org.apache.spark.storage.BlockReplicationUtils.getRandomSample", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#getRandomSample[T](elems:Seq[T],m:Int,r:scala.util.Random):List[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockReplicationUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.storage.BlockStatus", "shortDescription" : "", "object" : "org\/apache\/spark\/storage\/BlockStatus$.html", "members_object" : [{"label" : "empty", "tail" : "(): BlockStatus", "member" : "org.apache.spark.storage.BlockStatus.empty", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#empty:org.apache.spark.storage.BlockStatus", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockStatus$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "isCached", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockStatus.isCached", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#isCached:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.storage.BlockStatus#<init>", "error" : "unsupported entity"}, {"label" : "diskSize", "tail" : ": Long", "member" : "org.apache.spark.storage.BlockStatus.diskSize", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#diskSize:Long", "kind" : "val"}, {"label" : "memSize", "tail" : ": Long", "member" : "org.apache.spark.storage.BlockStatus.memSize", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#memSize:Long", "kind" : "val"}, {"label" : "storageLevel", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.BlockStatus.storageLevel", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#storageLevel:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockStatus.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockStatus.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/BlockStatus.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.BlockUpdatedInfo", "shortDescription" : ":: DeveloperApi ::Stores information about a block status in a block manager.", "members_case class" : [{"member" : "org.apache.spark.storage.BlockUpdatedInfo#<init>", "error" : "unsupported entity"}, {"label" : "diskSize", "tail" : ": Long", "member" : "org.apache.spark.storage.BlockUpdatedInfo.diskSize", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#diskSize:Long", "kind" : "val"}, {"label" : "memSize", "tail" : ": Long", "member" : "org.apache.spark.storage.BlockUpdatedInfo.memSize", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#memSize:Long", "kind" : "val"}, {"label" : "storageLevel", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.BlockUpdatedInfo.storageLevel", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#storageLevel:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "blockId", "tail" : ": BlockId", "member" : "org.apache.spark.storage.BlockUpdatedInfo.blockId", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#blockId:org.apache.spark.storage.BlockId", "kind" : "val"}, {"label" : "blockManagerId", "tail" : ": BlockManagerId", "member" : "org.apache.spark.storage.BlockUpdatedInfo.blockManagerId", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#blockManagerId:org.apache.spark.storage.BlockManagerId", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/BlockUpdatedInfo.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.BroadcastBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.BroadcastBlockId.name", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.BroadcastBlockId#<init>", "error" : "unsupported entity"}, {"label" : "field", "tail" : ": String", "member" : "org.apache.spark.storage.BroadcastBlockId.field", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#field:String", "kind" : "val"}, {"label" : "broadcastId", "tail" : ": Long", "member" : "org.apache.spark.storage.BroadcastBlockId.broadcastId", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#broadcastId:Long", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/BroadcastBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/BroadcastBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.DefaultTopologyMapper", "shortDescription" : "A TopologyMapper that assumes all nodes are in the same rack", "members_class" : [{"label" : "getTopologyForHost", "tail" : "(hostname: String): Option[String]", "member" : "org.apache.spark.storage.DefaultTopologyMapper.getTopologyForHost", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#getTopologyForHost(hostname:String):Option[String]", "kind" : "def"}, {"member" : "org.apache.spark.storage.DefaultTopologyMapper#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/DefaultTopologyMapper.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.FileBasedTopologyMapper", "shortDescription" : "A simple file based topology mapper.", "members_class" : [{"label" : "getTopologyForHost", "tail" : "(hostname: String): Option[String]", "member" : "org.apache.spark.storage.FileBasedTopologyMapper.getTopologyForHost", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#getTopologyForHost(hostname:String):Option[String]", "kind" : "def"}, {"label" : "topologyMap", "tail" : ": Map[String, String]", "member" : "org.apache.spark.storage.FileBasedTopologyMapper.topologyMap", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#topologyMap:scala.collection.Map[String,String]", "kind" : "val"}, {"label" : "topologyFile", "tail" : ": Option[String]", "member" : "org.apache.spark.storage.FileBasedTopologyMapper.topologyFile", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#topologyFile:Option[String]", "kind" : "val"}, {"member" : "org.apache.spark.storage.FileBasedTopologyMapper#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/FileBasedTopologyMapper.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.RandomBlockReplicationPolicy", "shortDescription" : "", "members_class" : [{"label" : "prioritize", "tail" : "(blockManagerId: BlockManagerId, peers: Seq[BlockManagerId], peersReplicatedTo: HashSet[BlockManagerId], blockId: BlockId, numReplicas: Int): List[BlockManagerId]", "member" : "org.apache.spark.storage.RandomBlockReplicationPolicy.prioritize", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#prioritize(blockManagerId:org.apache.spark.storage.BlockManagerId,peers:Seq[org.apache.spark.storage.BlockManagerId],peersReplicatedTo:scala.collection.mutable.HashSet[org.apache.spark.storage.BlockManagerId],blockId:org.apache.spark.storage.BlockId,numReplicas:Int):List[org.apache.spark.storage.BlockManagerId]", "kind" : "def"}, {"member" : "org.apache.spark.storage.RandomBlockReplicationPolicy#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/RandomBlockReplicationPolicy.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.RDDBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.RDDBlockId.name", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.RDDBlockId#<init>", "error" : "unsupported entity"}, {"label" : "splitIndex", "tail" : ": Int", "member" : "org.apache.spark.storage.RDDBlockId.splitIndex", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#splitIndex:Int", "kind" : "val"}, {"label" : "rddId", "tail" : ": Int", "member" : "org.apache.spark.storage.RDDBlockId.rddId", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#rddId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/RDDBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/RDDBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.RDDInfo", "shortDescription" : "", "members_class" : [{"label" : "compare", "tail" : "(that: RDDInfo): Int", "member" : "org.apache.spark.storage.RDDInfo.compare", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#compare(that:org.apache.spark.storage.RDDInfo):Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.RDDInfo.toString", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#toString():String", "kind" : "def"}, {"label" : "isCached", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.RDDInfo.isCached", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#isCached:Boolean", "kind" : "def"}, {"label" : "diskSize", "tail" : ": Long", "member" : "org.apache.spark.storage.RDDInfo.diskSize", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#diskSize:Long", "kind" : "var"}, {"label" : "memSize", "tail" : ": Long", "member" : "org.apache.spark.storage.RDDInfo.memSize", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#memSize:Long", "kind" : "var"}, {"label" : "numCachedPartitions", "tail" : ": Int", "member" : "org.apache.spark.storage.RDDInfo.numCachedPartitions", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#numCachedPartitions:Int", "kind" : "var"}, {"member" : "org.apache.spark.storage.RDDInfo#<init>", "error" : "unsupported entity"}, {"label" : "outputDeterministicLevel", "tail" : ": rdd.DeterministicLevel.Value", "member" : "org.apache.spark.storage.RDDInfo.outputDeterministicLevel", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#outputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "val"}, {"label" : "scope", "tail" : ": Option[RDDOperationScope]", "member" : "org.apache.spark.storage.RDDInfo.scope", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#scope:Option[org.apache.spark.rdd.RDDOperationScope]", "kind" : "val"}, {"label" : "callSite", "tail" : ": String", "member" : "org.apache.spark.storage.RDDInfo.callSite", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#callSite:String", "kind" : "val"}, {"label" : "parentIds", "tail" : ": Seq[Int]", "member" : "org.apache.spark.storage.RDDInfo.parentIds", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#parentIds:Seq[Int]", "kind" : "val"}, {"label" : "isBarrier", "tail" : ": Boolean", "member" : "org.apache.spark.storage.RDDInfo.isBarrier", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#isBarrier:Boolean", "kind" : "val"}, {"label" : "storageLevel", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.RDDInfo.storageLevel", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#storageLevel:org.apache.spark.storage.StorageLevel", "kind" : "var"}, {"label" : "numPartitions", "tail" : ": Int", "member" : "org.apache.spark.storage.RDDInfo.numPartitions", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#numPartitions:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.storage.RDDInfo.name", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.storage.RDDInfo.id", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#id:Int", "kind" : "val"}, {"label" : "compareTo", "tail" : "(that: RDDInfo): Int", "member" : "scala.math.Ordered.compareTo", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#compareTo(that:A):Int", "kind" : "def"}, {"label" : ">=", "tail" : "(that: RDDInfo): Boolean", "member" : "scala.math.Ordered.>=", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#>=(that:A):Boolean", "kind" : "def"}, {"label" : "<=", "tail" : "(that: RDDInfo): Boolean", "member" : "scala.math.Ordered.<=", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#<=(that:A):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(that: RDDInfo): Boolean", "member" : "scala.math.Ordered.>", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#>(that:A):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(that: RDDInfo): Boolean", "member" : "scala.math.Ordered.<", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#<(that:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/RDDInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/RDDInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/RDDInfo.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.ShuffleBlockBatchId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleBlockBatchId.name", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleBlockBatchId#<init>", "error" : "unsupported entity"}, {"label" : "endReduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockBatchId.endReduceId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#endReduceId:Int", "kind" : "val"}, {"label" : "startReduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockBatchId.startReduceId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#startReduceId:Int", "kind" : "val"}, {"label" : "mapId", "tail" : ": Long", "member" : "org.apache.spark.storage.ShuffleBlockBatchId.mapId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#mapId:Long", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockBatchId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#shuffleId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleBlockBatchId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleBlockChunkId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleBlockChunkId.name", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleBlockChunkId#<init>", "error" : "unsupported entity"}, {"label" : "chunkId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockChunkId.chunkId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#chunkId:Int", "kind" : "val"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockChunkId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#reduceId:Int", "kind" : "val"}, {"label" : "shuffleMergeId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockChunkId.shuffleMergeId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#shuffleMergeId:Int", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockChunkId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#shuffleId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleBlockChunkId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleBlockId.name", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#name:String", "kind" : "def"}, {"label" : "mod", "tail" : ": Long", "member" : "org.apache.spark.storage.ShuffleBlockId.mod", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#mod:Long", "kind" : "var"}, {"label" : "remainder", "tail" : ": Long", "member" : "org.apache.spark.storage.ShuffleBlockId.remainder", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#remainder:Long", "kind" : "var"}, {"member" : "org.apache.spark.storage.ShuffleBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "mapId", "tail" : ": Long", "member" : "org.apache.spark.storage.ShuffleBlockId.mapId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#mapId:Long", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleChecksumBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleChecksumBlockId.name", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleChecksumBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleChecksumBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "mapId", "tail" : ": Long", "member" : "org.apache.spark.storage.ShuffleChecksumBlockId.mapId", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#mapId:Long", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleChecksumBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleChecksumBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleDataBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleDataBlockId.name", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleDataBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleDataBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "mapId", "tail" : ": Long", "member" : "org.apache.spark.storage.ShuffleDataBlockId.mapId", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#mapId:Long", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleDataBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleDataBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleIndexBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleIndexBlockId.name", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleIndexBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleIndexBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "mapId", "tail" : ": Long", "member" : "org.apache.spark.storage.ShuffleIndexBlockId.mapId", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#mapId:Long", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleIndexBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleIndexBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleMergedBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleMergedBlockId.name", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleMergedBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "shuffleMergeId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedBlockId.shuffleMergeId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#shuffleMergeId:Int", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleMergedBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleMergedDataBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleMergedDataBlockId.name", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleMergedDataBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedDataBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "shuffleMergeId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedDataBlockId.shuffleMergeId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#shuffleMergeId:Int", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedDataBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "appId", "tail" : ": String", "member" : "org.apache.spark.storage.ShuffleMergedDataBlockId.appId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#appId:String", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleMergedDataBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleMergedIndexBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleMergedIndexBlockId.name", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleMergedIndexBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedIndexBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "shuffleMergeId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedIndexBlockId.shuffleMergeId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#shuffleMergeId:Int", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedIndexBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "appId", "tail" : ": String", "member" : "org.apache.spark.storage.ShuffleMergedIndexBlockId.appId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#appId:String", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleMergedIndexBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShuffleMergedMetaBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShuffleMergedMetaBlockId.name", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShuffleMergedMetaBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedMetaBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "shuffleMergeId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedMetaBlockId.shuffleMergeId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#shuffleMergeId:Int", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShuffleMergedMetaBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "appId", "tail" : ": String", "member" : "org.apache.spark.storage.ShuffleMergedMetaBlockId.appId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#appId:String", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShuffleMergedMetaBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.ShufflePushBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.ShufflePushBlockId.name", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.ShufflePushBlockId#<init>", "error" : "unsupported entity"}, {"label" : "reduceId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShufflePushBlockId.reduceId", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#reduceId:Int", "kind" : "val"}, {"label" : "mapIndex", "tail" : ": Int", "member" : "org.apache.spark.storage.ShufflePushBlockId.mapIndex", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#mapIndex:Int", "kind" : "val"}, {"label" : "shuffleMergeId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShufflePushBlockId.shuffleMergeId", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#shuffleMergeId:Int", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.storage.ShufflePushBlockId.shuffleId", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#shuffleId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/ShufflePushBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.StorageLevel", "shortDescription" : ":: DeveloperApi ::Flags for controlling the storage of an RDD.", "object" : "org\/apache\/spark\/storage\/StorageLevel$.html", "members_class" : [{"label" : "description", "tail" : "(): String", "member" : "org.apache.spark.storage.StorageLevel.description", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#description:String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.storage.StorageLevel.hashCode", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.StorageLevel.toString", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#toString():String", "kind" : "def"}, {"label" : "readExternal", "tail" : "(in: ObjectInput): Unit", "member" : "org.apache.spark.storage.StorageLevel.readExternal", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#readExternal(in:java.io.ObjectInput):Unit", "kind" : "def"}, {"label" : "writeExternal", "tail" : "(out: ObjectOutput): Unit", "member" : "org.apache.spark.storage.StorageLevel.writeExternal", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#writeExternal(out:java.io.ObjectOutput):Unit", "kind" : "def"}, {"label" : "toInt", "tail" : "(): Int", "member" : "org.apache.spark.storage.StorageLevel.toInt", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#toInt:Int", "kind" : "def"}, {"label" : "isValid", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.StorageLevel.isValid", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#isValid:Boolean", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.apache.spark.storage.StorageLevel.equals", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "clone", "tail" : "(): StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.clone", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#clone():org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "replication", "tail" : "(): Int", "member" : "org.apache.spark.storage.StorageLevel.replication", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#replication:Int", "kind" : "def"}, {"label" : "deserialized", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.StorageLevel.deserialized", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#deserialized:Boolean", "kind" : "def"}, {"label" : "useOffHeap", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.StorageLevel.useOffHeap", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#useOffHeap:Boolean", "kind" : "def"}, {"label" : "useMemory", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.StorageLevel.useMemory", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#useMemory:Boolean", "kind" : "def"}, {"label" : "useDisk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.StorageLevel.useDisk", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#useDisk:Boolean", "kind" : "def"}, {"member" : "org.apache.spark.storage.StorageLevel#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/StorageLevel.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/StorageLevel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(in: ObjectInput): StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.apply", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#apply(in:java.io.ObjectInput):org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "apply", "tail" : "(flags: Int, replication: Int): StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.apply", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#apply(flags:Int,replication:Int):org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "apply", "tail" : "(useDisk: Boolean, useMemory: Boolean, deserialized: Boolean, replication: Int): StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.apply", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#apply(useDisk:Boolean,useMemory:Boolean,deserialized:Boolean,replication:Int):org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "apply", "tail" : "(useDisk: Boolean, useMemory: Boolean, useOffHeap: Boolean, deserialized: Boolean, replication: Int): StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.apply", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#apply(useDisk:Boolean,useMemory:Boolean,useOffHeap:Boolean,deserialized:Boolean,replication:Int):org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "fromString", "tail" : "(s: String): StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.fromString", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#fromString(s:String):org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "OFF_HEAP", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.OFF_HEAP", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#OFF_HEAP:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "MEMORY_AND_DISK_SER_2", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.MEMORY_AND_DISK_SER_2", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#MEMORY_AND_DISK_SER_2:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "MEMORY_AND_DISK_SER", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.MEMORY_AND_DISK_SER", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#MEMORY_AND_DISK_SER:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "MEMORY_AND_DISK_2", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.MEMORY_AND_DISK_2", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#MEMORY_AND_DISK_2:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "MEMORY_AND_DISK", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.MEMORY_AND_DISK", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#MEMORY_AND_DISK:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "MEMORY_ONLY_SER_2", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER_2", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#MEMORY_ONLY_SER_2:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "MEMORY_ONLY_SER", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#MEMORY_ONLY_SER:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "MEMORY_ONLY_2", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.MEMORY_ONLY_2", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#MEMORY_ONLY_2:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "MEMORY_ONLY", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.MEMORY_ONLY", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#MEMORY_ONLY:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "DISK_ONLY_3", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.DISK_ONLY_3", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#DISK_ONLY_3:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "DISK_ONLY_2", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.DISK_ONLY_2", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#DISK_ONLY_2:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "DISK_ONLY", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.DISK_ONLY", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#DISK_ONLY:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "NONE", "tail" : ": StorageLevel", "member" : "org.apache.spark.storage.StorageLevel.NONE", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#NONE:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/StorageLevel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/StorageLevel.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.StreamBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.StreamBlockId.name", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.StreamBlockId#<init>", "error" : "unsupported entity"}, {"label" : "uniqueId", "tail" : ": Long", "member" : "org.apache.spark.storage.StreamBlockId.uniqueId", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#uniqueId:Long", "kind" : "val"}, {"label" : "streamId", "tail" : ": Int", "member" : "org.apache.spark.storage.StreamBlockId.streamId", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#streamId:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/StreamBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/StreamBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.TaskResultBlockId", "shortDescription" : "", "members_case class" : [{"label" : "name", "tail" : "(): String", "member" : "org.apache.spark.storage.TaskResultBlockId.name", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#name:String", "kind" : "def"}, {"member" : "org.apache.spark.storage.TaskResultBlockId#<init>", "error" : "unsupported entity"}, {"label" : "taskId", "tail" : ": Long", "member" : "org.apache.spark.storage.TaskResultBlockId.taskId", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#taskId:Long", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.storage.BlockId.toString", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#toString():String", "kind" : "def"}, {"label" : "isBroadcast", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isBroadcast", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#isBroadcast:Boolean", "kind" : "def"}, {"label" : "isShuffleChunk", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffleChunk", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#isShuffleChunk:Boolean", "kind" : "def"}, {"label" : "isShuffle", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isShuffle", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#isShuffle:Boolean", "kind" : "def"}, {"label" : "isRDD", "tail" : "(): Boolean", "member" : "org.apache.spark.storage.BlockId.isRDD", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#isRDD:Boolean", "kind" : "def"}, {"label" : "asRDDId", "tail" : "(): Option[RDDBlockId]", "member" : "org.apache.spark.storage.BlockId.asRDDId", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#asRDDId:Option[org.apache.spark.storage.RDDBlockId]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/TaskResultBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/storage\/TaskResultBlockId.html", "kind" : "case class"}, {"name" : "org.apache.spark.storage.TimeTrackingOutputStream", "shortDescription" : "Intercepts write calls and tracks total time spent writing in order to update shuffle writemetrics.", "members_class" : [{"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.storage.TimeTrackingOutputStream.close", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#close():Unit", "kind" : "def"}, {"label" : "flush", "tail" : "(): Unit", "member" : "org.apache.spark.storage.TimeTrackingOutputStream.flush", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#flush():Unit", "kind" : "def"}, {"label" : "write", "tail" : "(b: Array[Byte], off: Int, len: Int): Unit", "member" : "org.apache.spark.storage.TimeTrackingOutputStream.write", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#write(b:Array[Byte],off:Int,len:Int):Unit", "kind" : "def"}, {"label" : "write", "tail" : "(b: Array[Byte]): Unit", "member" : "org.apache.spark.storage.TimeTrackingOutputStream.write", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#write(b:Array[Byte]):Unit", "kind" : "def"}, {"label" : "write", "tail" : "(b: Int): Unit", "member" : "org.apache.spark.storage.TimeTrackingOutputStream.write", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#write(b:Int):Unit", "kind" : "def"}, {"member" : "org.apache.spark.storage.TimeTrackingOutputStream#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/TimeTrackingOutputStream.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.TopologyMapper", "shortDescription" : "::DeveloperApi::TopologyMapper provides topology information for a given host", "members_class" : [{"member" : "org.apache.spark.storage.TopologyMapper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getTopologyForHost", "tail" : "(hostname: String): Option[String]", "member" : "org.apache.spark.storage.TopologyMapper.getTopologyForHost", "link" : "org\/apache\/spark\/storage\/TopologyMapper.html#getTopologyForHost(hostname:String):Option[String]", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/storage\/TopologyMapper.html", "kind" : "class"}, {"name" : "org.apache.spark.storage.UnrecognizedBlockId", "shortDescription" : "", "members_class" : [{"member" : "org.apache.spark.storage.UnrecognizedBlockId#<init>", "error" : "unsupported entity"}, {"label" : "getSqlState", "tail" : "(): String", "member" : "org.apache.spark.SparkException.getSqlState", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#getSqlState():String", "kind" : "def"}, {"label" : "getErrorClass", "tail" : "(): String", "member" : "org.apache.spark.SparkException.getErrorClass", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#getErrorClass():String", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/storage\/UnrecognizedBlockId.html", "kind" : "class"}], "org.apache.spark.internal" : [{"name" : "org.apache.spark.internal.Logging", "members_trait" : [{"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/Logging.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/internal\/Logging.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/internal\/Logging.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/Logging.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/Logging.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/Logging.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/Logging.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/Logging.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/internal\/Logging.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/internal\/Logging.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/internal\/Logging.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/internal\/Logging.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/internal\/Logging.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/internal\/Logging.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/internal\/Logging.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/Logging.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/Logging.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/Logging.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/Logging.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/Logging.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/Logging.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/Logging.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/Logging.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/Logging.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/Logging.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/Logging.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/Logging.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/internal\/Logging.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/Logging.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/internal\/Logging.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/internal\/Logging.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/Logging.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/Logging.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/Logging.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Utility trait for classes that want to log data.", "trait" : "org\/apache\/spark\/internal\/Logging.html", "kind" : "trait"}], "org.apache.spark.api.resource" : [{"name" : "org.apache.spark.api.resource.ResourceDiscoveryPlugin", "members_trait" : [{"member" : "org.apache.spark.api.resource.ResourceDiscoveryPlugin#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "discoverResource", "tail" : "(request: ResourceRequest, sparkConf: SparkConf): Optional[ResourceInformation]", "member" : "org.apache.spark.api.resource.ResourceDiscoveryPlugin.discoverResource", "link" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html#discoverResource(request:org.apache.spark.resource.ResourceRequest,sparkConf:org.apache.spark.SparkConf):java.util.Optional[org.apache.spark.resource.ResourceInformation]", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::A plugin that can be dynamically loaded into a Spark application to control how customresources are discovered.", "trait" : "org\/apache\/spark\/api\/resource\/ResourceDiscoveryPlugin.html", "kind" : "trait"}], "org.apache.spark.util.collection.unsafe" : [], "org.apache.spark.partial" : [{"name" : "org.apache.spark.partial.BoundedDouble", "shortDescription" : "A Double value with error bars and associated confidence.", "members_class" : [{"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "org.apache.spark.partial.BoundedDouble.equals", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.partial.BoundedDouble.hashCode", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.partial.BoundedDouble.toString", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#toString():String", "kind" : "def"}, {"member" : "org.apache.spark.partial.BoundedDouble#<init>", "error" : "unsupported entity"}, {"label" : "high", "tail" : ": Double", "member" : "org.apache.spark.partial.BoundedDouble.high", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#high:Double", "kind" : "val"}, {"label" : "low", "tail" : ": Double", "member" : "org.apache.spark.partial.BoundedDouble.low", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#low:Double", "kind" : "val"}, {"label" : "confidence", "tail" : ": Double", "member" : "org.apache.spark.partial.BoundedDouble.confidence", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#confidence:Double", "kind" : "val"}, {"label" : "mean", "tail" : ": Double", "member" : "org.apache.spark.partial.BoundedDouble.mean", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#mean:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/partial\/BoundedDouble.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/partial\/BoundedDouble.html", "kind" : "class"}, {"name" : "org.apache.spark.partial.PartialResult", "shortDescription" : "", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.partial.PartialResult.toString", "link" : "org\/apache\/spark\/partial\/PartialResult.html#toString():String", "kind" : "def"}, {"label" : "map", "tail" : "(f: (R) ⇒ T): PartialResult[T]", "member" : "org.apache.spark.partial.PartialResult.map", "link" : "org\/apache\/spark\/partial\/PartialResult.html#map[T](f:R=>T):org.apache.spark.partial.PartialResult[T]", "kind" : "def"}, {"label" : "onFail", "tail" : "(handler: (Exception) ⇒ Unit): Unit", "member" : "org.apache.spark.partial.PartialResult.onFail", "link" : "org\/apache\/spark\/partial\/PartialResult.html#onFail(handler:Exception=>Unit):Unit", "kind" : "def"}, {"label" : "onComplete", "tail" : "(handler: (R) ⇒ Unit): PartialResult[R]", "member" : "org.apache.spark.partial.PartialResult.onComplete", "link" : "org\/apache\/spark\/partial\/PartialResult.html#onComplete(handler:R=>Unit):org.apache.spark.partial.PartialResult[R]", "kind" : "def"}, {"label" : "getFinalValue", "tail" : "(): R", "member" : "org.apache.spark.partial.PartialResult.getFinalValue", "link" : "org\/apache\/spark\/partial\/PartialResult.html#getFinalValue():R", "kind" : "def"}, {"label" : "isInitialValueFinal", "tail" : "(): Boolean", "member" : "org.apache.spark.partial.PartialResult.isInitialValueFinal", "link" : "org\/apache\/spark\/partial\/PartialResult.html#isInitialValueFinal:Boolean", "kind" : "def"}, {"label" : "initialValue", "tail" : "(): R", "member" : "org.apache.spark.partial.PartialResult.initialValue", "link" : "org\/apache\/spark\/partial\/PartialResult.html#initialValue:R", "kind" : "def"}, {"member" : "org.apache.spark.partial.PartialResult#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/partial\/PartialResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/partial\/PartialResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/partial\/PartialResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/partial\/PartialResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/partial\/PartialResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/partial\/PartialResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/partial\/PartialResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/partial\/PartialResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/partial\/PartialResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/partial\/PartialResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/partial\/PartialResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/partial\/PartialResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/partial\/PartialResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/partial\/PartialResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/partial\/PartialResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/partial\/PartialResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/partial\/PartialResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/partial\/PartialResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/partial\/PartialResult.html", "kind" : "class"}], "net" : [], "org.apache.spark.unsafe.map" : [{"name" : "org.apache.spark.unsafe.map.BytesToBytesMap", "shortDescription" : "An append-only hash map where keys and values are contiguous regions of bytes.", "members_class" : [{"label" : "reset", "tail" : "(): Unit", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.reset", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#reset():Unit", "kind" : "def"}, {"label" : "getArray", "tail" : "(): LongArray", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.getArray", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getArray():org.apache.spark.unsafe.array.LongArray", "kind" : "def"}, {"label" : "getNumDataPages", "tail" : "(): Int", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.getNumDataPages", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getNumDataPages():Int", "kind" : "def"}, {"label" : "getAvgHashProbeBucketListIterations", "tail" : "(): Double", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.getAvgHashProbeBucketListIterations", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getAvgHashProbeBucketListIterations():Double", "kind" : "def"}, {"label" : "getPeakMemoryUsedBytes", "tail" : "(): Long", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.getPeakMemoryUsedBytes", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getPeakMemoryUsedBytes():Long", "kind" : "def"}, {"label" : "getTotalMemoryConsumption", "tail" : "(): Long", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.getTotalMemoryConsumption", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getTotalMemoryConsumption():Long", "kind" : "def"}, {"label" : "getPageSizeBytes", "tail" : "(): Long", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.getPageSizeBytes", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getPageSizeBytes():Long", "kind" : "def"}, {"label" : "getTaskMemoryManager", "tail" : "(): TaskMemoryManager", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.getTaskMemoryManager", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getTaskMemoryManager():org.apache.spark.memory.TaskMemoryManager", "kind" : "def"}, {"label" : "free", "tail" : "(): Unit", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.free", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#free():Unit", "kind" : "def"}, {"label" : "spill", "tail" : "(size: Long, trigger: MemoryConsumer): Long", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.spill", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#spill(size:Long,trigger:org.apache.spark.memory.MemoryConsumer):Long", "kind" : "def"}, {"label" : "Location", "tail" : "", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.Location", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#LocationextendsObject", "kind" : "final class"}, {"label" : "safeLookup", "tail" : "(keyBase: Any, keyOffset: Long, keyLength: Int, loc: Location, hash: Int): Unit", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.safeLookup", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#safeLookup(keyBase:Any,keyOffset:Long,keyLength:Int,loc:BytesToBytesMap.this.Location,hash:Int):Unit", "kind" : "def"}, {"label" : "lookup", "tail" : "(keyBase: Any, keyOffset: Long, keyLength: Int, hash: Int): Location", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.lookup", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#lookup(keyBase:Any,keyOffset:Long,keyLength:Int,hash:Int):BytesToBytesMap.this.Location", "kind" : "def"}, {"label" : "lookup", "tail" : "(keyBase: Any, keyOffset: Long, keyLength: Int): Location", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.lookup", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#lookup(keyBase:Any,keyOffset:Long,keyLength:Int):BytesToBytesMap.this.Location", "kind" : "def"}, {"label" : "maxNumKeysIndex", "tail" : "(): Int", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.maxNumKeysIndex", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#maxNumKeysIndex():Int", "kind" : "def"}, {"label" : "iteratorWithKeyIndex", "tail" : "(): MapIteratorWithKeyIndex", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.iteratorWithKeyIndex", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#iteratorWithKeyIndex():BytesToBytesMap.this.MapIteratorWithKeyIndex", "kind" : "def"}, {"label" : "MapIteratorWithKeyIndex", "tail" : "", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.MapIteratorWithKeyIndex", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#MapIteratorWithKeyIndexextendsIterator[BytesToBytesMap.this.Location]", "kind" : "final class"}, {"label" : "destructiveIterator", "tail" : "(): MapIterator", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.destructiveIterator", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#destructiveIterator():BytesToBytesMap.this.MapIterator", "kind" : "def"}, {"label" : "iterator", "tail" : "(): MapIterator", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.iterator", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#iterator():BytesToBytesMap.this.MapIterator", "kind" : "def"}, {"label" : "MapIterator", "tail" : "", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.MapIterator", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#MapIteratorextendsIterator[BytesToBytesMap.this.Location]", "kind" : "final class"}, {"label" : "numValues", "tail" : "(): Int", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.numValues", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#numValues():Int", "kind" : "def"}, {"label" : "numKeys", "tail" : "(): Int", "member" : "org.apache.spark.unsafe.map.BytesToBytesMap.numKeys", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#numKeys():Int", "kind" : "def"}, {"member" : "org.apache.spark.unsafe.map.BytesToBytesMap#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.unsafe.map.BytesToBytesMap#<init>", "error" : "unsupported entity"}, {"label" : "freeMemory", "tail" : "(size: Long): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freeMemory", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#freeMemory(size:Long):Unit", "kind" : "def"}, {"label" : "acquireMemory", "tail" : "(size: Long): Long", "member" : "org.apache.spark.memory.MemoryConsumer.acquireMemory", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#acquireMemory(size:Long):Long", "kind" : "def"}, {"label" : "freePage", "tail" : "(page: MemoryBlock): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freePage", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#freePage(page:org.apache.spark.unsafe.memory.MemoryBlock):Unit", "kind" : "def"}, {"label" : "allocatePage", "tail" : "(required: Long): MemoryBlock", "member" : "org.apache.spark.memory.MemoryConsumer.allocatePage", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#allocatePage(required:Long):org.apache.spark.unsafe.memory.MemoryBlock", "kind" : "def"}, {"label" : "freeArray", "tail" : "(array: LongArray): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freeArray", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#freeArray(array:org.apache.spark.unsafe.array.LongArray):Unit", "kind" : "def"}, {"label" : "allocateArray", "tail" : "(size: Long): LongArray", "member" : "org.apache.spark.memory.MemoryConsumer.allocateArray", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#allocateArray(size:Long):org.apache.spark.unsafe.array.LongArray", "kind" : "def"}, {"label" : "spill", "tail" : "(): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.spill", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#spill():Unit", "kind" : "def"}, {"label" : "getUsed", "tail" : "(): Long", "member" : "org.apache.spark.memory.MemoryConsumer.getUsed", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getUsed():Long", "kind" : "def"}, {"label" : "getMode", "tail" : "(): MemoryMode", "member" : "org.apache.spark.memory.MemoryConsumer.getMode", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getMode():org.apache.spark.memory.MemoryMode", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/unsafe\/map\/BytesToBytesMap.html", "kind" : "class"}, {"name" : "org.apache.spark.unsafe.map.HashMapGrowthStrategy", "members_trait" : [{"member" : "org.apache.spark.unsafe.map.HashMapGrowthStrategy#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nextCapacity", "tail" : "(currentCapacity: Int): Int", "member" : "org.apache.spark.unsafe.map.HashMapGrowthStrategy.nextCapacity", "link" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html#nextCapacity(currentCapacity:Int):Int", "kind" : "abstract def"}], "shortDescription" : "Interface that defines how we can grow the size of a hash map when it is over a threshold.", "trait" : "org\/apache\/spark\/unsafe\/map\/HashMapGrowthStrategy.html", "kind" : "trait"}], "org.apache.spark.unsafe" : [], "net.jpountz" : [], "org.apache.spark.api.java.function" : [{"name" : "org.apache.spark.api.java.function.CoGroupFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.CoGroupFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(key: K, left: Iterator[V1], right: Iterator[V2]): Iterator[R]", "member" : "org.apache.spark.api.java.function.CoGroupFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html#call(key:K,left:java.util.Iterator[V1],right:java.util.Iterator[V2]):java.util.Iterator[R]", "kind" : "abstract def"}], "shortDescription" : "A function that returns zero or more output records from each grouping key and its values from 2Datasets.", "trait" : "org\/apache\/spark\/api\/java\/function\/CoGroupFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.DoubleFlatMapFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.DoubleFlatMapFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t: T): Iterator[Double]", "member" : "org.apache.spark.api.java.function.DoubleFlatMapFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html#call(t:T):java.util.Iterator[Double]", "kind" : "abstract def"}], "shortDescription" : "A function that returns zero or more records of type Double from each input record.", "trait" : "org\/apache\/spark\/api\/java\/function\/DoubleFlatMapFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.DoubleFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.DoubleFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t: T): Double", "member" : "org.apache.spark.api.java.function.DoubleFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html#call(t:T):Double", "kind" : "abstract def"}], "shortDescription" : " A function that returns Doubles, and can be used to construct DoubleRDDs.", "trait" : "org\/apache\/spark\/api\/java\/function\/DoubleFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.FilterFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.FilterFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(value: T): Boolean", "member" : "org.apache.spark.api.java.function.FilterFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html#call(value:T):Boolean", "kind" : "abstract def"}], "shortDescription" : "Base interface for a function used in Dataset's filter function.", "trait" : "org\/apache\/spark\/api\/java\/function\/FilterFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.FlatMapFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.FlatMapFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t: T): Iterator[R]", "member" : "org.apache.spark.api.java.function.FlatMapFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html#call(t:T):java.util.Iterator[R]", "kind" : "abstract def"}], "shortDescription" : "A function that returns zero or more output records from each input record.", "trait" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.FlatMapFunction2", "members_trait" : [{"member" : "org.apache.spark.api.java.function.FlatMapFunction2#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t1: T1, t2: T2): Iterator[R]", "member" : "org.apache.spark.api.java.function.FlatMapFunction2.call", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html#call(t1:T1,t2:T2):java.util.Iterator[R]", "kind" : "abstract def"}], "shortDescription" : "A function that takes two inputs and returns zero or more output records.", "trait" : "org\/apache\/spark\/api\/java\/function\/FlatMapFunction2.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.FlatMapGroupsFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.FlatMapGroupsFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(key: K, values: Iterator[V]): Iterator[R]", "member" : "org.apache.spark.api.java.function.FlatMapGroupsFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html#call(key:K,values:java.util.Iterator[V]):java.util.Iterator[R]", "kind" : "abstract def"}], "shortDescription" : "A function that returns zero or more output records from each grouping key and its values.", "trait" : "org\/apache\/spark\/api\/java\/function\/FlatMapGroupsFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.ForeachFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.ForeachFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t: T): Unit", "member" : "org.apache.spark.api.java.function.ForeachFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html#call(t:T):Unit", "kind" : "abstract def"}], "shortDescription" : "Base interface for a function used in Dataset's foreach function.", "trait" : "org\/apache\/spark\/api\/java\/function\/ForeachFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.ForeachPartitionFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.ForeachPartitionFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t: Iterator[T]): Unit", "member" : "org.apache.spark.api.java.function.ForeachPartitionFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html#call(t:java.util.Iterator[T]):Unit", "kind" : "abstract def"}], "shortDescription" : "Base interface for a function used in Dataset's foreachPartition function.", "trait" : "org\/apache\/spark\/api\/java\/function\/ForeachPartitionFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.Function", "members_trait" : [{"member" : "org.apache.spark.api.java.function.Function#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(v1: T1): R", "member" : "org.apache.spark.api.java.function.Function.call", "link" : "org\/apache\/spark\/api\/java\/function\/Function.html#call(v1:T1):R", "kind" : "abstract def"}], "shortDescription" : "Base interface for functions whose return types do not create special RDDs.", "trait" : "org\/apache\/spark\/api\/java\/function\/Function.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.Function0", "members_trait" : [{"member" : "org.apache.spark.api.java.function.Function0#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(): R", "member" : "org.apache.spark.api.java.function.Function0.call", "link" : "org\/apache\/spark\/api\/java\/function\/Function0.html#call():R", "kind" : "abstract def"}], "shortDescription" : "A zero-argument function that returns an R.", "trait" : "org\/apache\/spark\/api\/java\/function\/Function0.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.Function2", "members_trait" : [{"member" : "org.apache.spark.api.java.function.Function2#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(v1: T1, v2: T2): R", "member" : "org.apache.spark.api.java.function.Function2.call", "link" : "org\/apache\/spark\/api\/java\/function\/Function2.html#call(v1:T1,v2:T2):R", "kind" : "abstract def"}], "shortDescription" : "A two-argument function that takes arguments of type T1 and T2 and returns an R.", "trait" : "org\/apache\/spark\/api\/java\/function\/Function2.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.Function3", "members_trait" : [{"member" : "org.apache.spark.api.java.function.Function3#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(v1: T1, v2: T2, v3: T3): R", "member" : "org.apache.spark.api.java.function.Function3.call", "link" : "org\/apache\/spark\/api\/java\/function\/Function3.html#call(v1:T1,v2:T2,v3:T3):R", "kind" : "abstract def"}], "shortDescription" : "A three-argument function that takes arguments of type T1, T2 and T3 and returns an R.", "trait" : "org\/apache\/spark\/api\/java\/function\/Function3.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.Function4", "members_trait" : [{"member" : "org.apache.spark.api.java.function.Function4#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(v1: T1, v2: T2, v3: T3, v4: T4): R", "member" : "org.apache.spark.api.java.function.Function4.call", "link" : "org\/apache\/spark\/api\/java\/function\/Function4.html#call(v1:T1,v2:T2,v3:T3,v4:T4):R", "kind" : "abstract def"}], "shortDescription" : "A four-argument function that takes arguments of type T1, T2, T3 and T4 and returns an R.", "trait" : "org\/apache\/spark\/api\/java\/function\/Function4.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.MapFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.MapFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(value: T): U", "member" : "org.apache.spark.api.java.function.MapFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html#call(value:T):U", "kind" : "abstract def"}], "shortDescription" : "Base interface for a map function used in Dataset's map function.", "trait" : "org\/apache\/spark\/api\/java\/function\/MapFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.MapGroupsFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.MapGroupsFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(key: K, values: Iterator[V]): R", "member" : "org.apache.spark.api.java.function.MapGroupsFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html#call(key:K,values:java.util.Iterator[V]):R", "kind" : "abstract def"}], "shortDescription" : "Base interface for a map function used in GroupedDataset's mapGroup function.", "trait" : "org\/apache\/spark\/api\/java\/function\/MapGroupsFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.MapPartitionsFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.MapPartitionsFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(input: Iterator[T]): Iterator[U]", "member" : "org.apache.spark.api.java.function.MapPartitionsFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html#call(input:java.util.Iterator[T]):java.util.Iterator[U]", "kind" : "abstract def"}], "shortDescription" : "Base interface for function used in Dataset's mapPartitions.", "trait" : "org\/apache\/spark\/api\/java\/function\/MapPartitionsFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.PairFlatMapFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.PairFlatMapFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t: T): Iterator[(K, V)]", "member" : "org.apache.spark.api.java.function.PairFlatMapFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html#call(t:T):java.util.Iterator[(K,V)]", "kind" : "abstract def"}], "shortDescription" : "A function that returns zero or more key-value pair records from each input record.", "trait" : "org\/apache\/spark\/api\/java\/function\/PairFlatMapFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.PairFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.PairFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t: T): (K, V)", "member" : "org.apache.spark.api.java.function.PairFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html#call(t:T):(K,V)", "kind" : "abstract def"}], "shortDescription" : "A function that returns key-value pairs (Tuple2&lt;K, V&gt;), and can be used toconstruct PairRDDs.", "trait" : "org\/apache\/spark\/api\/java\/function\/PairFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.ReduceFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.ReduceFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(v1: T, v2: T): T", "member" : "org.apache.spark.api.java.function.ReduceFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html#call(v1:T,v2:T):T", "kind" : "abstract def"}], "shortDescription" : "Base interface for function used in Dataset's reduce.", "trait" : "org\/apache\/spark\/api\/java\/function\/ReduceFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.VoidFunction", "members_trait" : [{"member" : "org.apache.spark.api.java.function.VoidFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(t: T): Unit", "member" : "org.apache.spark.api.java.function.VoidFunction.call", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html#call(t:T):Unit", "kind" : "abstract def"}], "shortDescription" : "A function with no return value.", "trait" : "org\/apache\/spark\/api\/java\/function\/VoidFunction.html", "kind" : "trait"}, {"name" : "org.apache.spark.api.java.function.VoidFunction2", "members_trait" : [{"member" : "org.apache.spark.api.java.function.VoidFunction2#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "call", "tail" : "(v1: T1, v2: T2): Unit", "member" : "org.apache.spark.api.java.function.VoidFunction2.call", "link" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html#call(v1:T1,v2:T2):Unit", "kind" : "abstract def"}], "shortDescription" : "A two-argument function that takes arguments of type T1 and T2 with no return value.", "trait" : "org\/apache\/spark\/api\/java\/function\/VoidFunction2.html", "kind" : "trait"}], "org.apache.spark.serializer" : [{"name" : "org.apache.spark.serializer.DeserializationStream", "shortDescription" : ":: DeveloperApi ::A stream for reading serialized objects.", "members_class" : [{"label" : "asKeyValueIterator", "tail" : "(): Iterator[(Any, Any)]", "member" : "org.apache.spark.serializer.DeserializationStream.asKeyValueIterator", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#asKeyValueIterator:Iterator[(Any,Any)]", "kind" : "def"}, {"label" : "asIterator", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.serializer.DeserializationStream.asIterator", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#asIterator:Iterator[Any]", "kind" : "def"}, {"label" : "readValue", "tail" : "()(arg0: ClassTag[T]): T", "member" : "org.apache.spark.serializer.DeserializationStream.readValue", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#readValue[T]()(implicitevidence$10:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "readKey", "tail" : "()(arg0: ClassTag[T]): T", "member" : "org.apache.spark.serializer.DeserializationStream.readKey", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#readKey[T]()(implicitevidence$9:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"member" : "org.apache.spark.serializer.DeserializationStream#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.serializer.DeserializationStream.close", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#close():Unit", "kind" : "abstract def"}, {"label" : "readObject", "tail" : "()(arg0: ClassTag[T]): T", "member" : "org.apache.spark.serializer.DeserializationStream.readObject", "link" : "org\/apache\/spark\/serializer\/DeserializationStream.html#readObject[T]()(implicitevidence$8:scala.reflect.ClassTag[T]):T", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/serializer\/DeserializationStream.html", "kind" : "class"}, {"name" : "org.apache.spark.serializer.DummySerializerInstance", "shortDescription" : "Unfortunately, we need a serializer instance in order to construct a DiskBlockObjectWriter.", "members_class" : [{"label" : "deserialize", "tail" : "(bytes: ByteBuffer, ev1: ClassTag[T]): T", "member" : "org.apache.spark.serializer.DummySerializerInstance.deserialize", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#deserialize[T](bytes:java.nio.ByteBuffer,ev1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "deserialize", "tail" : "(bytes: ByteBuffer, loader: ClassLoader, ev1: ClassTag[T]): T", "member" : "org.apache.spark.serializer.DummySerializerInstance.deserialize", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#deserialize[T](bytes:java.nio.ByteBuffer,loader:ClassLoader,ev1:scala.reflect.ClassTag[T]):T", "kind" : "def"}, {"label" : "deserializeStream", "tail" : "(s: InputStream): DeserializationStream", "member" : "org.apache.spark.serializer.DummySerializerInstance.deserializeStream", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#deserializeStream(s:java.io.InputStream):org.apache.spark.serializer.DeserializationStream", "kind" : "def"}, {"label" : "serialize", "tail" : "(t: T, ev1: ClassTag[T]): ByteBuffer", "member" : "org.apache.spark.serializer.DummySerializerInstance.serialize", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#serialize[T](t:T,ev1:scala.reflect.ClassTag[T]):java.nio.ByteBuffer", "kind" : "def"}, {"label" : "serializeStream", "tail" : "(s: OutputStream): SerializationStream", "member" : "org.apache.spark.serializer.DummySerializerInstance.serializeStream", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#serializeStream(s:java.io.OutputStream):org.apache.spark.serializer.SerializationStream", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deserialize", "tail" : "(bytes: ByteBuffer, loader: ClassLoader)(arg0: ClassTag[T]): T", "member" : "org.apache.spark.serializer.SerializerInstance.deserialize", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#deserialize[T](bytes:java.nio.ByteBuffer,loader:ClassLoader)(implicitevidence$3:scala.reflect.ClassTag[T]):T", "kind" : "abstract def"}, {"label" : "deserialize", "tail" : "(bytes: ByteBuffer)(arg0: ClassTag[T]): T", "member" : "org.apache.spark.serializer.SerializerInstance.deserialize", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#deserialize[T](bytes:java.nio.ByteBuffer)(implicitevidence$2:scala.reflect.ClassTag[T]):T", "kind" : "abstract def"}, {"label" : "serialize", "tail" : "(t: T)(arg0: ClassTag[T]): ByteBuffer", "member" : "org.apache.spark.serializer.SerializerInstance.serialize", "link" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html#serialize[T](t:T)(implicitevidence$1:scala.reflect.ClassTag[T]):java.nio.ByteBuffer", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/serializer\/DummySerializerInstance.html", "kind" : "class"}, {"name" : "org.apache.spark.serializer.JavaSerializer", "shortDescription" : ":: DeveloperApi ::A Spark serializer that uses Java's built-in serialization.", "members_class" : [{"label" : "readExternal", "tail" : "(in: ObjectInput): Unit", "member" : "org.apache.spark.serializer.JavaSerializer.readExternal", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#readExternal(in:java.io.ObjectInput):Unit", "kind" : "def"}, {"label" : "writeExternal", "tail" : "(out: ObjectOutput): Unit", "member" : "org.apache.spark.serializer.JavaSerializer.writeExternal", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#writeExternal(out:java.io.ObjectOutput):Unit", "kind" : "def"}, {"label" : "newInstance", "tail" : "(): SerializerInstance", "member" : "org.apache.spark.serializer.JavaSerializer.newInstance", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#newInstance():org.apache.spark.serializer.SerializerInstance", "kind" : "def"}, {"member" : "org.apache.spark.serializer.JavaSerializer#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.serializer.JavaSerializer#<init>", "error" : "unsupported entity"}, {"label" : "setDefaultClassLoader", "tail" : "(classLoader: ClassLoader): Serializer", "member" : "org.apache.spark.serializer.Serializer.setDefaultClassLoader", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#setDefaultClassLoader(classLoader:ClassLoader):org.apache.spark.serializer.Serializer", "kind" : "def"}, {"label" : "defaultClassLoader", "tail" : ": Option[ClassLoader]", "member" : "org.apache.spark.serializer.Serializer.defaultClassLoader", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#defaultClassLoader:Option[ClassLoader]", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/serializer\/JavaSerializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/serializer\/JavaSerializer.html", "kind" : "class"}, {"name" : "org.apache.spark.serializer.KryoRegistrator", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "registerClasses", "tail" : "(kryo: Kryo): Unit", "member" : "org.apache.spark.serializer.KryoRegistrator.registerClasses", "link" : "org\/apache\/spark\/serializer\/KryoRegistrator.html#registerClasses(kryo:com.esotericsoftware.kryo.Kryo):Unit", "kind" : "abstract def"}], "shortDescription" : "Interface implemented by clients to register their classes with Kryo when using Kryoserialization.", "trait" : "org\/apache\/spark\/serializer\/KryoRegistrator.html", "kind" : "trait"}, {"name" : "org.apache.spark.serializer.KryoSerializer", "shortDescription" : "A Spark serializer that uses the Kryo serialization library.", "members_class" : [{"label" : "newInstance", "tail" : "(): SerializerInstance", "member" : "org.apache.spark.serializer.KryoSerializer.newInstance", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#newInstance():org.apache.spark.serializer.SerializerInstance", "kind" : "def"}, {"label" : "setDefaultClassLoader", "tail" : "(classLoader: ClassLoader): Serializer", "member" : "org.apache.spark.serializer.KryoSerializer.setDefaultClassLoader", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#setDefaultClassLoader(classLoader:ClassLoader):org.apache.spark.serializer.Serializer", "kind" : "def"}, {"label" : "newKryo", "tail" : "(): Kryo", "member" : "org.apache.spark.serializer.KryoSerializer.newKryo", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#newKryo():com.esotericsoftware.kryo.Kryo", "kind" : "def"}, {"label" : "pool", "tail" : "(): KryoPool", "member" : "org.apache.spark.serializer.KryoSerializer.pool", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#pool:com.esotericsoftware.kryo.pool.KryoPool", "kind" : "def"}, {"label" : "newKryoOutput", "tail" : "(): Output", "member" : "org.apache.spark.serializer.KryoSerializer.newKryoOutput", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#newKryoOutput():com.esotericsoftware.kryo.io.Output", "kind" : "def"}, {"label" : "maxBufferSizeMb", "tail" : ": Int", "member" : "org.apache.spark.serializer.KryoSerializer.maxBufferSizeMb", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#maxBufferSizeMb:Int", "kind" : "val"}, {"member" : "org.apache.spark.serializer.KryoSerializer#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#logName:String", "kind" : "def"}, {"label" : "defaultClassLoader", "tail" : ": Option[ClassLoader]", "member" : "org.apache.spark.serializer.Serializer.defaultClassLoader", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#defaultClassLoader:Option[ClassLoader]", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/serializer\/KryoSerializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/serializer\/KryoSerializer.html", "kind" : "class"}, {"name" : "org.apache.spark.serializer.SerializationStream", "shortDescription" : ":: DeveloperApi ::A stream for writing serialized objects.", "members_class" : [{"label" : "writeAll", "tail" : "(iter: Iterator[T])(arg0: ClassTag[T]): SerializationStream", "member" : "org.apache.spark.serializer.SerializationStream.writeAll", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#writeAll[T](iter:Iterator[T])(implicitevidence$7:scala.reflect.ClassTag[T]):org.apache.spark.serializer.SerializationStream", "kind" : "def"}, {"label" : "writeValue", "tail" : "(value: T)(arg0: ClassTag[T]): SerializationStream", "member" : "org.apache.spark.serializer.SerializationStream.writeValue", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#writeValue[T](value:T)(implicitevidence$6:scala.reflect.ClassTag[T]):org.apache.spark.serializer.SerializationStream", "kind" : "def"}, {"label" : "writeKey", "tail" : "(key: T)(arg0: ClassTag[T]): SerializationStream", "member" : "org.apache.spark.serializer.SerializationStream.writeKey", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#writeKey[T](key:T)(implicitevidence$5:scala.reflect.ClassTag[T]):org.apache.spark.serializer.SerializationStream", "kind" : "def"}, {"member" : "org.apache.spark.serializer.SerializationStream#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(): Unit", "member" : "org.apache.spark.serializer.SerializationStream.close", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#close():Unit", "kind" : "abstract def"}, {"label" : "flush", "tail" : "(): Unit", "member" : "org.apache.spark.serializer.SerializationStream.flush", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#flush():Unit", "kind" : "abstract def"}, {"label" : "writeObject", "tail" : "(t: T)(arg0: ClassTag[T]): SerializationStream", "member" : "org.apache.spark.serializer.SerializationStream.writeObject", "link" : "org\/apache\/spark\/serializer\/SerializationStream.html#writeObject[T](t:T)(implicitevidence$4:scala.reflect.ClassTag[T]):org.apache.spark.serializer.SerializationStream", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/serializer\/SerializationStream.html", "kind" : "class"}, {"name" : "org.apache.spark.serializer.Serializer", "shortDescription" : ":: DeveloperApi ::A serializer.", "members_class" : [{"label" : "setDefaultClassLoader", "tail" : "(classLoader: ClassLoader): Serializer", "member" : "org.apache.spark.serializer.Serializer.setDefaultClassLoader", "link" : "org\/apache\/spark\/serializer\/Serializer.html#setDefaultClassLoader(classLoader:ClassLoader):org.apache.spark.serializer.Serializer", "kind" : "def"}, {"label" : "defaultClassLoader", "tail" : ": Option[ClassLoader]", "member" : "org.apache.spark.serializer.Serializer.defaultClassLoader", "link" : "org\/apache\/spark\/serializer\/Serializer.html#defaultClassLoader:Option[ClassLoader]", "kind" : "var"}, {"member" : "org.apache.spark.serializer.Serializer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/serializer\/Serializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/serializer\/Serializer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/serializer\/Serializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/serializer\/Serializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/serializer\/Serializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/serializer\/Serializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/serializer\/Serializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/Serializer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/Serializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/Serializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/serializer\/Serializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/serializer\/Serializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/serializer\/Serializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/serializer\/Serializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/serializer\/Serializer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/serializer\/Serializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/serializer\/Serializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/serializer\/Serializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/serializer\/Serializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "newInstance", "tail" : "(): SerializerInstance", "member" : "org.apache.spark.serializer.Serializer.newInstance", "link" : "org\/apache\/spark\/serializer\/Serializer.html#newInstance():org.apache.spark.serializer.SerializerInstance", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/serializer\/Serializer.html", "kind" : "class"}, {"name" : "org.apache.spark.serializer.SerializerInstance", "shortDescription" : ":: DeveloperApi ::An instance of a serializer, for use by one thread at a time.", "members_class" : [{"member" : "org.apache.spark.serializer.SerializerInstance#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deserializeStream", "tail" : "(s: InputStream): DeserializationStream", "member" : "org.apache.spark.serializer.SerializerInstance.deserializeStream", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#deserializeStream(s:java.io.InputStream):org.apache.spark.serializer.DeserializationStream", "kind" : "abstract def"}, {"label" : "serializeStream", "tail" : "(s: OutputStream): SerializationStream", "member" : "org.apache.spark.serializer.SerializerInstance.serializeStream", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#serializeStream(s:java.io.OutputStream):org.apache.spark.serializer.SerializationStream", "kind" : "abstract def"}, {"label" : "deserialize", "tail" : "(bytes: ByteBuffer, loader: ClassLoader)(arg0: ClassTag[T]): T", "member" : "org.apache.spark.serializer.SerializerInstance.deserialize", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#deserialize[T](bytes:java.nio.ByteBuffer,loader:ClassLoader)(implicitevidence$3:scala.reflect.ClassTag[T]):T", "kind" : "abstract def"}, {"label" : "deserialize", "tail" : "(bytes: ByteBuffer)(arg0: ClassTag[T]): T", "member" : "org.apache.spark.serializer.SerializerInstance.deserialize", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#deserialize[T](bytes:java.nio.ByteBuffer)(implicitevidence$2:scala.reflect.ClassTag[T]):T", "kind" : "abstract def"}, {"label" : "serialize", "tail" : "(t: T)(arg0: ClassTag[T]): ByteBuffer", "member" : "org.apache.spark.serializer.SerializerInstance.serialize", "link" : "org\/apache\/spark\/serializer\/SerializerInstance.html#serialize[T](t:T)(implicitevidence$1:scala.reflect.ClassTag[T]):java.nio.ByteBuffer", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/serializer\/SerializerInstance.html", "kind" : "class"}], "org.apache.hadoop.shaded.net.jpountz.lz4" : [{"name" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Compressor", "shortDescription" : "TODO(SPARK-36679): A temporary workaround for SPARK-36669.", "members_class" : [{"label" : "compress", "tail" : "(src: ByteBuffer, dest: ByteBuffer): Unit", "member" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Compressor.compress", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#compress(src:java.nio.ByteBuffer,dest:java.nio.ByteBuffer):Unit", "kind" : "def"}, {"member" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Compressor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Compressor.html", "kind" : "class"}, {"name" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Factory", "shortDescription" : "TODO(SPARK-36679): A temporary workaround for SPARK-36669.", "members_class" : [{"label" : "safeDecompressor", "tail" : "(): LZ4SafeDecompressor", "member" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Factory.safeDecompressor", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#safeDecompressor():org.apache.hadoop.shaded.net.jpountz.lz4.LZ4SafeDecompressor", "kind" : "def"}, {"label" : "fastCompressor", "tail" : "(): LZ4Compressor", "member" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Factory.fastCompressor", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#fastCompressor():org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Compressor", "kind" : "def"}, {"label" : "highCompressor", "tail" : "(): LZ4Compressor", "member" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Factory.highCompressor", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#highCompressor():org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Compressor", "kind" : "def"}, {"member" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4Factory#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4Factory.html", "kind" : "class"}, {"name" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4SafeDecompressor", "shortDescription" : "TODO(SPARK-36679): A temporary workaround for SPARK-36669.", "members_class" : [{"label" : "decompress", "tail" : "(src: ByteBuffer, dest: ByteBuffer): Unit", "member" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4SafeDecompressor.decompress", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#decompress(src:java.nio.ByteBuffer,dest:java.nio.ByteBuffer):Unit", "kind" : "def"}, {"member" : "org.apache.hadoop.shaded.net.jpountz.lz4.LZ4SafeDecompressor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/hadoop\/shaded\/net\/jpountz\/lz4\/LZ4SafeDecompressor.html", "kind" : "class"}], "org.apache.spark.deploy.worker" : [{"name" : "org.apache.spark.deploy.worker.DriverWrapper", "shortDescription" : "Utility object for launching driver programs such that they share fate with the Worker process.", "object" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.apache.spark.deploy.worker.DriverWrapper.main", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/worker\/DriverWrapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.metrics" : [{"name" : "org.apache.spark.metrics.DirectPoolMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/DirectPoolMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.ExecutorMetricType", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Executor metric types for executor-level metrics stored in ExecutorMetrics.", "trait" : "org\/apache\/spark\/metrics\/ExecutorMetricType.html", "kind" : "trait"}, {"name" : "org.apache.spark.metrics.GarbageCollectionMetrics", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html", "members_object" : [{"label" : "names", "tail" : ": Seq[String]", "member" : "org.apache.spark.metrics.GarbageCollectionMetrics.names", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#names:Seq[String]", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/GarbageCollectionMetrics$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.JVMHeapMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/JVMHeapMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.JVMOffHeapMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/JVMOffHeapMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.MappedPoolMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/MappedPoolMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.OffHeapExecutionMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/OffHeapExecutionMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.OffHeapStorageMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/OffHeapStorageMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.OffHeapUnifiedMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/OffHeapUnifiedMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.OnHeapExecutionMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/OnHeapExecutionMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.OnHeapStorageMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/OnHeapStorageMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.OnHeapUnifiedMemory", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/OnHeapUnifiedMemory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.ProcessTreeMetrics", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html", "members_object" : [{"label" : "names", "tail" : ": Seq[String]", "member" : "org.apache.spark.metrics.ProcessTreeMetrics.names", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#names:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/ProcessTreeMetrics$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.SingleValueExecutorMetricType", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/metrics\/SingleValueExecutorMetricType.html", "kind" : "trait"}], "org.apache.spark.network.netty" : [{"name" : "org.apache.spark.network.netty.NettyBlockRpcServer", "shortDescription" : "Serves requests to open blocks by simply registering one chunk per block requested.", "members_class" : [{"label" : "getStreamManager", "tail" : "(): StreamManager", "member" : "org.apache.spark.network.netty.NettyBlockRpcServer.getStreamManager", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#getStreamManager():org.apache.spark.network.server.StreamManager", "kind" : "def"}, {"label" : "receiveStream", "tail" : "(client: TransportClient, messageHeader: ByteBuffer, responseContext: RpcResponseCallback): StreamCallbackWithID", "member" : "org.apache.spark.network.netty.NettyBlockRpcServer.receiveStream", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#receiveStream(client:org.apache.spark.network.client.TransportClient,messageHeader:java.nio.ByteBuffer,responseContext:org.apache.spark.network.client.RpcResponseCallback):org.apache.spark.network.client.StreamCallbackWithID", "kind" : "def"}, {"label" : "receive", "tail" : "(client: TransportClient, rpcMessage: ByteBuffer, responseContext: RpcResponseCallback): Unit", "member" : "org.apache.spark.network.netty.NettyBlockRpcServer.receive", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#receive(client:org.apache.spark.network.client.TransportClient,rpcMessage:java.nio.ByteBuffer,responseContext:org.apache.spark.network.client.RpcResponseCallback):Unit", "kind" : "def"}, {"member" : "org.apache.spark.network.netty.NettyBlockRpcServer#<init>", "error" : "unsupported entity"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#logName:String", "kind" : "def"}, {"label" : "exceptionCaught", "tail" : "(arg0: Throwable, arg1: TransportClient): Unit", "member" : "org.apache.spark.network.server.RpcHandler.exceptionCaught", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#exceptionCaught(x$1:Throwable,x$2:org.apache.spark.network.client.TransportClient):Unit", "kind" : "def"}, {"label" : "channelInactive", "tail" : "(arg0: TransportClient): Unit", "member" : "org.apache.spark.network.server.RpcHandler.channelInactive", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#channelInactive(x$1:org.apache.spark.network.client.TransportClient):Unit", "kind" : "def"}, {"label" : "channelActive", "tail" : "(arg0: TransportClient): Unit", "member" : "org.apache.spark.network.server.RpcHandler.channelActive", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#channelActive(x$1:org.apache.spark.network.client.TransportClient):Unit", "kind" : "def"}, {"label" : "getMergedBlockMetaReqHandler", "tail" : "(): MergedBlockMetaReqHandler", "member" : "org.apache.spark.network.server.RpcHandler.getMergedBlockMetaReqHandler", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#getMergedBlockMetaReqHandler():org.apache.spark.network.server.RpcHandler.MergedBlockMetaReqHandler", "kind" : "def"}, {"label" : "receive", "tail" : "(arg0: TransportClient, arg1: ByteBuffer): Unit", "member" : "org.apache.spark.network.server.RpcHandler.receive", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#receive(x$1:org.apache.spark.network.client.TransportClient,x$2:java.nio.ByteBuffer):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/network\/netty\/NettyBlockRpcServer.html", "kind" : "class"}, {"name" : "org.apache.spark.network.netty.SparkTransportConf", "shortDescription" : "Provides a utility for transforming from a SparkConf inside a Spark JVM (e.g., Executor,Driver, or a standalone shuffle service) into a TransportConf with details on our environmentlike the number of cores that are allocated to this JVM.", "object" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html", "members_object" : [{"label" : "fromSparkConf", "tail" : "(_conf: SparkConf, module: String, numUsableCores: Int, role: Option[String]): TransportConf", "member" : "org.apache.spark.network.netty.SparkTransportConf.fromSparkConf", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#fromSparkConf(_conf:org.apache.spark.SparkConf,module:String,numUsableCores:Int,role:Option[String]):org.apache.spark.network.util.TransportConf", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/network\/netty\/SparkTransportConf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.status" : [], "org.apache.hadoop.shaded.net.jpountz" : [], "org.apache.hadoop.shaded" : [], "org.apache.spark.metrics.source" : [{"name" : "org.apache.spark.metrics.source.CodegenMetrics", "shortDescription" : "Metrics for code generation.", "object" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html", "members_object" : [{"label" : "METRIC_GENERATED_METHOD_BYTECODE_SIZE", "tail" : ": Histogram", "member" : "org.apache.spark.metrics.source.CodegenMetrics.METRIC_GENERATED_METHOD_BYTECODE_SIZE", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#METRIC_GENERATED_METHOD_BYTECODE_SIZE:com.codahale.metrics.Histogram", "kind" : "val"}, {"label" : "METRIC_GENERATED_CLASS_BYTECODE_SIZE", "tail" : ": Histogram", "member" : "org.apache.spark.metrics.source.CodegenMetrics.METRIC_GENERATED_CLASS_BYTECODE_SIZE", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#METRIC_GENERATED_CLASS_BYTECODE_SIZE:com.codahale.metrics.Histogram", "kind" : "val"}, {"label" : "METRIC_COMPILATION_TIME", "tail" : ": Histogram", "member" : "org.apache.spark.metrics.source.CodegenMetrics.METRIC_COMPILATION_TIME", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#METRIC_COMPILATION_TIME:com.codahale.metrics.Histogram", "kind" : "val"}, {"label" : "METRIC_SOURCE_CODE_SIZE", "tail" : ": Histogram", "member" : "org.apache.spark.metrics.source.CodegenMetrics.METRIC_SOURCE_CODE_SIZE", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#METRIC_SOURCE_CODE_SIZE:com.codahale.metrics.Histogram", "kind" : "val"}, {"label" : "metricRegistry", "tail" : ": MetricRegistry", "member" : "org.apache.spark.metrics.source.CodegenMetrics.metricRegistry", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#metricRegistry:com.codahale.metrics.MetricRegistry", "kind" : "val"}, {"label" : "sourceName", "tail" : ": String", "member" : "org.apache.spark.metrics.source.CodegenMetrics.sourceName", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#sourceName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/CodegenMetrics$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.source.DoubleAccumulatorSource", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html", "members_class" : [{"member" : "org.apache.spark.metrics.source.DoubleAccumulatorSource#<init>", "error" : "unsupported entity"}, {"label" : "metricRegistry", "tail" : "(): MetricRegistry", "member" : "org.apache.spark.metrics.source.AccumulatorSource.metricRegistry", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#metricRegistry:com.codahale.metrics.MetricRegistry", "kind" : "def"}, {"label" : "sourceName", "tail" : "(): String", "member" : "org.apache.spark.metrics.source.AccumulatorSource.sourceName", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#sourceName:String", "kind" : "def"}, {"label" : "register", "tail" : "(accumulators: Map[String, AccumulatorV2[_, T]]): Unit", "member" : "org.apache.spark.metrics.source.AccumulatorSource.register", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#register[T](accumulators:Map[String,org.apache.spark.util.AccumulatorV2[_,T]]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "register", "tail" : "(sc: SparkContext, accumulators: Map[String, DoubleAccumulator]): Unit", "member" : "org.apache.spark.metrics.source.DoubleAccumulatorSource.register", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#register(sc:org.apache.spark.SparkContext,accumulators:Map[String,org.apache.spark.util.DoubleAccumulator]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/metrics\/source\/DoubleAccumulatorSource.html", "kind" : "class"}, {"name" : "org.apache.spark.metrics.source.HiveCatalogMetrics", "shortDescription" : "Metrics for access to the hive external catalog.", "object" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html", "members_object" : [{"label" : "incrementParallelListingJobCount", "tail" : "(n: Int): Unit", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.incrementParallelListingJobCount", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#incrementParallelListingJobCount(n:Int):Unit", "kind" : "def"}, {"label" : "incrementHiveClientCalls", "tail" : "(n: Int): Unit", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.incrementHiveClientCalls", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#incrementHiveClientCalls(n:Int):Unit", "kind" : "def"}, {"label" : "incrementFileCacheHits", "tail" : "(n: Int): Unit", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.incrementFileCacheHits", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#incrementFileCacheHits(n:Int):Unit", "kind" : "def"}, {"label" : "incrementFilesDiscovered", "tail" : "(n: Int): Unit", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.incrementFilesDiscovered", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#incrementFilesDiscovered(n:Int):Unit", "kind" : "def"}, {"label" : "incrementFetchedPartitions", "tail" : "(n: Int): Unit", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.incrementFetchedPartitions", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#incrementFetchedPartitions(n:Int):Unit", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.reset", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#reset():Unit", "kind" : "def"}, {"label" : "METRIC_PARALLEL_LISTING_JOB_COUNT", "tail" : ": Counter", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.METRIC_PARALLEL_LISTING_JOB_COUNT", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#METRIC_PARALLEL_LISTING_JOB_COUNT:com.codahale.metrics.Counter", "kind" : "val"}, {"label" : "METRIC_HIVE_CLIENT_CALLS", "tail" : ": Counter", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.METRIC_HIVE_CLIENT_CALLS", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#METRIC_HIVE_CLIENT_CALLS:com.codahale.metrics.Counter", "kind" : "val"}, {"label" : "METRIC_FILE_CACHE_HITS", "tail" : ": Counter", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.METRIC_FILE_CACHE_HITS", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#METRIC_FILE_CACHE_HITS:com.codahale.metrics.Counter", "kind" : "val"}, {"label" : "METRIC_FILES_DISCOVERED", "tail" : ": Counter", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.METRIC_FILES_DISCOVERED", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#METRIC_FILES_DISCOVERED:com.codahale.metrics.Counter", "kind" : "val"}, {"label" : "METRIC_PARTITIONS_FETCHED", "tail" : ": Counter", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.METRIC_PARTITIONS_FETCHED", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#METRIC_PARTITIONS_FETCHED:com.codahale.metrics.Counter", "kind" : "val"}, {"label" : "metricRegistry", "tail" : ": MetricRegistry", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.metricRegistry", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#metricRegistry:com.codahale.metrics.MetricRegistry", "kind" : "val"}, {"label" : "sourceName", "tail" : ": String", "member" : "org.apache.spark.metrics.source.HiveCatalogMetrics.sourceName", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#sourceName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/HiveCatalogMetrics$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.metrics.source.LongAccumulatorSource", "shortDescription" : "", "object" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html", "members_class" : [{"member" : "org.apache.spark.metrics.source.LongAccumulatorSource#<init>", "error" : "unsupported entity"}, {"label" : "metricRegistry", "tail" : "(): MetricRegistry", "member" : "org.apache.spark.metrics.source.AccumulatorSource.metricRegistry", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#metricRegistry:com.codahale.metrics.MetricRegistry", "kind" : "def"}, {"label" : "sourceName", "tail" : "(): String", "member" : "org.apache.spark.metrics.source.AccumulatorSource.sourceName", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#sourceName:String", "kind" : "def"}, {"label" : "register", "tail" : "(accumulators: Map[String, AccumulatorV2[_, T]]): Unit", "member" : "org.apache.spark.metrics.source.AccumulatorSource.register", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#register[T](accumulators:Map[String,org.apache.spark.util.AccumulatorV2[_,T]]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "register", "tail" : "(sc: SparkContext, accumulators: Map[String, LongAccumulator]): Unit", "member" : "org.apache.spark.metrics.source.LongAccumulatorSource.register", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#register(sc:org.apache.spark.SparkContext,accumulators:Map[String,org.apache.spark.util.LongAccumulator]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/metrics\/source\/LongAccumulatorSource.html", "kind" : "class"}], "org.apache.spark.internal.plugin" : [{"name" : "org.apache.spark.internal.plugin.PluginContainer", "shortDescription" : "", "object" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onTaskFailed", "tail" : "(failureReason: TaskFailedReason): Unit", "member" : "org.apache.spark.internal.plugin.PluginContainer.onTaskFailed", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#onTaskFailed(failureReason:org.apache.spark.TaskFailedReason):Unit", "kind" : "abstract def"}, {"label" : "onTaskSucceeded", "tail" : "(): Unit", "member" : "org.apache.spark.internal.plugin.PluginContainer.onTaskSucceeded", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#onTaskSucceeded():Unit", "kind" : "abstract def"}, {"label" : "onTaskStart", "tail" : "(): Unit", "member" : "org.apache.spark.internal.plugin.PluginContainer.onTaskStart", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#onTaskStart():Unit", "kind" : "abstract def"}, {"label" : "registerMetrics", "tail" : "(appId: String): Unit", "member" : "org.apache.spark.internal.plugin.PluginContainer.registerMetrics", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#registerMetrics(appId:String):Unit", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "org.apache.spark.internal.plugin.PluginContainer.shutdown", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html#shutdown():Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "apply", "tail" : "(env: SparkEnv, resources: Map[String, ResourceInformation]): Option[PluginContainer]", "member" : "org.apache.spark.internal.plugin.PluginContainer.apply", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#apply(env:org.apache.spark.SparkEnv,resources:java.util.Map[String,org.apache.spark.resource.ResourceInformation]):Option[org.apache.spark.internal.plugin.PluginContainer]", "kind" : "def"}, {"label" : "apply", "tail" : "(sc: SparkContext, resources: Map[String, ResourceInformation]): Option[PluginContainer]", "member" : "org.apache.spark.internal.plugin.PluginContainer.apply", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#apply(sc:org.apache.spark.SparkContext,resources:java.util.Map[String,org.apache.spark.resource.ResourceInformation]):Option[org.apache.spark.internal.plugin.PluginContainer]", "kind" : "def"}, {"label" : "EXTRA_CONF_PREFIX", "tail" : ": String", "member" : "org.apache.spark.internal.plugin.PluginContainer.EXTRA_CONF_PREFIX", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#EXTRA_CONF_PREFIX:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/plugin\/PluginContainer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/internal\/plugin\/PluginContainer.html", "kind" : "class"}, {"name" : "org.apache.spark.internal.plugin.PluginMessage", "shortDescription" : "", "members_case class" : [{"member" : "org.apache.spark.internal.plugin.PluginMessage#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": AnyRef", "member" : "org.apache.spark.internal.plugin.PluginMessage.message", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#message:AnyRef", "kind" : "val"}, {"label" : "pluginName", "tail" : ": String", "member" : "org.apache.spark.internal.plugin.PluginMessage.pluginName", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#pluginName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/internal\/plugin\/PluginMessage.html", "kind" : "case class"}], "org" : [], "net.jpountz.lz4" : [{"name" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream", "shortDescription" : "InputStream implementation to decode data written withLZ4BlockOutputStream.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.toString", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#toString():String", "kind" : "def"}, {"label" : "reset", "tail" : "(): Unit", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.reset", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#reset():Unit", "kind" : "def"}, {"label" : "mark", "tail" : "(readlimit: Int): Unit", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.mark", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#mark(readlimit:Int):Unit", "kind" : "def"}, {"label" : "markSupported", "tail" : "(): Boolean", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.markSupported", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#markSupported():Boolean", "kind" : "def"}, {"label" : "skip", "tail" : "(n: Long): Long", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.skip", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#skip(n:Long):Long", "kind" : "def"}, {"label" : "read", "tail" : "(b: Array[Byte]): Int", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.read", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#read(b:Array[Byte]):Int", "kind" : "def"}, {"label" : "read", "tail" : "(b: Array[Byte], off: Int, len: Int): Int", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.read", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#read(b:Array[Byte],off:Int,len:Int):Int", "kind" : "def"}, {"label" : "read", "tail" : "(): Int", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.read", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#read():Int", "kind" : "def"}, {"label" : "available", "tail" : "(): Int", "member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream.available", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#available():Int", "kind" : "def"}, {"member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream#<init>", "error" : "unsupported entity"}, {"member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream#<init>", "error" : "unsupported entity"}, {"member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream#<init>", "error" : "unsupported entity"}, {"member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream#<init>", "error" : "unsupported entity"}, {"member" : "net.jpountz.lz4.ExtendedLZ4BlockInputStream#<init>", "error" : "unsupported entity"}, {"label" : "close", "tail" : "(): Unit", "member" : "java.io.FilterInputStream.close", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#close():Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/jpountz\/lz4\/ExtendedLZ4BlockInputStream.html", "kind" : "class"}], "org.apache.spark.deploy" : [{"name" : "org.apache.spark.deploy.Client", "shortDescription" : "Executable utility for starting and terminating drivers inside of a standalone cluster.", "object" : "org\/apache\/spark\/deploy\/Client$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.apache.spark.deploy.Client.main", "link" : "org\/apache\/spark\/deploy\/Client$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/Client$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/Client$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/Client$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/Client$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/Client$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/Client$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/Client$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/Client$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/Client$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/Client$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/Client$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/Client$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/Client$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/Client$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/Client$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/Client$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/Client$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/Client$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/Client$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.deploy.ExternalShuffleService", "shortDescription" : "A main class for running the external shuffle service.", "object" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.apache.spark.deploy.ExternalShuffleService.main", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/ExternalShuffleService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.deploy.PythonRunner", "shortDescription" : "A main class used to launch Python applications.", "object" : "org\/apache\/spark\/deploy\/PythonRunner$.html", "members_object" : [{"label" : "formatPaths", "tail" : "(paths: String, testWindows: Boolean): Array[String]", "member" : "org.apache.spark.deploy.PythonRunner.formatPaths", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#formatPaths(paths:String,testWindows:Boolean):Array[String]", "kind" : "def"}, {"label" : "formatPath", "tail" : "(path: String, testWindows: Boolean): String", "member" : "org.apache.spark.deploy.PythonRunner.formatPath", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#formatPath(path:String,testWindows:Boolean):String", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.apache.spark.deploy.PythonRunner.main", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/PythonRunner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.deploy.RRunner", "shortDescription" : "Main class used to launch SparkR applications using spark-submit.", "object" : "org\/apache\/spark\/deploy\/RRunner$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.apache.spark.deploy.RRunner.main", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/RRunner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/RRunner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.deploy.SparkSubmit", "shortDescription" : "", "object" : "org\/apache\/spark\/deploy\/SparkSubmit$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.apache.spark.deploy.SparkSubmit.main", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/deploy\/SparkSubmit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.shuffle.checksum" : [{"name" : "org.apache.spark.shuffle.checksum.ShuffleChecksumSupport", "members_trait" : [{"label" : "getChecksumValues", "tail" : "(partitionChecksums: Array[Checksum]): Array[Long]", "member" : "org.apache.spark.shuffle.checksum.ShuffleChecksumSupport.getChecksumValues", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#getChecksumValues(partitionChecksums:Array[java.util.zip.Checksum]):Array[Long]", "kind" : "def"}, {"label" : "createPartitionChecksums", "tail" : "(numPartitions: Int, conf: SparkConf): Array[Checksum]", "member" : "org.apache.spark.shuffle.checksum.ShuffleChecksumSupport.createPartitionChecksums", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#createPartitionChecksums(numPartitions:Int,conf:org.apache.spark.SparkConf):Array[java.util.zip.Checksum]", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.checksum.ShuffleChecksumSupport#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/shuffle\/checksum\/ShuffleChecksumSupport.html", "kind" : "trait"}], "org.apache.spark.network" : [], "org.apache.spark.util.random" : [{"name" : "org.apache.spark.util.random.BernoulliCellSampler", "shortDescription" : ":: DeveloperApi ::A sampler based on Bernoulli trials for partitioning a data sequence.", "members_class" : [{"label" : "clone", "tail" : "(): BernoulliCellSampler[T]", "member" : "org.apache.spark.util.random.BernoulliCellSampler.clone", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#clone():org.apache.spark.util.random.BernoulliCellSampler[T]", "kind" : "def"}, {"label" : "cloneComplement", "tail" : "(): BernoulliCellSampler[T]", "member" : "org.apache.spark.util.random.BernoulliCellSampler.cloneComplement", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#cloneComplement():org.apache.spark.util.random.BernoulliCellSampler[T]", "kind" : "def"}, {"label" : "sample", "tail" : "(): Int", "member" : "org.apache.spark.util.random.BernoulliCellSampler.sample", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#sample():Int", "kind" : "def"}, {"label" : "setSeed", "tail" : "(seed: Long): Unit", "member" : "org.apache.spark.util.random.BernoulliCellSampler.setSeed", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#setSeed(seed:Long):Unit", "kind" : "def"}, {"member" : "org.apache.spark.util.random.BernoulliCellSampler#<init>", "error" : "unsupported entity"}, {"label" : "sample", "tail" : "(items: Iterator[T]): Iterator[T]", "member" : "org.apache.spark.util.random.RandomSampler.sample", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#sample(items:Iterator[T]):Iterator[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/random\/BernoulliCellSampler.html", "kind" : "class"}, {"name" : "org.apache.spark.util.random.BernoulliSampler", "shortDescription" : ":: DeveloperApi ::A sampler based on Bernoulli trials.", "members_class" : [{"label" : "clone", "tail" : "(): BernoulliSampler[T]", "member" : "org.apache.spark.util.random.BernoulliSampler.clone", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#clone():org.apache.spark.util.random.BernoulliSampler[T]", "kind" : "def"}, {"label" : "sample", "tail" : "(): Int", "member" : "org.apache.spark.util.random.BernoulliSampler.sample", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#sample():Int", "kind" : "def"}, {"label" : "setSeed", "tail" : "(seed: Long): Unit", "member" : "org.apache.spark.util.random.BernoulliSampler.setSeed", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#setSeed(seed:Long):Unit", "kind" : "def"}, {"member" : "org.apache.spark.util.random.BernoulliSampler#<init>", "error" : "unsupported entity"}, {"label" : "sample", "tail" : "(items: Iterator[T]): Iterator[T]", "member" : "org.apache.spark.util.random.RandomSampler.sample", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#sample(items:Iterator[T]):Iterator[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/random\/BernoulliSampler.html", "kind" : "class"}, {"name" : "org.apache.spark.util.random.PoissonSampler", "shortDescription" : ":: DeveloperApi ::A sampler for sampling with replacement, based on values drawn from Poisson distribution.", "members_class" : [{"label" : "clone", "tail" : "(): PoissonSampler[T]", "member" : "org.apache.spark.util.random.PoissonSampler.clone", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#clone():org.apache.spark.util.random.PoissonSampler[T]", "kind" : "def"}, {"label" : "sample", "tail" : "(items: Iterator[T]): Iterator[T]", "member" : "org.apache.spark.util.random.PoissonSampler.sample", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#sample(items:Iterator[T]):Iterator[T]", "kind" : "def"}, {"label" : "sample", "tail" : "(): Int", "member" : "org.apache.spark.util.random.PoissonSampler.sample", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#sample():Int", "kind" : "def"}, {"label" : "setSeed", "tail" : "(seed: Long): Unit", "member" : "org.apache.spark.util.random.PoissonSampler.setSeed", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#setSeed(seed:Long):Unit", "kind" : "def"}, {"member" : "org.apache.spark.util.random.PoissonSampler#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.util.random.PoissonSampler#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/random\/PoissonSampler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/random\/PoissonSampler.html", "kind" : "class"}, {"name" : "org.apache.spark.util.random.Pseudorandom", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "setSeed", "tail" : "(seed: Long): Unit", "member" : "org.apache.spark.util.random.Pseudorandom.setSeed", "link" : "org\/apache\/spark\/util\/random\/Pseudorandom.html#setSeed(seed:Long):Unit", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::A class with pseudorandom behavior.", "trait" : "org\/apache\/spark\/util\/random\/Pseudorandom.html", "kind" : "trait"}, {"name" : "org.apache.spark.util.random.RandomSampler", "members_trait" : [{"label" : "clone", "tail" : "(): RandomSampler[T, U]", "member" : "org.apache.spark.util.random.RandomSampler.clone", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#clone():org.apache.spark.util.random.RandomSampler[T,U]", "kind" : "def"}, {"label" : "sample", "tail" : "(items: Iterator[T]): Iterator[U]", "member" : "org.apache.spark.util.random.RandomSampler.sample", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#sample(items:Iterator[T]):Iterator[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sample", "tail" : "(): Int", "member" : "org.apache.spark.util.random.RandomSampler.sample", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#sample():Int", "kind" : "abstract def"}, {"label" : "setSeed", "tail" : "(seed: Long): Unit", "member" : "org.apache.spark.util.random.Pseudorandom.setSeed", "link" : "org\/apache\/spark\/util\/random\/RandomSampler.html#setSeed(seed:Long):Unit", "kind" : "abstract def"}], "shortDescription" : ":: DeveloperApi ::A pseudorandom sampler.", "trait" : "org\/apache\/spark\/util\/random\/RandomSampler.html", "kind" : "trait"}], "org.apache.spark.util.collection" : [{"name" : "org.apache.spark.util.collection.AppendOnlyMap", "shortDescription" : ":: DeveloperApi ::A simple open hash table optimized for the append-only use case, where keysare never removed, but the value for each key may be changed.", "members_class" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "atGrowThreshold", "tail" : "(): Boolean", "member" : "org.apache.spark.util.collection.AppendOnlyMap.atGrowThreshold", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#atGrowThreshold:Boolean", "kind" : "def"}, {"label" : "destructiveSortedIterator", "tail" : "(keyComparator: Comparator[K]): Iterator[(K, V)]", "member" : "org.apache.spark.util.collection.AppendOnlyMap.destructiveSortedIterator", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#destructiveSortedIterator(keyComparator:java.util.Comparator[K]):Iterator[(K,V)]", "kind" : "def"}, {"label" : "growTable", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.AppendOnlyMap.growTable", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#growTable():Unit", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.AppendOnlyMap.size", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#size:Int", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[(K, V)]", "member" : "org.apache.spark.util.collection.AppendOnlyMap.iterator", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#iterator:Iterator[(K,V)]", "kind" : "def"}, {"label" : "changeValue", "tail" : "(key: K, updateFunc: (Boolean, V) ⇒ V): V", "member" : "org.apache.spark.util.collection.AppendOnlyMap.changeValue", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#changeValue(key:K,updateFunc:(Boolean,V)=>V):V", "kind" : "def"}, {"label" : "update", "tail" : "(key: K, value: V): Unit", "member" : "org.apache.spark.util.collection.AppendOnlyMap.update", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#update(key:K,value:V):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(key: K): V", "member" : "org.apache.spark.util.collection.AppendOnlyMap.apply", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#apply(key:K):V", "kind" : "def"}, {"member" : "org.apache.spark.util.collection.AppendOnlyMap#<init>", "error" : "unsupported entity"}, {"label" : "seq", "tail" : "(): Iterable[(K, V)]", "member" : "scala.collection.Iterable.seq", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#seq:Iterable[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Iterable]", "member" : "scala.collection.Iterable.companion", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#companion:scala.collection.generic.GenericCompanion[Iterable]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IterableView[(K, V), Iterable[(K, V)]]", "member" : "scala.collection.IterableLike.view", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#view(from:Int,until:Int):scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IterableView[(K, V), Iterable[(K, V)]]", "member" : "scala.collection.IterableLike.view", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#view:scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[(K, V)]", "member" : "scala.collection.IterableLike.toStream", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Iterable[(K, V)], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Iterable[(K, V)], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Iterable[(K, V)], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.dropRight", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.takeRight", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Iterable[(K, V)]]", "member" : "scala.collection.IterableLike.sliding", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Iterable[(K, V)]]", "member" : "scala.collection.IterableLike.sliding", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Iterable[(K, V)]]", "member" : "scala.collection.IterableLike.grouped", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: ((K, V)) ⇒ Boolean): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.drop", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.take", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.slice", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): (K, V)", "member" : "scala.collection.IterableLike.head", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[(K, V)]", "member" : "scala.collection.IterableLike.toIterator", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.toIterable", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: ((K, V), B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: ((K, V), B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableLike.isEmpty", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: ((K, V)) ⇒ Boolean): Option[(K, V)]", "member" : "scala.collection.IterableLike.find", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: ((K, V)) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: ((K, V)) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((K, V)) ⇒ U): Unit", "member" : "scala.collection.IterableLike.foreach", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Iterable[(K, V)]): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.toCollection", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toCollection(repr:Repr):Iterable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Iterable[(K, V)]", "member" : "scala.collection.IterableLike.thisCollection", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#thisCollection:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: ((K, V)) ⇒ GenTraversableOnce[B]): Iterable[Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: ((K, V)) ⇒ GenTraversableOnce[B]): Iterable[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: ((K, V)) ⇒ (A1, A2, A3)): (Iterable[A1], Iterable[A2], Iterable[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: ((K, V)) ⇒ (A1, A2)): (Iterable[A1], Iterable[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[(K, V), Iterable[(K, V)]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: ((K, V)) ⇒ Boolean): FilterMonadic[(K, V), Iterable[(K, V)]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#stringPrefix:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.collection.TraversableLike.toString", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toString():String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, (K, V), Col[(K, V)]]): Col[(K, V)]", "member" : "scala.collection.TraversableLike.to", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[(K, V)]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Iterable[(K, V)]]", "member" : "scala.collection.TraversableLike.inits", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Iterable[(K, V)]]", "member" : "scala.collection.TraversableLike.tails", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Iterable[(K, V)], Iterable[(K, V)])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: ((K, V)) ⇒ Boolean): (Iterable[(K, V)], Iterable[(K, V)])", "member" : "scala.collection.TraversableLike.span", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: ((K, V)) ⇒ Boolean): Iterable[(K, V)]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Iterable[(K, V)]", "member" : "scala.collection.TraversableLike.init", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[(K, V)]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): (K, V)", "member" : "scala.collection.TraversableLike.last", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Iterable[(K, V)]", "member" : "scala.collection.TraversableLike.tail", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[(K, V)]", "member" : "scala.collection.TraversableLike.headOption", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: ((K, V), B) ⇒ B)(bf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, (K, V)) ⇒ B)(bf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, V)) ⇒ K): Map[K, Iterable[(K, V)]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: ((K, V)) ⇒ Boolean): (Iterable[(K, V)], Iterable[(K, V)])", "member" : "scala.collection.TraversableLike.partition", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(K, V), B])(bf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: ((K, V)) ⇒ Boolean): Iterable[(K, V)]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: ((K, V)) ⇒ Boolean): Iterable[(K, V)]", "member" : "scala.collection.TraversableLike.filter", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((K, V)) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((K, V)) ⇒ B)(bf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Iterable[(K, V)], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[(K, V), ParIterable[(K, V)]]", "member" : "scala.collection.TraversableLike.parCombiner", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParIterable[A]]", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Iterable[(K, V)]", "member" : "scala.collection.TraversableLike.repr", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParIterable[(K, V)]", "member" : "scala.collection.Parallelizable.par", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[(K, V), (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[(K, V)]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[(K, V)]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[(K, V)]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[(K, V)]", "member" : "scala.collection.TraversableOnce.toList", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: ((K, V)) ⇒ B)(cmp: Ordering[B]): (K, V)", "member" : "scala.collection.TraversableOnce.minBy", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: ((K, V)) ⇒ B)(cmp: Ordering[B]): (K, V)", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): (K, V)", "member" : "scala.collection.TraversableOnce.max", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): (K, V)", "member" : "scala.collection.TraversableOnce.min", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, (K, V)) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: ((K, V), B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, (K, V)) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, (K, V)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, (K, V)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: ((K, V), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, (K, V)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[(K, V), B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: ((K, V)) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[(K, V)]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/AppendOnlyMap.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.BitSet", "shortDescription" : "A simple, fixed-size bit set implementation.", "members_class" : [{"label" : "union", "tail" : "(other: BitSet): Unit", "member" : "org.apache.spark.util.collection.BitSet.union", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#union(other:org.apache.spark.util.collection.BitSet):Unit", "kind" : "def"}, {"label" : "nextSetBit", "tail" : "(fromIndex: Int): Int", "member" : "org.apache.spark.util.collection.BitSet.nextSetBit", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#nextSetBit(fromIndex:Int):Int", "kind" : "def"}, {"label" : "cardinality", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.BitSet.cardinality", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#cardinality():Int", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Int]", "member" : "org.apache.spark.util.collection.BitSet.iterator", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#iterator:Iterator[Int]", "kind" : "def"}, {"label" : "get", "tail" : "(index: Int): Boolean", "member" : "org.apache.spark.util.collection.BitSet.get", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#get(index:Int):Boolean", "kind" : "def"}, {"label" : "unset", "tail" : "(index: Int): Unit", "member" : "org.apache.spark.util.collection.BitSet.unset", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#unset(index:Int):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(index: Int): Unit", "member" : "org.apache.spark.util.collection.BitSet.set", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#set(index:Int):Unit", "kind" : "def"}, {"label" : "andNot", "tail" : "(other: BitSet): BitSet", "member" : "org.apache.spark.util.collection.BitSet.andNot", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#andNot(other:org.apache.spark.util.collection.BitSet):org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "^", "tail" : "(other: BitSet): BitSet", "member" : "org.apache.spark.util.collection.BitSet.^", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#^(other:org.apache.spark.util.collection.BitSet):org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "|", "tail" : "(other: BitSet): BitSet", "member" : "org.apache.spark.util.collection.BitSet.|", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#|(other:org.apache.spark.util.collection.BitSet):org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "&", "tail" : "(other: BitSet): BitSet", "member" : "org.apache.spark.util.collection.BitSet.&", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#&(other:org.apache.spark.util.collection.BitSet):org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "clearUntil", "tail" : "(bitIndex: Int): Unit", "member" : "org.apache.spark.util.collection.BitSet.clearUntil", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#clearUntil(bitIndex:Int):Unit", "kind" : "def"}, {"label" : "setUntil", "tail" : "(bitIndex: Int): Unit", "member" : "org.apache.spark.util.collection.BitSet.setUntil", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#setUntil(bitIndex:Int):Unit", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.BitSet.clear", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#clear():Unit", "kind" : "def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.BitSet.capacity", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#capacity:Int", "kind" : "def"}, {"member" : "org.apache.spark.util.collection.BitSet#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/BitSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/BitSet.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.ExternalAppendOnlyMap", "shortDescription" : ":: DeveloperApi ::An append-only map that spills sorted content to disk when there is insufficient space for itto grow.", "members_class" : [{"label" : "WithFilter", "tail" : "", "member" : "scala.collection.TraversableLike.WithFilter", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#WithFilterextendsFilterMonadic[A,Repr]", "kind" : "class"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.toString", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toString():String", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[(K, C)]", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.iterator", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#iterator:Iterator[(K,C)]", "kind" : "def"}, {"label" : "destructiveIterator", "tail" : "(inMemoryIterator: Iterator[(K, C)]): Iterator[(K, C)]", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.destructiveIterator", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#destructiveIterator(inMemoryIterator:Iterator[(K,C)]):Iterator[(K,C)]", "kind" : "def"}, {"label" : "forceSpill", "tail" : "(): Boolean", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.forceSpill", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#forceSpill():Boolean", "kind" : "def"}, {"label" : "spill", "tail" : "(collection: SizeTracker): Unit", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.spill", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#spill(collection:org.apache.spark.util.collection.SizeTracker):Unit", "kind" : "def"}, {"label" : "insertAll", "tail" : "(entries: Iterable[Product2[K, V]]): Unit", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.insertAll", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#insertAll(entries:Iterable[Product2[K,V]]):Unit", "kind" : "def"}, {"label" : "insertAll", "tail" : "(entries: Iterator[Product2[K, V]]): Unit", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.insertAll", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#insertAll(entries:Iterator[Product2[K,V]]):Unit", "kind" : "def"}, {"label" : "insert", "tail" : "(key: K, value: V): Unit", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.insert", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#insert(key:K,value:V):Unit", "kind" : "def"}, {"label" : "peakMemoryUsedBytes", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.peakMemoryUsedBytes", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#peakMemoryUsedBytes:Long", "kind" : "def"}, {"label" : "diskBytesSpilled", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap.diskBytesSpilled", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#diskBytesSpilled:Long", "kind" : "def"}, {"member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.util.collection.ExternalAppendOnlyMap#<init>", "error" : "unsupported entity"}, {"label" : "seq", "tail" : "(): Iterable[(K, C)]", "member" : "scala.collection.Iterable.seq", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#seq:Iterable[A]", "kind" : "def"}, {"label" : "companion", "tail" : "(): GenericCompanion[Iterable]", "member" : "scala.collection.Iterable.companion", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#companion:scala.collection.generic.GenericCompanion[Iterable]", "kind" : "def"}, {"label" : "view", "tail" : "(from: Int, until: Int): IterableView[(K, C), Iterable[(K, C)]]", "member" : "scala.collection.IterableLike.view", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#view(from:Int,until:Int):scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "view", "tail" : "(): IterableView[(K, C), Iterable[(K, C)]]", "member" : "scala.collection.IterableLike.view", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#view:scala.collection.IterableView[A,Repr]", "kind" : "def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.collection.IterableLike.canEqual", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#canEqual(that:Any):Boolean", "kind" : "def"}, {"label" : "toStream", "tail" : "(): Stream[(K, C)]", "member" : "scala.collection.IterableLike.toStream", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toStream:scala.collection.immutable.Stream[A]", "kind" : "def"}, {"label" : "sameElements", "tail" : "(that: GenIterable[B]): Boolean", "member" : "scala.collection.IterableLike.sameElements", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#sameElements[B>:A](that:scala.collection.GenIterable[B]):Boolean", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(bf: CanBuildFrom[Iterable[(K, C)], (A1, Int), That]): That", "member" : "scala.collection.IterableLike.zipWithIndex", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#zipWithIndex[A1>:A,That](implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,Int),That]):That", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: GenIterable[B], thisElem: A1, thatElem: B)(bf: CanBuildFrom[Iterable[(K, C)], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zipAll", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#zipAll[B,A1>:A,That](that:scala.collection.GenIterable[B],thisElem:A1,thatElem:B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "zip", "tail" : "(that: GenIterable[B])(bf: CanBuildFrom[Iterable[(K, C)], (A1, B), That]): That", "member" : "scala.collection.IterableLike.zip", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#zip[A1>:A,B,That](that:scala.collection.GenIterable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,(A1,B),That]):That", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int, len: Int): Unit", "member" : "scala.collection.IterableLike.copyToArray", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#copyToArray[B>:A](xs:Array[B],start:Int,len:Int):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(n: Int): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.dropRight", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#dropRight(n:Int):Repr", "kind" : "def"}, {"label" : "takeRight", "tail" : "(n: Int): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.takeRight", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#takeRight(n:Int):Repr", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int, step: Int): Iterator[Iterable[(K, C)]]", "member" : "scala.collection.IterableLike.sliding", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#sliding(size:Int,step:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "sliding", "tail" : "(size: Int): Iterator[Iterable[(K, C)]]", "member" : "scala.collection.IterableLike.sliding", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#sliding(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "grouped", "tail" : "(size: Int): Iterator[Iterable[(K, C)]]", "member" : "scala.collection.IterableLike.grouped", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#grouped(size:Int):Iterator[Repr]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: ((K, C)) ⇒ Boolean): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.takeWhile", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#takeWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.drop", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#drop(n:Int):Repr", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.take", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#take(n:Int):Repr", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.slice", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#slice(from:Int,until:Int):Repr", "kind" : "def"}, {"label" : "head", "tail" : "(): (K, C)", "member" : "scala.collection.IterableLike.head", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#head:A", "kind" : "def"}, {"label" : "toIterator", "tail" : "(): Iterator[(K, C)]", "member" : "scala.collection.IterableLike.toIterator", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toIterator:Iterator[A]", "kind" : "def"}, {"label" : "toIterable", "tail" : "(): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.toIterable", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toIterable:Iterable[A]", "kind" : "def"}, {"label" : "reduceRight", "tail" : "(op: ((K, C), B) ⇒ B): B", "member" : "scala.collection.IterableLike.reduceRight", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: ((K, C), B) ⇒ B): B", "member" : "scala.collection.IterableLike.foldRight", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "scala.collection.IterableLike.isEmpty", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: ((K, C)) ⇒ Boolean): Option[(K, C)]", "member" : "scala.collection.IterableLike.find", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: ((K, C)) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.exists", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: ((K, C)) ⇒ Boolean): Boolean", "member" : "scala.collection.IterableLike.forall", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((K, C)) ⇒ U): Unit", "member" : "scala.collection.IterableLike.foreach", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "toCollection", "tail" : "(repr: Iterable[(K, C)]): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.toCollection", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toCollection(repr:Repr):Iterable[A]", "kind" : "def"}, {"label" : "thisCollection", "tail" : "(): Iterable[(K, C)]", "member" : "scala.collection.IterableLike.thisCollection", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#thisCollection:Iterable[A]", "kind" : "def"}, {"label" : "transpose", "tail" : "(asTraversable: ((K, C)) ⇒ GenTraversableOnce[B]): Iterable[Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.transpose", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#transpose[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[CC[B]@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "flatten", "tail" : "(asTraversable: ((K, C)) ⇒ GenTraversableOnce[B]): Iterable[B]", "member" : "scala.collection.generic.GenericTraversableTemplate.flatten", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#flatten[B](implicitasTraversable:A=>scala.collection.GenTraversableOnce[B]):CC[B]", "kind" : "def"}, {"label" : "unzip3", "tail" : "(asTriple: ((K, C)) ⇒ (A1, A2, A3)): (Iterable[A1], Iterable[A2], Iterable[A3])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip3", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#unzip3[A1,A2,A3](implicitasTriple:A=>(A1,A2,A3)):(CC[A1],CC[A2],CC[A3])", "kind" : "def"}, {"label" : "unzip", "tail" : "(asPair: ((K, C)) ⇒ (A1, A2)): (Iterable[A1], Iterable[A2])", "member" : "scala.collection.generic.GenericTraversableTemplate.unzip", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#unzip[A1,A2](implicitasPair:A=>(A1,A2)):(CC[A1],CC[A2])", "kind" : "def"}, {"label" : "genericBuilder", "tail" : "(): Builder[B, Iterable[B]]", "member" : "scala.collection.generic.GenericTraversableTemplate.genericBuilder", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#genericBuilder[B]:scala.collection.mutable.Builder[B,CC[B]]", "kind" : "def"}, {"label" : "newBuilder", "tail" : "(): Builder[(K, C), Iterable[(K, C)]]", "member" : "scala.collection.generic.GenericTraversableTemplate.newBuilder", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#newBuilder:scala.collection.mutable.Builder[A,CC[A]]", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: ((K, C)) ⇒ Boolean): FilterMonadic[(K, C), Iterable[(K, C)]]", "member" : "scala.collection.TraversableLike.withFilter", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#withFilter(p:A=>Boolean):scala.collection.generic.FilterMonadic[A,Repr]", "kind" : "def"}, {"label" : "stringPrefix", "tail" : "(): String", "member" : "scala.collection.TraversableLike.stringPrefix", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#stringPrefix:String", "kind" : "def"}, {"label" : "to", "tail" : "(cbf: CanBuildFrom[Nothing, (K, C), Col[(K, C)]]): Col[(K, C)]", "member" : "scala.collection.TraversableLike.to", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#to[Col[_]](implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,Col[A@scala.annotation.unchecked.uncheckedVariance]]):Col[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): Traversable[(K, C)]", "member" : "scala.collection.TraversableLike.toTraversable", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toTraversable:Traversable[A]", "kind" : "def"}, {"label" : "inits", "tail" : "(): Iterator[Iterable[(K, C)]]", "member" : "scala.collection.TraversableLike.inits", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#inits:Iterator[Repr]", "kind" : "def"}, {"label" : "tails", "tail" : "(): Iterator[Iterable[(K, C)]]", "member" : "scala.collection.TraversableLike.tails", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#tails:Iterator[Repr]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(n: Int): (Iterable[(K, C)], Iterable[(K, C)])", "member" : "scala.collection.TraversableLike.splitAt", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#splitAt(n:Int):(Repr,Repr)", "kind" : "def"}, {"label" : "span", "tail" : "(p: ((K, C)) ⇒ Boolean): (Iterable[(K, C)], Iterable[(K, C)])", "member" : "scala.collection.TraversableLike.span", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#span(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: ((K, C)) ⇒ Boolean): Iterable[(K, C)]", "member" : "scala.collection.TraversableLike.dropWhile", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#dropWhile(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "init", "tail" : "(): Iterable[(K, C)]", "member" : "scala.collection.TraversableLike.init", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#init:Repr", "kind" : "def"}, {"label" : "lastOption", "tail" : "(): Option[(K, C)]", "member" : "scala.collection.TraversableLike.lastOption", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#lastOption:Option[A]", "kind" : "def"}, {"label" : "last", "tail" : "(): (K, C)", "member" : "scala.collection.TraversableLike.last", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#last:A", "kind" : "def"}, {"label" : "tail", "tail" : "(): Iterable[(K, C)]", "member" : "scala.collection.TraversableLike.tail", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#tail:Repr", "kind" : "def"}, {"label" : "headOption", "tail" : "(): Option[(K, C)]", "member" : "scala.collection.TraversableLike.headOption", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#headOption:Option[A]", "kind" : "def"}, {"label" : "scanRight", "tail" : "(z: B)(op: ((K, C), B) ⇒ B)(bf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.scanRight", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#scanRight[B,That](z:B)(op:(A,B)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(z: B)(op: (B, (K, C)) ⇒ B)(bf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.scanLeft", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#scanLeft[B,That](z:B)(op:(B,A)=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "scan", "tail" : "(z: B)(op: (B, B) ⇒ B)(cbf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.scan", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#scan[B>:A,That](z:B)(op:(B,B)=>B)(implicitcbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((K, C)) ⇒ K): Map[K, Iterable[(K, C)]]", "member" : "scala.collection.TraversableLike.groupBy", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#groupBy[K](f:A=>K):scala.collection.immutable.Map[K,Repr]", "kind" : "def"}, {"label" : "partition", "tail" : "(p: ((K, C)) ⇒ Boolean): (Iterable[(K, C)], Iterable[(K, C)])", "member" : "scala.collection.TraversableLike.partition", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#partition(p:A=>Boolean):(Repr,Repr)", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[(K, C), B])(bf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.collect", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#collect[B,That](pf:PartialFunction[A,B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: ((K, C)) ⇒ Boolean): Iterable[(K, C)]", "member" : "scala.collection.TraversableLike.filterNot", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#filterNot(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "filter", "tail" : "(p: ((K, C)) ⇒ Boolean): Iterable[(K, C)]", "member" : "scala.collection.TraversableLike.filter", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#filter(p:A=>Boolean):Repr", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((K, C)) ⇒ GenTraversableOnce[B])(bf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.flatMap", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#flatMap[B,That](f:A=>scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((K, C)) ⇒ B)(bf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.map", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#map[B,That](f:A=>B)(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: Traversable[B])(bf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#++:[B>:A,That](that:Traversable[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++:", "tail" : "(that: TraversableOnce[B])(bf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.++:", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#++:[B>:A,That](that:scala.collection.TraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "++", "tail" : "(that: GenTraversableOnce[B])(bf: CanBuildFrom[Iterable[(K, C)], B, That]): That", "member" : "scala.collection.TraversableLike.++", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#++[B>:A,That](that:scala.collection.GenTraversableOnce[B])(implicitbf:scala.collection.generic.CanBuildFrom[Repr,B,That]):That", "kind" : "def"}, {"label" : "hasDefiniteSize", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.hasDefiniteSize", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#hasDefiniteSize:Boolean", "kind" : "def"}, {"label" : "parCombiner", "tail" : "(): Combiner[(K, C), ParIterable[(K, C)]]", "member" : "scala.collection.TraversableLike.parCombiner", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#parCombiner:scala.collection.parallel.Combiner[A,scala.collection.parallel.ParIterable[A]]", "kind" : "def"}, {"label" : "isTraversableAgain", "tail" : "(): Boolean", "member" : "scala.collection.TraversableLike.isTraversableAgain", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#isTraversableAgain:Boolean", "kind" : "final def"}, {"label" : "repr", "tail" : "(): Iterable[(K, C)]", "member" : "scala.collection.TraversableLike.repr", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#repr:Repr", "kind" : "def"}, {"label" : "Self", "tail" : "", "member" : "scala.collection.TraversableLike.Self", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#Self=Repr", "kind" : "type"}, {"label" : "par", "tail" : "(): ParIterable[(K, C)]", "member" : "scala.collection.Parallelizable.par", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#par:ParRepr", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#addString(b:StringBuilder):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, sep: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#addString(b:StringBuilder,sep:String):StringBuilder", "kind" : "def"}, {"label" : "addString", "tail" : "(b: StringBuilder, start: String, sep: String, end: String): StringBuilder", "member" : "scala.collection.TraversableOnce.addString", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#addString(b:StringBuilder,start:String,sep:String,end:String):StringBuilder", "kind" : "def"}, {"label" : "mkString", "tail" : "(): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#mkString:String", "kind" : "def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#mkString(sep:String):String", "kind" : "def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "scala.collection.TraversableOnce.mkString", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#mkString(start:String,sep:String,end:String):String", "kind" : "def"}, {"label" : "toMap", "tail" : "(ev: <:<[(K, C), (T, U)]): Map[T, U]", "member" : "scala.collection.TraversableOnce.toMap", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toMap[T,U](implicitev:A<:<(T,U)):scala.collection.immutable.Map[T,U]", "kind" : "def"}, {"label" : "toVector", "tail" : "(): Vector[(K, C)]", "member" : "scala.collection.TraversableOnce.toVector", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toVector:Vector[A]", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[B]", "member" : "scala.collection.TraversableOnce.toSet", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toSet[B>:A]:scala.collection.immutable.Set[B]", "kind" : "def"}, {"label" : "toBuffer", "tail" : "(): Buffer[B]", "member" : "scala.collection.TraversableOnce.toBuffer", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toBuffer[B>:A]:scala.collection.mutable.Buffer[B]", "kind" : "def"}, {"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[(K, C)]", "member" : "scala.collection.TraversableOnce.toIndexedSeq", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toIndexedSeq:scala.collection.immutable.IndexedSeq[A]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[(K, C)]", "member" : "scala.collection.TraversableOnce.toSeq", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toSeq:Seq[A]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[(K, C)]", "member" : "scala.collection.TraversableOnce.toList", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toList:List[A]", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: ClassTag[B]): Array[B]", "member" : "scala.collection.TraversableOnce.toArray", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#toArray[B>:A](implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#copyToArray[B>:A](xs:Array[B]):Unit", "kind" : "def"}, {"label" : "copyToArray", "tail" : "(xs: Array[B], start: Int): Unit", "member" : "scala.collection.TraversableOnce.copyToArray", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#copyToArray[B>:A](xs:Array[B],start:Int):Unit", "kind" : "def"}, {"label" : "copyToBuffer", "tail" : "(dest: Buffer[B]): Unit", "member" : "scala.collection.TraversableOnce.copyToBuffer", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#copyToBuffer[B>:A](dest:scala.collection.mutable.Buffer[B]):Unit", "kind" : "def"}, {"label" : "minBy", "tail" : "(f: ((K, C)) ⇒ B)(cmp: Ordering[B]): (K, C)", "member" : "scala.collection.TraversableOnce.minBy", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#minBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(f: ((K, C)) ⇒ B)(cmp: Ordering[B]): (K, C)", "member" : "scala.collection.TraversableOnce.maxBy", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#maxBy[B](f:A=>B)(implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(cmp: Ordering[B]): (K, C)", "member" : "scala.collection.TraversableOnce.max", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#max[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(cmp: Ordering[B]): (K, C)", "member" : "scala.collection.TraversableOnce.min", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#min[B>:A](implicitcmp:Ordering[B]):A", "kind" : "def"}, {"label" : "product", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.product", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#product[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "sum", "tail" : "(num: Numeric[B]): B", "member" : "scala.collection.TraversableOnce.sum", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#sum[B>:A](implicitnum:Numeric[B]):B", "kind" : "def"}, {"label" : "aggregate", "tail" : "(z: ⇒ B)(seqop: (B, (K, C)) ⇒ B, combop: (B, B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.aggregate", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#aggregate[B](z:=>B)(seqop:(B,A)=>B,combop:(B,B)=>B):B", "kind" : "def"}, {"label" : "fold", "tail" : "(z: A1)(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.fold", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#fold[A1>:A](z:A1)(op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(op: (A1, A1) ⇒ A1): Option[A1]", "member" : "scala.collection.TraversableOnce.reduceOption", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#reduceOption[A1>:A](op:(A1,A1)=>A1):Option[A1]", "kind" : "def"}, {"label" : "reduce", "tail" : "(op: (A1, A1) ⇒ A1): A1", "member" : "scala.collection.TraversableOnce.reduce", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#reduce[A1>:A](op:(A1,A1)=>A1):A1", "kind" : "def"}, {"label" : "reduceRightOption", "tail" : "(op: ((K, C), B) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceRightOption", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#reduceRightOption[B>:A](op:(A,B)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeftOption", "tail" : "(op: (B, (K, C)) ⇒ B): Option[B]", "member" : "scala.collection.TraversableOnce.reduceLeftOption", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#reduceLeftOption[B>:A](op:(B,A)=>B):Option[B]", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, (K, C)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.reduceLeft", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(z: B)(op: (B, (K, C)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.foldLeft", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#foldLeft[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : ":\\", "tail" : "(z: B)(op: ((K, C), B) ⇒ B): B", "member" : "scala.collection.TraversableOnce.:\\", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#:\\[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "\/:", "tail" : "(z: B)(op: (B, (K, C)) ⇒ B): B", "member" : "scala.collection.TraversableOnce.\/:", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#\/:[B](z:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[(K, C), B]): Option[B]", "member" : "scala.collection.TraversableOnce.collectFirst", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#collectFirst[B](pf:PartialFunction[A,B]):Option[B]", "kind" : "def"}, {"label" : "count", "tail" : "(p: ((K, C)) ⇒ Boolean): Int", "member" : "scala.collection.TraversableOnce.count", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#count(p:A=>Boolean):Int", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "scala.collection.TraversableOnce.nonEmpty", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "scala.collection.TraversableOnce.size", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#size:Int", "kind" : "def"}, {"label" : "reversed", "tail" : "(): List[(K, C)]", "member" : "scala.collection.TraversableOnce.reversed", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#reversed:List[A]", "kind" : "def"}, {"label" : "sizeHintIfCheap", "tail" : "(): Int", "member" : "scala.collection.GenTraversableOnce.sizeHintIfCheap", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#sizeHintIfCheap:Int", "kind" : "def"}, {"label" : "releaseMemory", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.Spillable.releaseMemory", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#releaseMemory():Unit", "kind" : "def"}, {"label" : "memoryBytesSpilled", "tail" : "(): Long", "member" : "org.apache.spark.util.collection.Spillable.memoryBytesSpilled", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#memoryBytesSpilled:Long", "kind" : "def"}, {"label" : "spill", "tail" : "(size: Long, trigger: MemoryConsumer): Long", "member" : "org.apache.spark.util.collection.Spillable.spill", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#spill(size:Long,trigger:org.apache.spark.memory.MemoryConsumer):Long", "kind" : "def"}, {"label" : "maybeSpill", "tail" : "(collection: SizeTracker, currentMemory: Long): Boolean", "member" : "org.apache.spark.util.collection.Spillable.maybeSpill", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#maybeSpill(collection:C,currentMemory:Long):Boolean", "kind" : "def"}, {"label" : "addElementsRead", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.Spillable.addElementsRead", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#addElementsRead():Unit", "kind" : "def"}, {"label" : "elementsRead", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.Spillable.elementsRead", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#elementsRead:Int", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#logName:String", "kind" : "def"}, {"label" : "freeMemory", "tail" : "(size: Long): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freeMemory", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#freeMemory(size:Long):Unit", "kind" : "def"}, {"label" : "acquireMemory", "tail" : "(size: Long): Long", "member" : "org.apache.spark.memory.MemoryConsumer.acquireMemory", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#acquireMemory(size:Long):Long", "kind" : "def"}, {"label" : "freePage", "tail" : "(page: MemoryBlock): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freePage", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#freePage(page:org.apache.spark.unsafe.memory.MemoryBlock):Unit", "kind" : "def"}, {"label" : "allocatePage", "tail" : "(required: Long): MemoryBlock", "member" : "org.apache.spark.memory.MemoryConsumer.allocatePage", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#allocatePage(required:Long):org.apache.spark.unsafe.memory.MemoryBlock", "kind" : "def"}, {"label" : "freeArray", "tail" : "(array: LongArray): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.freeArray", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#freeArray(array:org.apache.spark.unsafe.array.LongArray):Unit", "kind" : "def"}, {"label" : "allocateArray", "tail" : "(size: Long): LongArray", "member" : "org.apache.spark.memory.MemoryConsumer.allocateArray", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#allocateArray(size:Long):org.apache.spark.unsafe.array.LongArray", "kind" : "def"}, {"label" : "spill", "tail" : "(): Unit", "member" : "org.apache.spark.memory.MemoryConsumer.spill", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#spill():Unit", "kind" : "def"}, {"label" : "getUsed", "tail" : "(): Long", "member" : "org.apache.spark.memory.MemoryConsumer.getUsed", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#getUsed():Long", "kind" : "def"}, {"label" : "getMode", "tail" : "(): MemoryMode", "member" : "org.apache.spark.memory.MemoryConsumer.getMode", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#getMode():org.apache.spark.memory.MemoryMode", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/ExternalAppendOnlyMap.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.ImmutableBitSet", "shortDescription" : "", "members_class" : [{"label" : "union", "tail" : "(other: BitSet): Unit", "member" : "org.apache.spark.util.collection.ImmutableBitSet.union", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#union(other:org.apache.spark.util.collection.BitSet):Unit", "kind" : "def"}, {"label" : "unset", "tail" : "(index: Int): Unit", "member" : "org.apache.spark.util.collection.ImmutableBitSet.unset", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#unset(index:Int):Unit", "kind" : "def"}, {"label" : "setUntil", "tail" : "(bitIndex: Int): Unit", "member" : "org.apache.spark.util.collection.ImmutableBitSet.setUntil", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#setUntil(bitIndex:Int):Unit", "kind" : "def"}, {"label" : "set", "tail" : "(index: Int): Unit", "member" : "org.apache.spark.util.collection.ImmutableBitSet.set", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#set(index:Int):Unit", "kind" : "def"}, {"label" : "clearUntil", "tail" : "(bitIndex: Int): Unit", "member" : "org.apache.spark.util.collection.ImmutableBitSet.clearUntil", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#clearUntil(bitIndex:Int):Unit", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "org.apache.spark.util.collection.ImmutableBitSet.clear", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#clear():Unit", "kind" : "def"}, {"member" : "org.apache.spark.util.collection.ImmutableBitSet#<init>", "error" : "unsupported entity"}, {"label" : "bitsToSet", "tail" : ": Int*", "member" : "org.apache.spark.util.collection.ImmutableBitSet.bitsToSet", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#bitsToSet:Int*", "kind" : "val"}, {"label" : "numBits", "tail" : ": Int", "member" : "org.apache.spark.util.collection.ImmutableBitSet.numBits", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#numBits:Int", "kind" : "val"}, {"label" : "nextSetBit", "tail" : "(fromIndex: Int): Int", "member" : "org.apache.spark.util.collection.BitSet.nextSetBit", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#nextSetBit(fromIndex:Int):Int", "kind" : "def"}, {"label" : "cardinality", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.BitSet.cardinality", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#cardinality():Int", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[Int]", "member" : "org.apache.spark.util.collection.BitSet.iterator", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#iterator:Iterator[Int]", "kind" : "def"}, {"label" : "get", "tail" : "(index: Int): Boolean", "member" : "org.apache.spark.util.collection.BitSet.get", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#get(index:Int):Boolean", "kind" : "def"}, {"label" : "andNot", "tail" : "(other: BitSet): BitSet", "member" : "org.apache.spark.util.collection.BitSet.andNot", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#andNot(other:org.apache.spark.util.collection.BitSet):org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "^", "tail" : "(other: BitSet): BitSet", "member" : "org.apache.spark.util.collection.BitSet.^", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#^(other:org.apache.spark.util.collection.BitSet):org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "|", "tail" : "(other: BitSet): BitSet", "member" : "org.apache.spark.util.collection.BitSet.|", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#|(other:org.apache.spark.util.collection.BitSet):org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "&", "tail" : "(other: BitSet): BitSet", "member" : "org.apache.spark.util.collection.BitSet.&", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#&(other:org.apache.spark.util.collection.BitSet):org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.BitSet.capacity", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#capacity:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/ImmutableBitSet.html", "kind" : "class"}, {"name" : "org.apache.spark.util.collection.OpenHashSet", "shortDescription" : "A simple, fast hash set optimized for non-null insertion-only use case, where keys are neverremoved.", "members_class" : [{"label" : "nextPos", "tail" : "(fromPos: Int): Int", "member" : "org.apache.spark.util.collection.OpenHashSet.nextPos", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#nextPos(fromPos:Int):Int", "kind" : "def"}, {"label" : "getValueSafe", "tail" : "(pos: Int): T", "member" : "org.apache.spark.util.collection.OpenHashSet.getValueSafe", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#getValueSafe(pos:Int):T", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[T]", "member" : "org.apache.spark.util.collection.OpenHashSet.iterator", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#iterator:Iterator[T]", "kind" : "def"}, {"label" : "getValue", "tail" : "(pos: Int): T", "member" : "org.apache.spark.util.collection.OpenHashSet.getValue", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#getValue(pos:Int):T", "kind" : "def"}, {"label" : "getPos", "tail" : "(k: T): Int", "member" : "org.apache.spark.util.collection.OpenHashSet.getPos", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#getPos(k:T):Int", "kind" : "def"}, {"label" : "rehashIfNeeded", "tail" : "(k: T, allocateFunc: (Int) ⇒ Unit, moveFunc: (Int, Int) ⇒ Unit): Unit", "member" : "org.apache.spark.util.collection.OpenHashSet.rehashIfNeeded", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#rehashIfNeeded(k:T,allocateFunc:Int=>Unit,moveFunc:(Int,Int)=>Unit):Unit", "kind" : "def"}, {"label" : "addWithoutResize", "tail" : "(k: T): Int", "member" : "org.apache.spark.util.collection.OpenHashSet.addWithoutResize", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#addWithoutResize(k:T):Int", "kind" : "def"}, {"label" : "union", "tail" : "(other: OpenHashSet[T]): OpenHashSet[T]", "member" : "org.apache.spark.util.collection.OpenHashSet.union", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#union(other:org.apache.spark.util.collection.OpenHashSet[T]):org.apache.spark.util.collection.OpenHashSet[T]", "kind" : "def"}, {"label" : "add", "tail" : "(k: T): Unit", "member" : "org.apache.spark.util.collection.OpenHashSet.add", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#add(k:T):Unit", "kind" : "def"}, {"label" : "contains", "tail" : "(k: T): Boolean", "member" : "org.apache.spark.util.collection.OpenHashSet.contains", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#contains(k:T):Boolean", "kind" : "def"}, {"label" : "capacity", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.OpenHashSet.capacity", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#capacity:Int", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "org.apache.spark.util.collection.OpenHashSet.size", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#size:Int", "kind" : "def"}, {"label" : "_data", "tail" : ": Array[T]", "member" : "org.apache.spark.util.collection.OpenHashSet._data", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#_data:Array[T]", "kind" : "var"}, {"label" : "getBitSet", "tail" : "(): BitSet", "member" : "org.apache.spark.util.collection.OpenHashSet.getBitSet", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#getBitSet:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "_bitset", "tail" : ": BitSet", "member" : "org.apache.spark.util.collection.OpenHashSet._bitset", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#_bitset:org.apache.spark.util.collection.BitSet", "kind" : "var"}, {"label" : "_growThreshold", "tail" : ": Int", "member" : "org.apache.spark.util.collection.OpenHashSet._growThreshold", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#_growThreshold:Int", "kind" : "var"}, {"label" : "_size", "tail" : ": Int", "member" : "org.apache.spark.util.collection.OpenHashSet._size", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#_size:Int", "kind" : "var"}, {"label" : "_mask", "tail" : ": Int", "member" : "org.apache.spark.util.collection.OpenHashSet._mask", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#_mask:Int", "kind" : "var"}, {"label" : "_capacity", "tail" : ": Int", "member" : "org.apache.spark.util.collection.OpenHashSet._capacity", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#_capacity:Int", "kind" : "var"}, {"label" : "hasher", "tail" : ": Hasher[T]", "member" : "org.apache.spark.util.collection.OpenHashSet.hasher", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#hasher:org.apache.spark.util.collection.OpenHashSet.Hasher[T]", "kind" : "val"}, {"member" : "org.apache.spark.util.collection.OpenHashSet#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.util.collection.OpenHashSet#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.util.collection.OpenHashSet#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/collection\/OpenHashSet.html", "kind" : "class"}], "org.apache.spark.api" : [], "org.apache.spark.status.api" : [], "org.apache.spark.shuffle" : [{"name" : "org.apache.spark.shuffle.MigratableResolver", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getMigrationBlocks", "tail" : "(shuffleBlockInfo: ShuffleBlockInfo): List[(BlockId, ManagedBuffer)]", "member" : "org.apache.spark.shuffle.MigratableResolver.getMigrationBlocks", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#getMigrationBlocks(shuffleBlockInfo:org.apache.spark.shuffle.ShuffleBlockInfo):List[(org.apache.spark.storage.BlockId,org.apache.spark.network.buffer.ManagedBuffer)]", "kind" : "abstract def"}, {"label" : "putShuffleBlockAsStream", "tail" : "(blockId: BlockId, serializerManager: SerializerManager): StreamCallbackWithID", "member" : "org.apache.spark.shuffle.MigratableResolver.putShuffleBlockAsStream", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#putShuffleBlockAsStream(blockId:org.apache.spark.storage.BlockId,serializerManager:org.apache.spark.serializer.SerializerManager):org.apache.spark.network.client.StreamCallbackWithID", "kind" : "abstract def"}, {"label" : "getStoredShuffles", "tail" : "(): Seq[ShuffleBlockInfo]", "member" : "org.apache.spark.shuffle.MigratableResolver.getStoredShuffles", "link" : "org\/apache\/spark\/shuffle\/MigratableResolver.html#getStoredShuffles():Seq[org.apache.spark.shuffle.ShuffleBlockInfo]", "kind" : "abstract def"}], "shortDescription" : ":: Experimental ::An experimental trait to allow Spark to migrate shuffle blocks.", "trait" : "org\/apache\/spark\/shuffle\/MigratableResolver.html", "kind" : "trait"}, {"name" : "org.apache.spark.shuffle.ShuffleBlockInfo", "shortDescription" : ":: Experimental ::An experimental case class used by MigratableResolver to return the shuffleId and mapId in atype safe way.", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.shuffle.ShuffleBlockInfo.toString", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#toString():String", "kind" : "def"}, {"member" : "org.apache.spark.shuffle.ShuffleBlockInfo#<init>", "error" : "unsupported entity"}, {"label" : "mapId", "tail" : ": Long", "member" : "org.apache.spark.shuffle.ShuffleBlockInfo.mapId", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#mapId:Long", "kind" : "val"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.shuffle.ShuffleBlockInfo.shuffleId", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#shuffleId:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/shuffle\/ShuffleBlockInfo.html", "kind" : "case class"}, {"name" : "org.apache.spark.shuffle.ShuffleHandle", "shortDescription" : "An opaque handle to a shuffle, used by a ShuffleManager to pass information about it to tasks.", "members_class" : [{"member" : "org.apache.spark.shuffle.ShuffleHandle#<init>", "error" : "unsupported entity"}, {"label" : "shuffleId", "tail" : ": Int", "member" : "org.apache.spark.shuffle.ShuffleHandle.shuffleId", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#shuffleId:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/shuffle\/ShuffleHandle.html", "kind" : "class"}]};