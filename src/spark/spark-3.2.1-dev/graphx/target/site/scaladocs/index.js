Index.PACKAGES = {"org.apache.spark.graphx.util" : [{"name" : "org.apache.spark.graphx.util.GraphGenerators", "shortDescription" : "A collection of graph generating functions.", "object" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html", "members_object" : [{"label" : "starGraph", "tail" : "(sc: SparkContext, nverts: Int): Graph[Int, Int]", "member" : "org.apache.spark.graphx.util.GraphGenerators.starGraph", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#starGraph(sc:org.apache.spark.SparkContext,nverts:Int):org.apache.spark.graphx.Graph[Int,Int]", "kind" : "def"}, {"label" : "gridGraph", "tail" : "(sc: SparkContext, rows: Int, cols: Int): Graph[(Int, Int), Double]", "member" : "org.apache.spark.graphx.util.GraphGenerators.gridGraph", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#gridGraph(sc:org.apache.spark.SparkContext,rows:Int,cols:Int):org.apache.spark.graphx.Graph[(Int,Int),Double]", "kind" : "def"}, {"label" : "rmatGraph", "tail" : "(sc: SparkContext, requestedNumVertices: Int, numEdges: Int): Graph[Int, Int]", "member" : "org.apache.spark.graphx.util.GraphGenerators.rmatGraph", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#rmatGraph(sc:org.apache.spark.SparkContext,requestedNumVertices:Int,numEdges:Int):org.apache.spark.graphx.Graph[Int,Int]", "kind" : "def"}, {"label" : "generateRandomEdges", "tail" : "(src: Int, numEdges: Int, maxVertexId: Int, seed: Long): Array[Edge[Int]]", "member" : "org.apache.spark.graphx.util.GraphGenerators.generateRandomEdges", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#generateRandomEdges(src:Int,numEdges:Int,maxVertexId:Int,seed:Long):Array[org.apache.spark.graphx.Edge[Int]]", "kind" : "def"}, {"label" : "RMATc", "tail" : ": Double", "member" : "org.apache.spark.graphx.util.GraphGenerators.RMATc", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#RMATc:Double", "kind" : "val"}, {"label" : "logNormalGraph", "tail" : "(sc: SparkContext, numVertices: Int, numEParts: Int, mu: Double, sigma: Double, seed: Long): Graph[Long, Int]", "member" : "org.apache.spark.graphx.util.GraphGenerators.logNormalGraph", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logNormalGraph(sc:org.apache.spark.SparkContext,numVertices:Int,numEParts:Int,mu:Double,sigma:Double,seed:Long):org.apache.spark.graphx.Graph[Long,Int]", "kind" : "def"}, {"label" : "RMATd", "tail" : ": Double", "member" : "org.apache.spark.graphx.util.GraphGenerators.RMATd", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#RMATd:Double", "kind" : "val"}, {"label" : "RMATb", "tail" : ": Double", "member" : "org.apache.spark.graphx.util.GraphGenerators.RMATb", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#RMATb:Double", "kind" : "val"}, {"label" : "RMATa", "tail" : ": Double", "member" : "org.apache.spark.graphx.util.GraphGenerators.RMATa", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#RMATa:Double", "kind" : "val"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/util\/GraphGenerators$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.graphx.impl" : [{"name" : "org.apache.spark.graphx.impl.EdgeActiveness", "shortDescription" : "Criteria for filtering edges based on activeness.", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[EdgeActiveness]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: EdgeActiveness): Int", "member" : "java.lang.Enum.compareTo", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/impl\/EdgeActiveness.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.impl.EdgeRDDImpl", "shortDescription" : "", "members_class" : [{"label" : "mapEdgePartitions", "tail" : "(f: (PartitionID, EdgePartition[ED, VD]) ⇒ EdgePartition[ED2, VD2])(arg0: ClassTag[ED2], arg1: ClassTag[VD2]): EdgeRDDImpl[ED2, VD2]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.mapEdgePartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#mapEdgePartitions[ED2,VD2](f:(org.apache.spark.graphx.PartitionID,org.apache.spark.graphx.impl.EdgePartition[ED,VD])=>org.apache.spark.graphx.impl.EdgePartition[ED2,VD2])(implicitevidence$6:scala.reflect.ClassTag[ED2],implicitevidence$7:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.impl.EdgeRDDImpl[ED2,VD2]", "kind" : "def"}, {"label" : "innerJoin", "tail" : "(other: EdgeRDD[ED2])(f: (VertexId, VertexId, ED, ED2) ⇒ ED3)(arg0: ClassTag[ED2], arg1: ClassTag[ED3]): EdgeRDDImpl[ED3, VD]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.innerJoin", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#innerJoin[ED2,ED3](other:org.apache.spark.graphx.EdgeRDD[ED2])(f:(org.apache.spark.graphx.VertexId,org.apache.spark.graphx.VertexId,ED,ED2)=>ED3)(implicitevidence$4:scala.reflect.ClassTag[ED2],implicitevidence$5:scala.reflect.ClassTag[ED3]):org.apache.spark.graphx.impl.EdgeRDDImpl[ED3,VD]", "kind" : "def"}, {"label" : "filter", "tail" : "(epred: (EdgeTriplet[VD, ED]) ⇒ Boolean, vpred: (VertexId, VD) ⇒ Boolean): EdgeRDDImpl[ED, VD]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.filter", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#filter(epred:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>Boolean,vpred:(org.apache.spark.graphx.VertexId,VD)=>Boolean):org.apache.spark.graphx.impl.EdgeRDDImpl[ED,VD]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): EdgeRDDImpl[ED, VD]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.reverse", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#reverse:org.apache.spark.graphx.impl.EdgeRDDImpl[ED,VD]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (Edge[ED]) ⇒ ED2)(arg0: ClassTag[ED2]): EdgeRDDImpl[ED2, VD]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.mapValues", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#mapValues[ED2](f:org.apache.spark.graphx.Edge[ED]=>ED2)(implicitevidence$3:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.impl.EdgeRDDImpl[ED2,VD]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.count", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#count():Long", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.getCheckpointFile", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.isCheckpointed", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.checkpoint", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#checkpoint():Unit", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.getStorageLevel", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "cache", "tail" : "(): EdgeRDDImpl.this.type", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.cache", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#cache():EdgeRDDImpl.this.type", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): EdgeRDDImpl.this.type", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.unpersist", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#unpersist(blocking:Boolean):EdgeRDDImpl.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): EdgeRDDImpl.this.type", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.persist", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#persist(newLevel:org.apache.spark.storage.StorageLevel):EdgeRDDImpl.this.type", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[Edge[ED]]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.collect", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#collect():Array[org.apache.spark.graphx.Edge[ED]]", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.partitioner", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "setName", "tail" : "(_name: String): EdgeRDDImpl.this.type", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.setName", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#setName(_name:String):EdgeRDDImpl.this.type", "kind" : "def"}, {"label" : "targetStorageLevel", "tail" : ": StorageLevel", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.targetStorageLevel", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#targetStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "partitionsRDD", "tail" : ": RDD[(PartitionID, EdgePartition[ED, VD])]", "member" : "org.apache.spark.graphx.impl.EdgeRDDImpl.partitionsRDD", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#partitionsRDD:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.PartitionID,org.apache.spark.graphx.impl.EdgePartition[ED,VD])]", "kind" : "val"}, {"label" : "compute", "tail" : "(part: Partition, context: TaskContext): Iterator[Edge[ED]]", "member" : "org.apache.spark.graphx.EdgeRDD.compute", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#compute(part:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[org.apache.spark.graphx.Edge[ED]]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.graphx.EdgeRDD.getPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): EdgeRDDImpl.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): EdgeRDDImpl.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (Edge[ED]) ⇒ K): RDD[(K, Edge[ED])]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[Edge[ED]]): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[Edge[ED]]): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[Edge[ED]]): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[Edge[ED]]): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(Edge[ED], Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(Edge[ED], Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[Edge[ED]]): PartialResult[Map[Edge[ED], BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[Edge[ED]]): Map[Edge[ED], Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, Edge[ED]) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, Edge[ED]) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: Edge[ED])(op: (Edge[ED], Edge[ED]) ⇒ Edge[ED]): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (Edge[ED], Edge[ED]) ⇒ Edge[ED], depth: Int): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (Edge[ED], Edge[ED]) ⇒ Edge[ED]): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Edge[ED]], p: Partitioner)(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Edge[ED]], numPartitions: Int): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[Edge[ED], U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[Edge[ED]]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Edge[ED]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[Edge[ED]], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[Edge[ED]], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[Edge[ED]], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[Edge[ED]], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[Edge[ED]], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[Edge[ED]], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(Edge[ED], U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[Edge[ED]]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[Edge[ED]]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (Edge[ED], (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Edge[ED]) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[Edge[ED]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Edge[ED]) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[Edge[ED]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Edge[ED]) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[Edge[ED]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(Edge[ED], U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[Edge[ED]]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Edge[ED]], numPartitions: Int): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Edge[ED]], partitioner: Partitioner)(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Edge[ED]) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[Edge[ED]]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (Edge[ED]) ⇒ Boolean): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Edge[ED]) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Edge[ED]) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "persist", "tail" : "(): EdgeRDDImpl.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/impl\/EdgeRDDImpl.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.impl.GraphImpl", "shortDescription" : "An implementation of org.apache.spark.graphx.Graph to support computation on graphs.", "object" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html", "members_class" : [{"label" : "outerJoinVertices", "tail" : "(other: RDD[(VertexId, U)])(updateF: (VertexId, VD, Option[U]) ⇒ VD2)(arg0: ClassTag[U], arg1: ClassTag[VD2], eq: =:=[VD, VD2]): Graph[VD2, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.outerJoinVertices", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#outerJoinVertices[U,VD2](other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,U)])(updateF:(org.apache.spark.graphx.VertexId,VD,Option[U])=>VD2)(implicitevidence$11:scala.reflect.ClassTag[U],implicitevidence$12:scala.reflect.ClassTag[VD2],impliciteq:VD=:=VD2):org.apache.spark.graphx.Graph[VD2,ED]", "kind" : "def"}, {"label" : "aggregateMessagesWithActiveSet", "tail" : "(sendMsg: (EdgeContext[VD, ED, A]) ⇒ Unit, mergeMsg: (A, A) ⇒ A, tripletFields: TripletFields, activeSetOpt: Option[(VertexRDD[_], EdgeDirection)])(arg0: ClassTag[A]): VertexRDD[A]", "member" : "org.apache.spark.graphx.impl.GraphImpl.aggregateMessagesWithActiveSet", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#aggregateMessagesWithActiveSet[A](sendMsg:org.apache.spark.graphx.EdgeContext[VD,ED,A]=>Unit,mergeMsg:(A,A)=>A,tripletFields:org.apache.spark.graphx.TripletFields,activeSetOpt:Option[(org.apache.spark.graphx.VertexRDD[_],org.apache.spark.graphx.EdgeDirection)])(implicitevidence$10:scala.reflect.ClassTag[A]):org.apache.spark.graphx.VertexRDD[A]", "kind" : "def"}, {"label" : "groupEdges", "tail" : "(merge: (ED, ED) ⇒ ED): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.groupEdges", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#groupEdges(merge:(ED,ED)=>ED):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "mask", "tail" : "(other: Graph[VD2, ED2])(arg0: ClassTag[VD2], arg1: ClassTag[ED2]): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.mask", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#mask[VD2,ED2](other:org.apache.spark.graphx.Graph[VD2,ED2])(implicitevidence$8:scala.reflect.ClassTag[VD2],implicitevidence$9:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "subgraph", "tail" : "(epred: (EdgeTriplet[VD, ED]) ⇒ Boolean, vpred: (VertexId, VD) ⇒ Boolean): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.subgraph", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#subgraph(epred:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>Boolean,vpred:(org.apache.spark.graphx.VertexId,VD)=>Boolean):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "mapTriplets", "tail" : "(f: (PartitionID, Iterator[EdgeTriplet[VD, ED]]) ⇒ Iterator[ED2], tripletFields: TripletFields)(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.impl.GraphImpl.mapTriplets", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#mapTriplets[ED2](f:(org.apache.spark.graphx.PartitionID,Iterator[org.apache.spark.graphx.EdgeTriplet[VD,ED]])=>Iterator[ED2],tripletFields:org.apache.spark.graphx.TripletFields)(implicitevidence$7:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "def"}, {"label" : "mapEdges", "tail" : "(f: (PartitionID, Iterator[Edge[ED]]) ⇒ Iterator[ED2])(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.impl.GraphImpl.mapEdges", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#mapEdges[ED2](f:(org.apache.spark.graphx.PartitionID,Iterator[org.apache.spark.graphx.Edge[ED]])=>Iterator[ED2])(implicitevidence$6:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "def"}, {"label" : "mapVertices", "tail" : "(f: (VertexId, VD) ⇒ VD2)(arg0: ClassTag[VD2], eq: =:=[VD, VD2]): Graph[VD2, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.mapVertices", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#mapVertices[VD2](f:(org.apache.spark.graphx.VertexId,VD)=>VD2)(implicitevidence$5:scala.reflect.ClassTag[VD2],impliciteq:VD=:=VD2):org.apache.spark.graphx.Graph[VD2,ED]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.reverse", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#reverse:org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "partitionBy", "tail" : "(partitionStrategy: PartitionStrategy, numPartitions: Int): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.partitionBy", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#partitionBy(partitionStrategy:org.apache.spark.graphx.PartitionStrategy,numPartitions:Int):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "partitionBy", "tail" : "(partitionStrategy: PartitionStrategy): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.partitionBy", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#partitionBy(partitionStrategy:org.apache.spark.graphx.PartitionStrategy):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "unpersistVertices", "tail" : "(blocking: Boolean): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.unpersistVertices", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#unpersistVertices(blocking:Boolean):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.unpersist", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#unpersist(blocking:Boolean):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "getCheckpointFiles", "tail" : "(): Seq[String]", "member" : "org.apache.spark.graphx.impl.GraphImpl.getCheckpointFiles", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#getCheckpointFiles:Seq[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.graphx.impl.GraphImpl.isCheckpointed", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.graphx.impl.GraphImpl.checkpoint", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#checkpoint():Unit", "kind" : "def"}, {"label" : "cache", "tail" : "(): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.cache", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#cache():org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): Graph[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.persist", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "triplets", "tail" : ": RDD[EdgeTriplet[VD, ED]]", "member" : "org.apache.spark.graphx.impl.GraphImpl.triplets", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#triplets:org.apache.spark.rdd.RDD[org.apache.spark.graphx.EdgeTriplet[VD,ED]]", "kind" : "lazy val"}, {"label" : "edges", "tail" : ": EdgeRDDImpl[ED, VD]", "member" : "org.apache.spark.graphx.impl.GraphImpl.edges", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#edges:org.apache.spark.graphx.impl.EdgeRDDImpl[ED,VD]", "kind" : "val"}, {"member" : "org.apache.spark.graphx.impl.GraphImpl#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.graphx.impl.GraphImpl#<init>", "error" : "unsupported entity"}, {"label" : "replicatedVertexView", "tail" : ": ReplicatedVertexView[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.replicatedVertexView", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#replicatedVertexView:org.apache.spark.graphx.impl.ReplicatedVertexView[VD,ED]", "kind" : "val"}, {"label" : "vertices", "tail" : ": VertexRDD[VD]", "member" : "org.apache.spark.graphx.impl.GraphImpl.vertices", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#vertices:org.apache.spark.graphx.VertexRDD[VD]", "kind" : "val"}, {"label" : "ops", "tail" : ": GraphOps[VD, ED]", "member" : "org.apache.spark.graphx.Graph.ops", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#ops:org.apache.spark.graphx.GraphOps[VD,ED]", "kind" : "val"}, {"label" : "aggregateMessages", "tail" : "(sendMsg: (EdgeContext[VD, ED, A]) ⇒ Unit, mergeMsg: (A, A) ⇒ A, tripletFields: TripletFields)(arg0: ClassTag[A]): VertexRDD[A]", "member" : "org.apache.spark.graphx.Graph.aggregateMessages", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#aggregateMessages[A](sendMsg:org.apache.spark.graphx.EdgeContext[VD,ED,A]=>Unit,mergeMsg:(A,A)=>A,tripletFields:org.apache.spark.graphx.TripletFields)(implicitevidence$11:scala.reflect.ClassTag[A]):org.apache.spark.graphx.VertexRDD[A]", "kind" : "def"}, {"label" : "mapTriplets", "tail" : "(map: (EdgeTriplet[VD, ED]) ⇒ ED2, tripletFields: TripletFields)(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.Graph.mapTriplets", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#mapTriplets[ED2](map:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>ED2,tripletFields:org.apache.spark.graphx.TripletFields)(implicitevidence$7:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "def"}, {"label" : "mapTriplets", "tail" : "(map: (EdgeTriplet[VD, ED]) ⇒ ED2)(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.Graph.mapTriplets", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#mapTriplets[ED2](map:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>ED2)(implicitevidence$6:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "def"}, {"label" : "mapEdges", "tail" : "(map: (Edge[ED]) ⇒ ED2)(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.Graph.mapEdges", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#mapEdges[ED2](map:org.apache.spark.graphx.Edge[ED]=>ED2)(implicitevidence$4:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromExistingRDDs", "tail" : "(vertices: VertexRDD[VD], edges: EdgeRDD[ED])(arg0: ClassTag[VD], arg1: ClassTag[ED]): GraphImpl[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.fromExistingRDDs", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#fromExistingRDDs[VD,ED](vertices:org.apache.spark.graphx.VertexRDD[VD],edges:org.apache.spark.graphx.EdgeRDD[ED])(implicitevidence$21:scala.reflect.ClassTag[VD],implicitevidence$22:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.impl.GraphImpl[VD,ED]", "kind" : "def"}, {"label" : "apply", "tail" : "(vertices: VertexRDD[VD], edges: EdgeRDD[ED])(arg0: ClassTag[VD], arg1: ClassTag[ED]): GraphImpl[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.apply", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#apply[VD,ED](vertices:org.apache.spark.graphx.VertexRDD[VD],edges:org.apache.spark.graphx.EdgeRDD[ED])(implicitevidence$19:scala.reflect.ClassTag[VD],implicitevidence$20:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.impl.GraphImpl[VD,ED]", "kind" : "def"}, {"label" : "apply", "tail" : "(vertices: RDD[(VertexId, VD)], edges: RDD[Edge[ED]], defaultVertexAttr: VD, edgeStorageLevel: StorageLevel, vertexStorageLevel: StorageLevel)(arg0: ClassTag[VD], arg1: ClassTag[ED]): GraphImpl[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.apply", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#apply[VD,ED](vertices:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)],edges:org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[ED]],defaultVertexAttr:VD,edgeStorageLevel:org.apache.spark.storage.StorageLevel,vertexStorageLevel:org.apache.spark.storage.StorageLevel)(implicitevidence$17:scala.reflect.ClassTag[VD],implicitevidence$18:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.impl.GraphImpl[VD,ED]", "kind" : "def"}, {"label" : "fromEdgePartitions", "tail" : "(edgePartitions: RDD[(PartitionID, EdgePartition[ED, VD])], defaultVertexAttr: VD, edgeStorageLevel: StorageLevel, vertexStorageLevel: StorageLevel)(arg0: ClassTag[VD], arg1: ClassTag[ED]): GraphImpl[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.fromEdgePartitions", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#fromEdgePartitions[VD,ED](edgePartitions:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.PartitionID,org.apache.spark.graphx.impl.EdgePartition[ED,VD])],defaultVertexAttr:VD,edgeStorageLevel:org.apache.spark.storage.StorageLevel,vertexStorageLevel:org.apache.spark.storage.StorageLevel)(implicitevidence$15:scala.reflect.ClassTag[VD],implicitevidence$16:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.impl.GraphImpl[VD,ED]", "kind" : "def"}, {"label" : "apply", "tail" : "(edges: RDD[Edge[ED]], defaultVertexAttr: VD, edgeStorageLevel: StorageLevel, vertexStorageLevel: StorageLevel)(arg0: ClassTag[VD], arg1: ClassTag[ED]): GraphImpl[VD, ED]", "member" : "org.apache.spark.graphx.impl.GraphImpl.apply", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#apply[VD,ED](edges:org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[ED]],defaultVertexAttr:VD,edgeStorageLevel:org.apache.spark.storage.StorageLevel,vertexStorageLevel:org.apache.spark.storage.StorageLevel)(implicitevidence$13:scala.reflect.ClassTag[VD],implicitevidence$14:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.impl.GraphImpl[VD,ED]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/GraphImpl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/impl\/GraphImpl.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.impl.VertexRDDImpl", "shortDescription" : "", "members_class" : [{"label" : "withEdges", "tail" : "(edges: EdgeRDD[_]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.withEdges", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#withEdges(edges:org.apache.spark.graphx.EdgeRDD[_]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "reverseRoutingTables", "tail" : "(): VertexRDD[VD]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.reverseRoutingTables", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#reverseRoutingTables():org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "aggregateUsingIndex", "tail" : "(messages: RDD[(VertexId, VD2)], reduceFunc: (VD2, VD2) ⇒ VD2)(arg0: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.aggregateUsingIndex", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#aggregateUsingIndex[VD2](messages:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD2)],reduceFunc:(VD2,VD2)=>VD2)(implicitevidence$12:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "def"}, {"label" : "innerJoin", "tail" : "(other: RDD[(VertexId, U)])(f: (VertexId, VD, U) ⇒ VD2)(arg0: ClassTag[U], arg1: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.innerJoin", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#innerJoin[U,VD2](other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,U)])(f:(org.apache.spark.graphx.VertexId,VD,U)=>VD2)(implicitevidence$10:scala.reflect.ClassTag[U],implicitevidence$11:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "def"}, {"label" : "innerZipJoin", "tail" : "(other: VertexRDD[U])(f: (VertexId, VD, U) ⇒ VD2)(arg0: ClassTag[U], arg1: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.innerZipJoin", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#innerZipJoin[U,VD2](other:org.apache.spark.graphx.VertexRDD[U])(f:(org.apache.spark.graphx.VertexId,VD,U)=>VD2)(implicitevidence$8:scala.reflect.ClassTag[U],implicitevidence$9:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "def"}, {"label" : "leftJoin", "tail" : "(other: RDD[(VertexId, VD2)])(f: (VertexId, VD, Option[VD2]) ⇒ VD3)(arg0: ClassTag[VD2], arg1: ClassTag[VD3]): VertexRDD[VD3]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.leftJoin", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#leftJoin[VD2,VD3](other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD2)])(f:(org.apache.spark.graphx.VertexId,VD,Option[VD2])=>VD3)(implicitevidence$6:scala.reflect.ClassTag[VD2],implicitevidence$7:scala.reflect.ClassTag[VD3]):org.apache.spark.graphx.VertexRDD[VD3]", "kind" : "def"}, {"label" : "leftZipJoin", "tail" : "(other: VertexRDD[VD2])(f: (VertexId, VD, Option[VD2]) ⇒ VD3)(arg0: ClassTag[VD2], arg1: ClassTag[VD3]): VertexRDD[VD3]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.leftZipJoin", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#leftZipJoin[VD2,VD3](other:org.apache.spark.graphx.VertexRDD[VD2])(f:(org.apache.spark.graphx.VertexId,VD,Option[VD2])=>VD3)(implicitevidence$4:scala.reflect.ClassTag[VD2],implicitevidence$5:scala.reflect.ClassTag[VD3]):org.apache.spark.graphx.VertexRDD[VD3]", "kind" : "def"}, {"label" : "diff", "tail" : "(other: VertexRDD[VD]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.diff", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#diff(other:org.apache.spark.graphx.VertexRDD[VD]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "diff", "tail" : "(other: RDD[(VertexId, VD)]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.diff", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#diff(other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "minus", "tail" : "(other: VertexRDD[VD]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.minus", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#minus(other:org.apache.spark.graphx.VertexRDD[VD]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "minus", "tail" : "(other: RDD[(VertexId, VD)]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.minus", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#minus(other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (VertexId, VD) ⇒ VD2)(arg0: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.mapValues", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#mapValues[VD2](f:(org.apache.spark.graphx.VertexId,VD)=>VD2)(implicitevidence$3:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (VD) ⇒ VD2)(arg0: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.mapValues", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#mapValues[VD2](f:VD=>VD2)(implicitevidence$2:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.count", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#count():Long", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.getCheckpointFile", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.isCheckpointed", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.checkpoint", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#checkpoint():Unit", "kind" : "def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.getStorageLevel", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "cache", "tail" : "(): VertexRDDImpl.this.type", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.cache", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#cache():VertexRDDImpl.this.type", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): VertexRDDImpl.this.type", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.unpersist", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#unpersist(blocking:Boolean):VertexRDDImpl.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): VertexRDDImpl.this.type", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.persist", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#persist(newLevel:org.apache.spark.storage.StorageLevel):VertexRDDImpl.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): VertexRDDImpl.this.type", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.setName", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#setName(_name:String):VertexRDDImpl.this.type", "kind" : "def"}, {"label" : "getPreferredLocations", "tail" : "(s: Partition): Seq[String]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.getPreferredLocations", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getPreferredLocations(s:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.partitioner", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "reindex", "tail" : "(): VertexRDD[VD]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.reindex", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#reindex():org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "vdTag", "tail" : ": ClassTag[VD]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.vdTag", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#vdTag:scala.reflect.ClassTag[VD]", "kind" : "implicit val"}, {"label" : "targetStorageLevel", "tail" : ": StorageLevel", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.targetStorageLevel", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#targetStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "val"}, {"label" : "partitionsRDD", "tail" : ": RDD[ShippableVertexPartition[VD]]", "member" : "org.apache.spark.graphx.impl.VertexRDDImpl.partitionsRDD", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#partitionsRDD:org.apache.spark.rdd.RDD[org.apache.spark.graphx.impl.ShippableVertexPartition[VD]]", "kind" : "val"}, {"label" : "filter", "tail" : "(pred: ((VertexId, VD)) ⇒ Boolean): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.filter", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#filter(pred:((org.apache.spark.graphx.VertexId,VD))=>Boolean):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "compute", "tail" : "(part: Partition, context: TaskContext): Iterator[(VertexId, VD)]", "member" : "org.apache.spark.graphx.VertexRDD.compute", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#compute(part:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[(org.apache.spark.graphx.VertexId,VD)]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.graphx.VertexRDD.getPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): VertexRDDImpl.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): VertexRDDImpl.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((VertexId, VD)) ⇒ K): RDD[(K, (VertexId, VD))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(VertexId, VD)]): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(VertexId, VD)]): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(VertexId, VD)]): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(VertexId, VD)]): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((VertexId, VD), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((VertexId, VD), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(VertexId, VD)]): PartialResult[Map[(VertexId, VD), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(VertexId, VD)]): Map[(VertexId, VD), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (VertexId, VD)) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (VertexId, VD)) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (VertexId, VD))(op: ((VertexId, VD), (VertexId, VD)) ⇒ (VertexId, VD)): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((VertexId, VD), (VertexId, VD)) ⇒ (VertexId, VD), depth: Int): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((VertexId, VD), (VertexId, VD)) ⇒ (VertexId, VD)): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(VertexId, VD)], p: Partitioner)(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(VertexId, VD)], numPartitions: Int): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(VertexId, VD), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(VertexId, VD)]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((VertexId, VD)) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(VertexId, VD)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(VertexId, VD)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(VertexId, VD)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(VertexId, VD)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(VertexId, VD)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(VertexId, VD)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((VertexId, VD), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(VertexId, VD)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(VertexId, VD)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((VertexId, VD), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((VertexId, VD)) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(VertexId, VD)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((VertexId, VD)) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(VertexId, VD)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((VertexId, VD)) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(VertexId, VD)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((VertexId, VD), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(VertexId, VD)]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(VertexId, VD)], numPartitions: Int): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(VertexId, VD)], partitioner: Partitioner)(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((VertexId, VD)) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(VertexId, VD)]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((VertexId, VD)) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((VertexId, VD)) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "persist", "tail" : "(): VertexRDDImpl.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/impl\/VertexRDDImpl.html", "kind" : "class"}], "org.apache.spark" : [], "org.apache" : [], "org.apache.spark.graphx.lib" : [{"name" : "org.apache.spark.graphx.lib.ConnectedComponents", "shortDescription" : "Connected components algorithm.", "object" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html", "members_object" : [{"label" : "run", "tail" : "(graph: Graph[VD, ED])(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[VertexId, ED]", "member" : "org.apache.spark.graphx.lib.ConnectedComponents.run", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#run[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED])(implicitevidence$3:scala.reflect.ClassTag[VD],implicitevidence$4:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,ED]", "kind" : "def"}, {"label" : "run", "tail" : "(graph: Graph[VD, ED], maxIterations: Int)(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[VertexId, ED]", "member" : "org.apache.spark.graphx.lib.ConnectedComponents.run", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#run[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],maxIterations:Int)(implicitevidence$1:scala.reflect.ClassTag[VD],implicitevidence$2:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,ED]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/ConnectedComponents$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.lib.LabelPropagation", "shortDescription" : "Label Propagation algorithm.", "object" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html", "members_object" : [{"label" : "run", "tail" : "(graph: Graph[VD, ED], maxSteps: Int)(arg0: ClassTag[ED]): Graph[VertexId, ED]", "member" : "org.apache.spark.graphx.lib.LabelPropagation.run", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#run[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],maxSteps:Int)(implicitevidence$1:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,ED]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/LabelPropagation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.lib.PageRank", "shortDescription" : "PageRank algorithm implementation.", "object" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html", "members_object" : [{"label" : "runUntilConvergenceWithOptions", "tail" : "(graph: Graph[VD, ED], tol: Double, resetProb: Double, srcId: Option[VertexId])(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Double, Double]", "member" : "org.apache.spark.graphx.lib.PageRank.runUntilConvergenceWithOptions", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#runUntilConvergenceWithOptions[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],tol:Double,resetProb:Double,srcId:Option[org.apache.spark.graphx.VertexId])(implicitevidence$15:scala.reflect.ClassTag[VD],implicitevidence$16:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "runUntilConvergence", "tail" : "(graph: Graph[VD, ED], tol: Double, resetProb: Double)(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Double, Double]", "member" : "org.apache.spark.graphx.lib.PageRank.runUntilConvergence", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#runUntilConvergence[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],tol:Double,resetProb:Double)(implicitevidence$13:scala.reflect.ClassTag[VD],implicitevidence$14:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "runParallelPersonalizedPageRank", "tail" : "(graph: Graph[VD, ED], numIter: Int, resetProb: Double, sources: Array[VertexId])(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Vector, Double]", "member" : "org.apache.spark.graphx.lib.PageRank.runParallelPersonalizedPageRank", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#runParallelPersonalizedPageRank[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],numIter:Int,resetProb:Double,sources:Array[org.apache.spark.graphx.VertexId])(implicitevidence$11:scala.reflect.ClassTag[VD],implicitevidence$12:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[org.apache.spark.ml.linalg.Vector,Double]", "kind" : "def"}, {"label" : "runWithOptionsWithPreviousPageRank", "tail" : "(graph: Graph[VD, ED], numIter: Int, resetProb: Double, srcId: Option[VertexId], normalized: Boolean, preRankGraph: Graph[Double, Double])(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Double, Double]", "member" : "org.apache.spark.graphx.lib.PageRank.runWithOptionsWithPreviousPageRank", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#runWithOptionsWithPreviousPageRank[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],numIter:Int,resetProb:Double,srcId:Option[org.apache.spark.graphx.VertexId],normalized:Boolean,preRankGraph:org.apache.spark.graphx.Graph[Double,Double])(implicitevidence$9:scala.reflect.ClassTag[VD],implicitevidence$10:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "runWithOptionsWithPreviousPageRank", "tail" : "(graph: Graph[VD, ED], numIter: Int, resetProb: Double, srcId: Option[VertexId], preRankGraph: Graph[Double, Double])(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Double, Double]", "member" : "org.apache.spark.graphx.lib.PageRank.runWithOptionsWithPreviousPageRank", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#runWithOptionsWithPreviousPageRank[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],numIter:Int,resetProb:Double,srcId:Option[org.apache.spark.graphx.VertexId],preRankGraph:org.apache.spark.graphx.Graph[Double,Double])(implicitevidence$7:scala.reflect.ClassTag[VD],implicitevidence$8:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "runWithOptions", "tail" : "(graph: Graph[VD, ED], numIter: Int, resetProb: Double, srcId: Option[VertexId], normalized: Boolean)(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Double, Double]", "member" : "org.apache.spark.graphx.lib.PageRank.runWithOptions", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#runWithOptions[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],numIter:Int,resetProb:Double,srcId:Option[org.apache.spark.graphx.VertexId],normalized:Boolean)(implicitevidence$5:scala.reflect.ClassTag[VD],implicitevidence$6:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "runWithOptions", "tail" : "(graph: Graph[VD, ED], numIter: Int, resetProb: Double, srcId: Option[VertexId])(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Double, Double]", "member" : "org.apache.spark.graphx.lib.PageRank.runWithOptions", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#runWithOptions[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],numIter:Int,resetProb:Double,srcId:Option[org.apache.spark.graphx.VertexId])(implicitevidence$3:scala.reflect.ClassTag[VD],implicitevidence$4:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "run", "tail" : "(graph: Graph[VD, ED], numIter: Int, resetProb: Double)(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Double, Double]", "member" : "org.apache.spark.graphx.lib.PageRank.run", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#run[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],numIter:Int,resetProb:Double)(implicitevidence$1:scala.reflect.ClassTag[VD],implicitevidence$2:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/PageRank$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.lib.ShortestPaths", "shortDescription" : "Computes shortest paths to the given set of landmark vertices, returning a graph where eachvertex attribute is a map containing the shortest-path distance to each reachable landmark.", "object" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html", "members_object" : [{"label" : "run", "tail" : "(graph: Graph[VD, ED], landmarks: Seq[VertexId])(arg0: ClassTag[ED]): Graph[SPMap, ED]", "member" : "org.apache.spark.graphx.lib.ShortestPaths.run", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#run[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],landmarks:Seq[org.apache.spark.graphx.VertexId])(implicitevidence$1:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[org.apache.spark.graphx.lib.ShortestPaths.SPMap,ED]", "kind" : "def"}, {"label" : "SPMap", "tail" : "", "member" : "org.apache.spark.graphx.lib.ShortestPaths.SPMap", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#SPMap=scala.collection.Map[org.apache.spark.graphx.VertexId,Int]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/ShortestPaths$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.lib.StronglyConnectedComponents", "shortDescription" : "Strongly connected components algorithm implementation.", "object" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html", "members_object" : [{"label" : "run", "tail" : "(graph: Graph[VD, ED], numIter: Int)(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[VertexId, ED]", "member" : "org.apache.spark.graphx.lib.StronglyConnectedComponents.run", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#run[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED],numIter:Int)(implicitevidence$1:scala.reflect.ClassTag[VD],implicitevidence$2:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,ED]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/StronglyConnectedComponents$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.lib.SVDPlusPlus", "shortDescription" : "Implementation of SVD++ algorithm.", "object" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html", "members_object" : [{"label" : "run", "tail" : "(edges: RDD[Edge[Double]], conf: Conf): (Graph[(Array[Double], Array[Double], Double, Double), Double], Double)", "member" : "org.apache.spark.graphx.lib.SVDPlusPlus.run", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#run(edges:org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Double]],conf:org.apache.spark.graphx.lib.SVDPlusPlus.Conf):(org.apache.spark.graphx.Graph[(Array[Double],Array[Double],Double,Double),Double],Double)", "kind" : "def"}, {"label" : "Conf", "tail" : "", "member" : "org.apache.spark.graphx.lib.SVDPlusPlus.Conf", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#ConfextendsSerializable", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/SVDPlusPlus$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.lib.TriangleCount", "shortDescription" : "Compute the number of triangles passing through each vertex.", "object" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html", "members_object" : [{"label" : "runPreCanonicalized", "tail" : "(graph: Graph[VD, ED])(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Int, ED]", "member" : "org.apache.spark.graphx.lib.TriangleCount.runPreCanonicalized", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#runPreCanonicalized[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED])(implicitevidence$3:scala.reflect.ClassTag[VD],implicitevidence$4:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Int,ED]", "kind" : "def"}, {"label" : "run", "tail" : "(graph: Graph[VD, ED])(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[Int, ED]", "member" : "org.apache.spark.graphx.lib.TriangleCount.run", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#run[VD,ED](graph:org.apache.spark.graphx.Graph[VD,ED])(implicitevidence$1:scala.reflect.ClassTag[VD],implicitevidence$2:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[Int,ED]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/lib\/TriangleCount$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.apache.spark.graphx" : [{"name" : "org.apache.spark.graphx.Edge", "shortDescription" : "A single directed edge consisting of a source id, target id,and the data associated with the edge.", "object" : "org\/apache\/spark\/graphx\/Edge$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/Edge$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/Edge$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/Edge$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/Edge$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/Edge$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/Edge$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/Edge$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Edge$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Edge$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Edge$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/Edge$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/Edge$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/Edge$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/Edge$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/Edge$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/Edge$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/Edge$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/Edge$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/Edge$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "relativeDirection", "tail" : "(vid: VertexId): EdgeDirection", "member" : "org.apache.spark.graphx.Edge.relativeDirection", "link" : "org\/apache\/spark\/graphx\/Edge.html#relativeDirection(vid:org.apache.spark.graphx.VertexId):org.apache.spark.graphx.EdgeDirection", "kind" : "def"}, {"label" : "otherVertexId", "tail" : "(vid: VertexId): VertexId", "member" : "org.apache.spark.graphx.Edge.otherVertexId", "link" : "org\/apache\/spark\/graphx\/Edge.html#otherVertexId(vid:org.apache.spark.graphx.VertexId):org.apache.spark.graphx.VertexId", "kind" : "def"}, {"member" : "org.apache.spark.graphx.Edge#<init>", "error" : "unsupported entity"}, {"label" : "attr", "tail" : ": ED", "member" : "org.apache.spark.graphx.Edge.attr", "link" : "org\/apache\/spark\/graphx\/Edge.html#attr:ED", "kind" : "var"}, {"label" : "dstId", "tail" : ": VertexId", "member" : "org.apache.spark.graphx.Edge.dstId", "link" : "org\/apache\/spark\/graphx\/Edge.html#dstId:org.apache.spark.graphx.VertexId", "kind" : "var"}, {"label" : "srcId", "tail" : ": VertexId", "member" : "org.apache.spark.graphx.Edge.srcId", "link" : "org\/apache\/spark\/graphx\/Edge.html#srcId:org.apache.spark.graphx.VertexId", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/Edge.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/Edge.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/Edge.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/Edge.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/Edge.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/Edge.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/Edge.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Edge.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Edge.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Edge.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/Edge.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/Edge.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/Edge.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/Edge.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/Edge.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/Edge.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/graphx\/Edge.html", "kind" : "case class"}, {"name" : "org.apache.spark.graphx.EdgeContext", "shortDescription" : "Represents an edge along with its neighboring vertices and allows sending messages along theedge.", "object" : "org\/apache\/spark\/graphx\/EdgeContext$.html", "members_class" : [{"label" : "toEdgeTriplet", "tail" : "(): EdgeTriplet[VD, ED]", "member" : "org.apache.spark.graphx.EdgeContext.toEdgeTriplet", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#toEdgeTriplet:org.apache.spark.graphx.EdgeTriplet[VD,ED]", "kind" : "def"}, {"member" : "org.apache.spark.graphx.EdgeContext#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sendToDst", "tail" : "(msg: A): Unit", "member" : "org.apache.spark.graphx.EdgeContext.sendToDst", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#sendToDst(msg:A):Unit", "kind" : "abstract def"}, {"label" : "sendToSrc", "tail" : "(msg: A): Unit", "member" : "org.apache.spark.graphx.EdgeContext.sendToSrc", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#sendToSrc(msg:A):Unit", "kind" : "abstract def"}, {"label" : "attr", "tail" : "(): ED", "member" : "org.apache.spark.graphx.EdgeContext.attr", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#attr:ED", "kind" : "abstract def"}, {"label" : "dstAttr", "tail" : "(): VD", "member" : "org.apache.spark.graphx.EdgeContext.dstAttr", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#dstAttr:VD", "kind" : "abstract def"}, {"label" : "srcAttr", "tail" : "(): VD", "member" : "org.apache.spark.graphx.EdgeContext.srcAttr", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#srcAttr:VD", "kind" : "abstract def"}, {"label" : "dstId", "tail" : "(): VertexId", "member" : "org.apache.spark.graphx.EdgeContext.dstId", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#dstId:org.apache.spark.graphx.VertexId", "kind" : "abstract def"}, {"label" : "srcId", "tail" : "(): VertexId", "member" : "org.apache.spark.graphx.EdgeContext.srcId", "link" : "org\/apache\/spark\/graphx\/EdgeContext.html#srcId:org.apache.spark.graphx.VertexId", "kind" : "abstract def"}], "members_object" : [{"label" : "unapply", "tail" : "(edge: EdgeContext[VD, ED, A]): Some[(VertexId, VertexId, VD, VD, ED)]", "member" : "org.apache.spark.graphx.EdgeContext.unapply", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#unapply[VD,ED,A](edge:org.apache.spark.graphx.EdgeContext[VD,ED,A]):Some[(org.apache.spark.graphx.VertexId,org.apache.spark.graphx.VertexId,VD,VD,ED)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/EdgeContext.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.EdgeDirection", "shortDescription" : "The direction of a directed edge relative to a vertex.", "object" : "org\/apache\/spark\/graphx\/EdgeDirection$.html", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.graphx.EdgeDirection.hashCode", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.apache.spark.graphx.EdgeDirection.equals", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.graphx.EdgeDirection.toString", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#toString():String", "kind" : "def"}, {"label" : "reverse", "tail" : "(): EdgeDirection", "member" : "org.apache.spark.graphx.EdgeDirection.reverse", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#reverse:org.apache.spark.graphx.EdgeDirection", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeDirection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Both", "tail" : ": EdgeDirection", "member" : "org.apache.spark.graphx.EdgeDirection.Both", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#Both:org.apache.spark.graphx.EdgeDirection", "kind" : "final val"}, {"label" : "Either", "tail" : ": EdgeDirection", "member" : "org.apache.spark.graphx.EdgeDirection.Either", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#Either:org.apache.spark.graphx.EdgeDirection", "kind" : "final val"}, {"label" : "Out", "tail" : ": EdgeDirection", "member" : "org.apache.spark.graphx.EdgeDirection.Out", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#Out:org.apache.spark.graphx.EdgeDirection", "kind" : "final val"}, {"label" : "In", "tail" : ": EdgeDirection", "member" : "org.apache.spark.graphx.EdgeDirection.In", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#In:org.apache.spark.graphx.EdgeDirection", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeDirection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/EdgeDirection.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.EdgeRDD", "shortDescription" : "EdgeRDD[ED, VD] extends RDD[Edge[ED]] by storing the edges in columnar format on eachpartition for performance.", "object" : "org\/apache\/spark\/graphx\/EdgeRDD$.html", "members_class" : [{"label" : "compute", "tail" : "(part: Partition, context: TaskContext): Iterator[Edge[ED]]", "member" : "org.apache.spark.graphx.EdgeRDD.compute", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#compute(part:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[org.apache.spark.graphx.Edge[ED]]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.graphx.EdgeRDD.getPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"member" : "org.apache.spark.graphx.EdgeRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): EdgeRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): EdgeRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: (Edge[ED]) ⇒ K): RDD[(K, Edge[ED])]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[Edge[ED]]): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[Edge[ED]]): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[Edge[ED]]): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[Edge[ED]]): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[(Edge[ED], Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[(Edge[ED], Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[Edge[ED]]): PartialResult[Map[Edge[ED], BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[Edge[ED]]): Map[Edge[ED], Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, Edge[ED]) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, Edge[ED]) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: Edge[ED])(op: (Edge[ED], Edge[ED]) ⇒ Edge[ED]): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: (Edge[ED], Edge[ED]) ⇒ Edge[ED], depth: Int): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (Edge[ED], Edge[ED]) ⇒ Edge[ED]): Edge[ED]", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Edge[ED]], p: Partitioner)(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Edge[ED]], numPartitions: Int): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[Edge[ED], U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[Edge[ED]]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Edge[ED]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[Edge[ED]], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[Edge[ED]], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[Edge[ED]], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[Edge[ED]], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[Edge[ED]], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[Edge[ED]], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(Edge[ED], U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[Edge[ED]]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[Edge[ED]]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: (Edge[ED], (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Edge[ED]) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[Edge[ED]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Edge[ED]) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[Edge[ED]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: (Edge[ED]) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[Edge[ED]])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[(Edge[ED], U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[Edge[ED]]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Edge[ED]], numPartitions: Int): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Edge[ED]], partitioner: Partitioner)(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: (Edge[ED]) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[Edge[ED]]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[Edge[ED]]): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (Edge[ED]) ⇒ Boolean): RDD[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.filter", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#filter(f:T=>Boolean):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Edge[ED]) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Edge[ED]) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[Edge[ED]]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): EdgeRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): EdgeRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): EdgeRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): EdgeRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): EdgeRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "innerJoin", "tail" : "(other: EdgeRDD[ED2])(f: (VertexId, VertexId, ED, ED2) ⇒ ED3)(arg0: ClassTag[ED2], arg1: ClassTag[ED3]): EdgeRDD[ED3]", "member" : "org.apache.spark.graphx.EdgeRDD.innerJoin", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#innerJoin[ED2,ED3](other:org.apache.spark.graphx.EdgeRDD[ED2])(f:(org.apache.spark.graphx.VertexId,org.apache.spark.graphx.VertexId,ED,ED2)=>ED3)(implicitevidence$2:scala.reflect.ClassTag[ED2],implicitevidence$3:scala.reflect.ClassTag[ED3]):org.apache.spark.graphx.EdgeRDD[ED3]", "kind" : "abstract def"}, {"label" : "reverse", "tail" : "(): EdgeRDD[ED]", "member" : "org.apache.spark.graphx.EdgeRDD.reverse", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#reverse:org.apache.spark.graphx.EdgeRDD[ED]", "kind" : "abstract def"}, {"label" : "mapValues", "tail" : "(f: (Edge[ED]) ⇒ ED2)(arg0: ClassTag[ED2]): EdgeRDD[ED2]", "member" : "org.apache.spark.graphx.EdgeRDD.mapValues", "link" : "org\/apache\/spark\/graphx\/EdgeRDD.html#mapValues[ED2](f:org.apache.spark.graphx.Edge[ED]=>ED2)(implicitevidence$1:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.EdgeRDD[ED2]", "kind" : "abstract def"}], "members_object" : [{"label" : "fromEdges", "tail" : "(edges: RDD[Edge[ED]])(arg0: ClassTag[ED], arg1: ClassTag[VD]): EdgeRDDImpl[ED, VD]", "member" : "org.apache.spark.graphx.EdgeRDD.fromEdges", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#fromEdges[ED,VD](edges:org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[ED]])(implicitevidence$4:scala.reflect.ClassTag[ED],implicitevidence$5:scala.reflect.ClassTag[VD]):org.apache.spark.graphx.impl.EdgeRDDImpl[ED,VD]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/EdgeRDD.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.EdgeTriplet", "shortDescription" : "An edge triplet represents an edge along with the vertex attributes of its neighboring vertices.", "members_class" : [{"label" : "toTuple", "tail" : "(): ((VertexId, VD), (VertexId, VD), ED)", "member" : "org.apache.spark.graphx.EdgeTriplet.toTuple", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#toTuple:((org.apache.spark.graphx.VertexId,VD),(org.apache.spark.graphx.VertexId,VD),ED)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.graphx.EdgeTriplet.toString", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#toString():String", "kind" : "def"}, {"label" : "vertexAttr", "tail" : "(vid: VertexId): VD", "member" : "org.apache.spark.graphx.EdgeTriplet.vertexAttr", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#vertexAttr(vid:org.apache.spark.graphx.VertexId):VD", "kind" : "def"}, {"label" : "otherVertexAttr", "tail" : "(vid: VertexId): VD", "member" : "org.apache.spark.graphx.EdgeTriplet.otherVertexAttr", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#otherVertexAttr(vid:org.apache.spark.graphx.VertexId):VD", "kind" : "def"}, {"label" : "set", "tail" : "(other: Edge[ED]): EdgeTriplet[VD, ED]", "member" : "org.apache.spark.graphx.EdgeTriplet.set", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#set(other:org.apache.spark.graphx.Edge[ED]):org.apache.spark.graphx.EdgeTriplet[VD,ED]", "kind" : "def"}, {"label" : "dstAttr", "tail" : ": VD", "member" : "org.apache.spark.graphx.EdgeTriplet.dstAttr", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#dstAttr:VD", "kind" : "var"}, {"label" : "srcAttr", "tail" : ": VD", "member" : "org.apache.spark.graphx.EdgeTriplet.srcAttr", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#srcAttr:VD", "kind" : "var"}, {"member" : "org.apache.spark.graphx.EdgeTriplet#<init>", "error" : "unsupported entity"}, {"label" : "relativeDirection", "tail" : "(vid: VertexId): EdgeDirection", "member" : "org.apache.spark.graphx.Edge.relativeDirection", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#relativeDirection(vid:org.apache.spark.graphx.VertexId):org.apache.spark.graphx.EdgeDirection", "kind" : "def"}, {"label" : "otherVertexId", "tail" : "(vid: VertexId): VertexId", "member" : "org.apache.spark.graphx.Edge.otherVertexId", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#otherVertexId(vid:org.apache.spark.graphx.VertexId):org.apache.spark.graphx.VertexId", "kind" : "def"}, {"label" : "attr", "tail" : ": ED", "member" : "org.apache.spark.graphx.Edge.attr", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#attr:ED", "kind" : "var"}, {"label" : "dstId", "tail" : ": VertexId", "member" : "org.apache.spark.graphx.Edge.dstId", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#dstId:org.apache.spark.graphx.VertexId", "kind" : "var"}, {"label" : "srcId", "tail" : ": VertexId", "member" : "org.apache.spark.graphx.Edge.srcId", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#srcId:org.apache.spark.graphx.VertexId", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/EdgeTriplet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/EdgeTriplet.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.Graph", "shortDescription" : "The Graph abstractly represents a graph with arbitrary objectsassociated with vertices and edges.", "object" : "org\/apache\/spark\/graphx\/Graph$.html", "members_class" : [{"label" : "ops", "tail" : ": GraphOps[VD, ED]", "member" : "org.apache.spark.graphx.Graph.ops", "link" : "org\/apache\/spark\/graphx\/Graph.html#ops:org.apache.spark.graphx.GraphOps[VD,ED]", "kind" : "val"}, {"label" : "aggregateMessages", "tail" : "(sendMsg: (EdgeContext[VD, ED, A]) ⇒ Unit, mergeMsg: (A, A) ⇒ A, tripletFields: TripletFields)(arg0: ClassTag[A]): VertexRDD[A]", "member" : "org.apache.spark.graphx.Graph.aggregateMessages", "link" : "org\/apache\/spark\/graphx\/Graph.html#aggregateMessages[A](sendMsg:org.apache.spark.graphx.EdgeContext[VD,ED,A]=>Unit,mergeMsg:(A,A)=>A,tripletFields:org.apache.spark.graphx.TripletFields)(implicitevidence$11:scala.reflect.ClassTag[A]):org.apache.spark.graphx.VertexRDD[A]", "kind" : "def"}, {"label" : "mapTriplets", "tail" : "(map: (EdgeTriplet[VD, ED]) ⇒ ED2, tripletFields: TripletFields)(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.Graph.mapTriplets", "link" : "org\/apache\/spark\/graphx\/Graph.html#mapTriplets[ED2](map:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>ED2,tripletFields:org.apache.spark.graphx.TripletFields)(implicitevidence$7:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "def"}, {"label" : "mapTriplets", "tail" : "(map: (EdgeTriplet[VD, ED]) ⇒ ED2)(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.Graph.mapTriplets", "link" : "org\/apache\/spark\/graphx\/Graph.html#mapTriplets[ED2](map:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>ED2)(implicitevidence$6:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "def"}, {"label" : "mapEdges", "tail" : "(map: (Edge[ED]) ⇒ ED2)(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.Graph.mapEdges", "link" : "org\/apache\/spark\/graphx\/Graph.html#mapEdges[ED2](map:org.apache.spark.graphx.Edge[ED]=>ED2)(implicitevidence$4:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "def"}, {"member" : "org.apache.spark.graphx.Graph#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/Graph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/Graph.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/Graph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/Graph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/Graph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/Graph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/Graph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Graph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Graph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Graph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/Graph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/Graph.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/Graph.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/Graph.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/Graph.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/Graph.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/Graph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/Graph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/Graph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "outerJoinVertices", "tail" : "(other: RDD[(VertexId, U)])(mapFunc: (VertexId, VD, Option[U]) ⇒ VD2)(arg0: ClassTag[U], arg1: ClassTag[VD2], eq: =:=[VD, VD2]): Graph[VD2, ED]", "member" : "org.apache.spark.graphx.Graph.outerJoinVertices", "link" : "org\/apache\/spark\/graphx\/Graph.html#outerJoinVertices[U,VD2](other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,U)])(mapFunc:(org.apache.spark.graphx.VertexId,VD,Option[U])=>VD2)(implicitevidence$13:scala.reflect.ClassTag[U],implicitevidence$14:scala.reflect.ClassTag[VD2],impliciteq:VD=:=VD2):org.apache.spark.graphx.Graph[VD2,ED]", "kind" : "abstract def"}, {"label" : "groupEdges", "tail" : "(merge: (ED, ED) ⇒ ED): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.groupEdges", "link" : "org\/apache\/spark\/graphx\/Graph.html#groupEdges(merge:(ED,ED)=>ED):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "mask", "tail" : "(other: Graph[VD2, ED2])(arg0: ClassTag[VD2], arg1: ClassTag[ED2]): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.mask", "link" : "org\/apache\/spark\/graphx\/Graph.html#mask[VD2,ED2](other:org.apache.spark.graphx.Graph[VD2,ED2])(implicitevidence$9:scala.reflect.ClassTag[VD2],implicitevidence$10:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "subgraph", "tail" : "(epred: (EdgeTriplet[VD, ED]) ⇒ Boolean, vpred: (VertexId, VD) ⇒ Boolean): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.subgraph", "link" : "org\/apache\/spark\/graphx\/Graph.html#subgraph(epred:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>Boolean,vpred:(org.apache.spark.graphx.VertexId,VD)=>Boolean):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "reverse", "tail" : "(): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.reverse", "link" : "org\/apache\/spark\/graphx\/Graph.html#reverse:org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "mapTriplets", "tail" : "(map: (PartitionID, Iterator[EdgeTriplet[VD, ED]]) ⇒ Iterator[ED2], tripletFields: TripletFields)(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.Graph.mapTriplets", "link" : "org\/apache\/spark\/graphx\/Graph.html#mapTriplets[ED2](map:(org.apache.spark.graphx.PartitionID,Iterator[org.apache.spark.graphx.EdgeTriplet[VD,ED]])=>Iterator[ED2],tripletFields:org.apache.spark.graphx.TripletFields)(implicitevidence$8:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "abstract def"}, {"label" : "mapEdges", "tail" : "(map: (PartitionID, Iterator[Edge[ED]]) ⇒ Iterator[ED2])(arg0: ClassTag[ED2]): Graph[VD, ED2]", "member" : "org.apache.spark.graphx.Graph.mapEdges", "link" : "org\/apache\/spark\/graphx\/Graph.html#mapEdges[ED2](map:(org.apache.spark.graphx.PartitionID,Iterator[org.apache.spark.graphx.Edge[ED]])=>Iterator[ED2])(implicitevidence$5:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED2]", "kind" : "abstract def"}, {"label" : "mapVertices", "tail" : "(map: (VertexId, VD) ⇒ VD2)(arg0: ClassTag[VD2], eq: =:=[VD, VD2]): Graph[VD2, ED]", "member" : "org.apache.spark.graphx.Graph.mapVertices", "link" : "org\/apache\/spark\/graphx\/Graph.html#mapVertices[VD2](map:(org.apache.spark.graphx.VertexId,VD)=>VD2)(implicitevidence$3:scala.reflect.ClassTag[VD2],impliciteq:VD=:=VD2):org.apache.spark.graphx.Graph[VD2,ED]", "kind" : "abstract def"}, {"label" : "partitionBy", "tail" : "(partitionStrategy: PartitionStrategy, numPartitions: Int): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.partitionBy", "link" : "org\/apache\/spark\/graphx\/Graph.html#partitionBy(partitionStrategy:org.apache.spark.graphx.PartitionStrategy,numPartitions:Int):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "partitionBy", "tail" : "(partitionStrategy: PartitionStrategy): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.partitionBy", "link" : "org\/apache\/spark\/graphx\/Graph.html#partitionBy(partitionStrategy:org.apache.spark.graphx.PartitionStrategy):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "unpersistVertices", "tail" : "(blocking: Boolean): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.unpersistVertices", "link" : "org\/apache\/spark\/graphx\/Graph.html#unpersistVertices(blocking:Boolean):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.unpersist", "link" : "org\/apache\/spark\/graphx\/Graph.html#unpersist(blocking:Boolean):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "getCheckpointFiles", "tail" : "(): Seq[String]", "member" : "org.apache.spark.graphx.Graph.getCheckpointFiles", "link" : "org\/apache\/spark\/graphx\/Graph.html#getCheckpointFiles:Seq[String]", "kind" : "abstract def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.graphx.Graph.isCheckpointed", "link" : "org\/apache\/spark\/graphx\/Graph.html#isCheckpointed:Boolean", "kind" : "abstract def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.graphx.Graph.checkpoint", "link" : "org\/apache\/spark\/graphx\/Graph.html#checkpoint():Unit", "kind" : "abstract def"}, {"label" : "cache", "tail" : "(): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.cache", "link" : "org\/apache\/spark\/graphx\/Graph.html#cache():org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.persist", "link" : "org\/apache\/spark\/graphx\/Graph.html#persist(newLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "abstract def"}, {"label" : "triplets", "tail" : ": RDD[EdgeTriplet[VD, ED]]", "member" : "org.apache.spark.graphx.Graph.triplets", "link" : "org\/apache\/spark\/graphx\/Graph.html#triplets:org.apache.spark.rdd.RDD[org.apache.spark.graphx.EdgeTriplet[VD,ED]]", "kind" : "abstract val"}, {"label" : "edges", "tail" : ": EdgeRDD[ED]", "member" : "org.apache.spark.graphx.Graph.edges", "link" : "org\/apache\/spark\/graphx\/Graph.html#edges:org.apache.spark.graphx.EdgeRDD[ED]", "kind" : "abstract val"}, {"label" : "vertices", "tail" : ": VertexRDD[VD]", "member" : "org.apache.spark.graphx.Graph.vertices", "link" : "org\/apache\/spark\/graphx\/Graph.html#vertices:org.apache.spark.graphx.VertexRDD[VD]", "kind" : "abstract val"}], "members_object" : [{"label" : "graphToGraphOps", "tail" : "(g: Graph[VD, ED])(arg0: ClassTag[VD], arg1: ClassTag[ED]): GraphOps[VD, ED]", "member" : "org.apache.spark.graphx.Graph.graphToGraphOps", "link" : "org\/apache\/spark\/graphx\/Graph$.html#graphToGraphOps[VD,ED](g:org.apache.spark.graphx.Graph[VD,ED])(implicitevidence$20:scala.reflect.ClassTag[VD],implicitevidence$21:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.GraphOps[VD,ED]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(vertices: RDD[(VertexId, VD)], edges: RDD[Edge[ED]], defaultVertexAttr: VD, edgeStorageLevel: StorageLevel, vertexStorageLevel: StorageLevel)(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.apply", "link" : "org\/apache\/spark\/graphx\/Graph$.html#apply[VD,ED](vertices:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)],edges:org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[ED]],defaultVertexAttr:VD,edgeStorageLevel:org.apache.spark.storage.StorageLevel,vertexStorageLevel:org.apache.spark.storage.StorageLevel)(implicitevidence$18:scala.reflect.ClassTag[VD],implicitevidence$19:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "fromEdges", "tail" : "(edges: RDD[Edge[ED]], defaultValue: VD, edgeStorageLevel: StorageLevel, vertexStorageLevel: StorageLevel)(arg0: ClassTag[VD], arg1: ClassTag[ED]): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Graph.fromEdges", "link" : "org\/apache\/spark\/graphx\/Graph$.html#fromEdges[VD,ED](edges:org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[ED]],defaultValue:VD,edgeStorageLevel:org.apache.spark.storage.StorageLevel,vertexStorageLevel:org.apache.spark.storage.StorageLevel)(implicitevidence$16:scala.reflect.ClassTag[VD],implicitevidence$17:scala.reflect.ClassTag[ED]):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "fromEdgeTuples", "tail" : "(rawEdges: RDD[(VertexId, VertexId)], defaultValue: VD, uniqueEdges: Option[PartitionStrategy], edgeStorageLevel: StorageLevel, vertexStorageLevel: StorageLevel)(arg0: ClassTag[VD]): Graph[VD, Int]", "member" : "org.apache.spark.graphx.Graph.fromEdgeTuples", "link" : "org\/apache\/spark\/graphx\/Graph$.html#fromEdgeTuples[VD](rawEdges:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,org.apache.spark.graphx.VertexId)],defaultValue:VD,uniqueEdges:Option[org.apache.spark.graphx.PartitionStrategy],edgeStorageLevel:org.apache.spark.storage.StorageLevel,vertexStorageLevel:org.apache.spark.storage.StorageLevel)(implicitevidence$15:scala.reflect.ClassTag[VD]):org.apache.spark.graphx.Graph[VD,Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/Graph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/Graph$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/Graph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/Graph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/Graph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/Graph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/Graph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Graph$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Graph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Graph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/Graph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/Graph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/Graph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/Graph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/Graph$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/Graph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/Graph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/Graph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/Graph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/Graph.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.GraphLoader", "shortDescription" : "Provides utilities for loading Graphs from files.", "object" : "org\/apache\/spark\/graphx\/GraphLoader$.html", "members_object" : [{"label" : "edgeListFile", "tail" : "(sc: SparkContext, path: String, canonicalOrientation: Boolean, numEdgePartitions: Int, edgeStorageLevel: StorageLevel, vertexStorageLevel: StorageLevel): Graph[Int, Int]", "member" : "org.apache.spark.graphx.GraphLoader.edgeListFile", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#edgeListFile(sc:org.apache.spark.SparkContext,path:String,canonicalOrientation:Boolean,numEdgePartitions:Int,edgeStorageLevel:org.apache.spark.storage.StorageLevel,vertexStorageLevel:org.apache.spark.storage.StorageLevel):org.apache.spark.graphx.Graph[Int,Int]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/GraphLoader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.GraphOps", "shortDescription" : "Contains additional functionality for Graph.", "members_class" : [{"label" : "stronglyConnectedComponents", "tail" : "(numIter: Int): Graph[VertexId, ED]", "member" : "org.apache.spark.graphx.GraphOps.stronglyConnectedComponents", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#stronglyConnectedComponents(numIter:Int):org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,ED]", "kind" : "def"}, {"label" : "triangleCount", "tail" : "(): Graph[Int, ED]", "member" : "org.apache.spark.graphx.GraphOps.triangleCount", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#triangleCount():org.apache.spark.graphx.Graph[Int,ED]", "kind" : "def"}, {"label" : "connectedComponents", "tail" : "(maxIterations: Int): Graph[VertexId, ED]", "member" : "org.apache.spark.graphx.GraphOps.connectedComponents", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#connectedComponents(maxIterations:Int):org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,ED]", "kind" : "def"}, {"label" : "connectedComponents", "tail" : "(): Graph[VertexId, ED]", "member" : "org.apache.spark.graphx.GraphOps.connectedComponents", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#connectedComponents():org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,ED]", "kind" : "def"}, {"label" : "staticPageRank", "tail" : "(numIter: Int, resetProb: Double, prePageRank: Graph[Double, Double]): Graph[Double, Double]", "member" : "org.apache.spark.graphx.GraphOps.staticPageRank", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#staticPageRank(numIter:Int,resetProb:Double,prePageRank:org.apache.spark.graphx.Graph[Double,Double]):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "staticPageRank", "tail" : "(numIter: Int, resetProb: Double): Graph[Double, Double]", "member" : "org.apache.spark.graphx.GraphOps.staticPageRank", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#staticPageRank(numIter:Int,resetProb:Double):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "staticPersonalizedPageRank", "tail" : "(src: VertexId, numIter: Int, resetProb: Double): Graph[Double, Double]", "member" : "org.apache.spark.graphx.GraphOps.staticPersonalizedPageRank", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#staticPersonalizedPageRank(src:org.apache.spark.graphx.VertexId,numIter:Int,resetProb:Double):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "staticParallelPersonalizedPageRank", "tail" : "(sources: Array[VertexId], numIter: Int, resetProb: Double): Graph[Vector, Double]", "member" : "org.apache.spark.graphx.GraphOps.staticParallelPersonalizedPageRank", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#staticParallelPersonalizedPageRank(sources:Array[org.apache.spark.graphx.VertexId],numIter:Int,resetProb:Double):org.apache.spark.graphx.Graph[org.apache.spark.ml.linalg.Vector,Double]", "kind" : "def"}, {"label" : "personalizedPageRank", "tail" : "(src: VertexId, tol: Double, resetProb: Double): Graph[Double, Double]", "member" : "org.apache.spark.graphx.GraphOps.personalizedPageRank", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#personalizedPageRank(src:org.apache.spark.graphx.VertexId,tol:Double,resetProb:Double):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "pageRank", "tail" : "(tol: Double, resetProb: Double): Graph[Double, Double]", "member" : "org.apache.spark.graphx.GraphOps.pageRank", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#pageRank(tol:Double,resetProb:Double):org.apache.spark.graphx.Graph[Double,Double]", "kind" : "def"}, {"label" : "pregel", "tail" : "(initialMsg: A, maxIterations: Int, activeDirection: EdgeDirection)(vprog: (VertexId, VD, A) ⇒ VD, sendMsg: (EdgeTriplet[VD, ED]) ⇒ Iterator[(VertexId, A)], mergeMsg: (A, A) ⇒ A)(arg0: ClassTag[A]): Graph[VD, ED]", "member" : "org.apache.spark.graphx.GraphOps.pregel", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#pregel[A](initialMsg:A,maxIterations:Int,activeDirection:org.apache.spark.graphx.EdgeDirection)(vprog:(org.apache.spark.graphx.VertexId,VD,A)=>VD,sendMsg:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>Iterator[(org.apache.spark.graphx.VertexId,A)],mergeMsg:(A,A)=>A)(implicitevidence$6:scala.reflect.ClassTag[A]):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "convertToCanonicalEdges", "tail" : "(mergeFunc: (ED, ED) ⇒ ED): Graph[VD, ED]", "member" : "org.apache.spark.graphx.GraphOps.convertToCanonicalEdges", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#convertToCanonicalEdges(mergeFunc:(ED,ED)=>ED):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "pickRandomVertex", "tail" : "(): VertexId", "member" : "org.apache.spark.graphx.GraphOps.pickRandomVertex", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#pickRandomVertex():org.apache.spark.graphx.VertexId", "kind" : "def"}, {"label" : "filter", "tail" : "(preprocess: (Graph[VD, ED]) ⇒ Graph[VD2, ED2], epred: (EdgeTriplet[VD2, ED2]) ⇒ Boolean, vpred: (VertexId, VD2) ⇒ Boolean)(arg0: ClassTag[VD2], arg1: ClassTag[ED2]): Graph[VD, ED]", "member" : "org.apache.spark.graphx.GraphOps.filter", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#filter[VD2,ED2](preprocess:org.apache.spark.graphx.Graph[VD,ED]=>org.apache.spark.graphx.Graph[VD2,ED2],epred:org.apache.spark.graphx.EdgeTriplet[VD2,ED2]=>Boolean,vpred:(org.apache.spark.graphx.VertexId,VD2)=>Boolean)(implicitevidence$4:scala.reflect.ClassTag[VD2],implicitevidence$5:scala.reflect.ClassTag[ED2]):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "joinVertices", "tail" : "(table: RDD[(VertexId, U)])(mapFunc: (VertexId, VD, U) ⇒ VD)(arg0: ClassTag[U]): Graph[VD, ED]", "member" : "org.apache.spark.graphx.GraphOps.joinVertices", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#joinVertices[U](table:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,U)])(mapFunc:(org.apache.spark.graphx.VertexId,VD,U)=>VD)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "removeSelfEdges", "tail" : "(): Graph[VD, ED]", "member" : "org.apache.spark.graphx.GraphOps.removeSelfEdges", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#removeSelfEdges():org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "collectEdges", "tail" : "(edgeDirection: EdgeDirection): VertexRDD[Array[Edge[ED]]]", "member" : "org.apache.spark.graphx.GraphOps.collectEdges", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#collectEdges(edgeDirection:org.apache.spark.graphx.EdgeDirection):org.apache.spark.graphx.VertexRDD[Array[org.apache.spark.graphx.Edge[ED]]]", "kind" : "def"}, {"label" : "collectNeighbors", "tail" : "(edgeDirection: EdgeDirection): VertexRDD[Array[(VertexId, VD)]]", "member" : "org.apache.spark.graphx.GraphOps.collectNeighbors", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#collectNeighbors(edgeDirection:org.apache.spark.graphx.EdgeDirection):org.apache.spark.graphx.VertexRDD[Array[(org.apache.spark.graphx.VertexId,VD)]]", "kind" : "def"}, {"label" : "collectNeighborIds", "tail" : "(edgeDirection: EdgeDirection): VertexRDD[Array[VertexId]]", "member" : "org.apache.spark.graphx.GraphOps.collectNeighborIds", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#collectNeighborIds(edgeDirection:org.apache.spark.graphx.EdgeDirection):org.apache.spark.graphx.VertexRDD[Array[org.apache.spark.graphx.VertexId]]", "kind" : "def"}, {"label" : "degrees", "tail" : ": VertexRDD[Int]", "member" : "org.apache.spark.graphx.GraphOps.degrees", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#degrees:org.apache.spark.graphx.VertexRDD[Int]", "kind" : "lazy val"}, {"label" : "outDegrees", "tail" : ": VertexRDD[Int]", "member" : "org.apache.spark.graphx.GraphOps.outDegrees", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#outDegrees:org.apache.spark.graphx.VertexRDD[Int]", "kind" : "lazy val"}, {"label" : "inDegrees", "tail" : ": VertexRDD[Int]", "member" : "org.apache.spark.graphx.GraphOps.inDegrees", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#inDegrees:org.apache.spark.graphx.VertexRDD[Int]", "kind" : "lazy val"}, {"label" : "numVertices", "tail" : ": Long", "member" : "org.apache.spark.graphx.GraphOps.numVertices", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#numVertices:Long", "kind" : "lazy val"}, {"label" : "numEdges", "tail" : ": Long", "member" : "org.apache.spark.graphx.GraphOps.numEdges", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#numEdges:Long", "kind" : "lazy val"}, {"member" : "org.apache.spark.graphx.GraphOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/GraphOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/GraphOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/GraphOps.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.GraphXUtils", "shortDescription" : "", "object" : "org\/apache\/spark\/graphx\/GraphXUtils$.html", "members_object" : [{"label" : "registerKryoClasses", "tail" : "(conf: SparkConf): Unit", "member" : "org.apache.spark.graphx.GraphXUtils.registerKryoClasses", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#registerKryoClasses(conf:org.apache.spark.SparkConf):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/GraphXUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.PartitionStrategy", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getPartition", "tail" : "(src: VertexId, dst: VertexId, numParts: PartitionID): PartitionID", "member" : "org.apache.spark.graphx.PartitionStrategy.getPartition", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy.html#getPartition(src:org.apache.spark.graphx.VertexId,dst:org.apache.spark.graphx.VertexId,numParts:org.apache.spark.graphx.PartitionID):org.apache.spark.graphx.PartitionID", "kind" : "abstract def"}], "shortDescription" : "Represents the way edges are assigned to edge partitions based on their source and destinationvertex IDs.", "object" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html", "members_object" : [{"label" : "fromString", "tail" : "(s: String): PartitionStrategy", "member" : "org.apache.spark.graphx.PartitionStrategy.fromString", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#fromString(s:String):org.apache.spark.graphx.PartitionStrategy", "kind" : "def"}, {"label" : "CanonicalRandomVertexCut", "tail" : "", "member" : "org.apache.spark.graphx.PartitionStrategy.CanonicalRandomVertexCut", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#CanonicalRandomVertexCut", "kind" : "object"}, {"label" : "RandomVertexCut", "tail" : "", "member" : "org.apache.spark.graphx.PartitionStrategy.RandomVertexCut", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#RandomVertexCut", "kind" : "object"}, {"label" : "EdgePartition1D", "tail" : "", "member" : "org.apache.spark.graphx.PartitionStrategy.EdgePartition1D", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#EdgePartition1D", "kind" : "object"}, {"label" : "EdgePartition2D", "tail" : "", "member" : "org.apache.spark.graphx.PartitionStrategy.EdgePartition2D", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#EdgePartition2D", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/PartitionStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/apache\/spark\/graphx\/PartitionStrategy.html", "kind" : "trait"}, {"name" : "org.apache.spark.graphx.Pregel", "shortDescription" : "Implements a Pregel-like bulk-synchronous message-passing API.", "object" : "org\/apache\/spark\/graphx\/Pregel$.html", "members_object" : [{"label" : "apply", "tail" : "(graph: Graph[VD, ED], initialMsg: A, maxIterations: Int, activeDirection: EdgeDirection)(vprog: (VertexId, VD, A) ⇒ VD, sendMsg: (EdgeTriplet[VD, ED]) ⇒ Iterator[(VertexId, A)], mergeMsg: (A, A) ⇒ A)(arg0: ClassTag[VD], arg1: ClassTag[ED], arg2: ClassTag[A]): Graph[VD, ED]", "member" : "org.apache.spark.graphx.Pregel.apply", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#apply[VD,ED,A](graph:org.apache.spark.graphx.Graph[VD,ED],initialMsg:A,maxIterations:Int,activeDirection:org.apache.spark.graphx.EdgeDirection)(vprog:(org.apache.spark.graphx.VertexId,VD,A)=>VD,sendMsg:org.apache.spark.graphx.EdgeTriplet[VD,ED]=>Iterator[(org.apache.spark.graphx.VertexId,A)],mergeMsg:(A,A)=>A)(implicitevidence$1:scala.reflect.ClassTag[VD],implicitevidence$2:scala.reflect.ClassTag[ED],implicitevidence$3:scala.reflect.ClassTag[A]):org.apache.spark.graphx.Graph[VD,ED]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/Pregel$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/Pregel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.graphx.TripletFields", "shortDescription" : "Represents a subset of the fields of an EdgeTriplet or EdgeContext.", "members_class" : [{"member" : "org.apache.spark.graphx.TripletFields#<init>", "error" : "unsupported entity"}, {"member" : "org.apache.spark.graphx.TripletFields#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/TripletFields.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/TripletFields.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/TripletFields.html", "kind" : "class"}, {"name" : "org.apache.spark.graphx.VertexRDD", "shortDescription" : "Extends RDD[(VertexId, VD)] by ensuring that there is only one entry for each vertex and bypre-indexing the entries for fast, efficient joins.", "object" : "org\/apache\/spark\/graphx\/VertexRDD$.html", "members_class" : [{"label" : "filter", "tail" : "(pred: ((VertexId, VD)) ⇒ Boolean): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.filter", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#filter(pred:((org.apache.spark.graphx.VertexId,VD))=>Boolean):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "compute", "tail" : "(part: Partition, context: TaskContext): Iterator[(VertexId, VD)]", "member" : "org.apache.spark.graphx.VertexRDD.compute", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#compute(part:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[(org.apache.spark.graphx.VertexId,VD)]", "kind" : "def"}, {"label" : "getPartitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.graphx.VertexRDD.getPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getPartitions:Array[org.apache.spark.Partition]", "kind" : "def"}, {"member" : "org.apache.spark.graphx.VertexRDD#<init>", "error" : "unsupported entity"}, {"label" : "getOutputDeterministicLevel", "tail" : "(): rdd.DeterministicLevel.Value", "member" : "org.apache.spark.rdd.RDD.getOutputDeterministicLevel", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getOutputDeterministicLevel:org.apache.spark.rdd.DeterministicLevel.Value", "kind" : "def"}, {"label" : "isBarrier_", "tail" : ": Boolean", "member" : "org.apache.spark.rdd.RDD.isBarrier_", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#isBarrier_:Boolean", "kind" : "lazy val"}, {"label" : "toJavaRDD", "tail" : "(): JavaRDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.toJavaRDD", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#toJavaRDD():org.apache.spark.api.java.JavaRDD[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toString", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#toString():String", "kind" : "def"}, {"label" : "toDebugString", "tail" : "(): String", "member" : "org.apache.spark.rdd.RDD.toDebugString", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#toDebugString:String", "kind" : "def"}, {"label" : "clearDependencies", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.clearDependencies", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#clearDependencies():Unit", "kind" : "def"}, {"label" : "context", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.context", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#context:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "parent", "tail" : "(j: Int)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.parent", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#parent[U](j:Int)(implicitevidence$34:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "firstParent", "tail" : "(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.firstParent", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#firstParent[U](implicitevidence$33:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "getResourceProfile", "tail" : "(): ResourceProfile", "member" : "org.apache.spark.rdd.RDD.getResourceProfile", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getResourceProfile():org.apache.spark.resource.ResourceProfile", "kind" : "def"}, {"label" : "withResources", "tail" : "(rp: ResourceProfile): VertexRDD.this.type", "member" : "org.apache.spark.rdd.RDD.withResources", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#withResources(rp:org.apache.spark.resource.ResourceProfile):RDD.this.type", "kind" : "def"}, {"label" : "barrier", "tail" : "(): RDDBarrier[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.barrier", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#barrier():org.apache.spark.rdd.RDDBarrier[T]", "kind" : "def"}, {"label" : "cleanShuffleDependencies", "tail" : "(blocking: Boolean): Unit", "member" : "org.apache.spark.rdd.RDD.cleanShuffleDependencies", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#cleanShuffleDependencies(blocking:Boolean):Unit", "kind" : "def"}, {"label" : "getCheckpointFile", "tail" : "(): Option[String]", "member" : "org.apache.spark.rdd.RDD.getCheckpointFile", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getCheckpointFile:Option[String]", "kind" : "def"}, {"label" : "isCheckpointed", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isCheckpointed", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#isCheckpointed:Boolean", "kind" : "def"}, {"label" : "localCheckpoint", "tail" : "(): VertexRDD.this.type", "member" : "org.apache.spark.rdd.RDD.localCheckpoint", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#localCheckpoint():RDD.this.type", "kind" : "def"}, {"label" : "checkpoint", "tail" : "(): Unit", "member" : "org.apache.spark.rdd.RDD.checkpoint", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#checkpoint():Unit", "kind" : "def"}, {"label" : "keyBy", "tail" : "(f: ((VertexId, VD)) ⇒ K): RDD[(K, (VertexId, VD))]", "member" : "org.apache.spark.rdd.RDD.keyBy", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#keyBy[K](f:T=>K):org.apache.spark.rdd.RDD[(K,T)]", "kind" : "def"}, {"label" : "saveAsObjectFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsObjectFile", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#saveAsObjectFile(path:String):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String, codec: Class[_ <: CompressionCodec]): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#saveAsTextFile(path:String,codec:Class[_<:org.apache.hadoop.io.compress.CompressionCodec]):Unit", "kind" : "def"}, {"label" : "saveAsTextFile", "tail" : "(path: String): Unit", "member" : "org.apache.spark.rdd.RDD.saveAsTextFile", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#saveAsTextFile(path:String):Unit", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.apache.spark.rdd.RDD.isEmpty", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "min", "tail" : "()(ord: Ordering[(VertexId, VD)]): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.min", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#min()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "()(ord: Ordering[(VertexId, VD)]): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.max", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#max()(implicitord:Ordering[T]):T", "kind" : "def"}, {"label" : "takeOrdered", "tail" : "(num: Int)(ord: Ordering[(VertexId, VD)]): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.takeOrdered", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#takeOrdered(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "top", "tail" : "(num: Int)(ord: Ordering[(VertexId, VD)]): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.top", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#top(num:Int)(implicitord:Ordering[T]):Array[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.first", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#first():T", "kind" : "def"}, {"label" : "take", "tail" : "(num: Int): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.take", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#take(num:Int):Array[T]", "kind" : "def"}, {"label" : "zipWithUniqueId", "tail" : "(): RDD[((VertexId, VD), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithUniqueId", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zipWithUniqueId():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "zipWithIndex", "tail" : "(): RDD[((VertexId, VD), Long)]", "member" : "org.apache.spark.rdd.RDD.zipWithIndex", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zipWithIndex():org.apache.spark.rdd.RDD[(T,Long)]", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(relativeSD: Double): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#countApproxDistinct(relativeSD:Double):Long", "kind" : "def"}, {"label" : "countApproxDistinct", "tail" : "(p: Int, sp: Int): Long", "member" : "org.apache.spark.rdd.RDD.countApproxDistinct", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#countApproxDistinct(p:Int,sp:Int):Long", "kind" : "def"}, {"label" : "countByValueApprox", "tail" : "(timeout: Long, confidence: Double)(ord: Ordering[(VertexId, VD)]): PartialResult[Map[(VertexId, VD), BoundedDouble]]", "member" : "org.apache.spark.rdd.RDD.countByValueApprox", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#countByValueApprox(timeout:Long,confidence:Double)(implicitord:Ordering[T]):org.apache.spark.partial.PartialResult[scala.collection.Map[T,org.apache.spark.partial.BoundedDouble]]", "kind" : "def"}, {"label" : "countByValue", "tail" : "()(ord: Ordering[(VertexId, VD)]): Map[(VertexId, VD), Long]", "member" : "org.apache.spark.rdd.RDD.countByValue", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#countByValue()(implicitord:Ordering[T]):scala.collection.Map[T,Long]", "kind" : "def"}, {"label" : "countApprox", "tail" : "(timeout: Long, confidence: Double): PartialResult[BoundedDouble]", "member" : "org.apache.spark.rdd.RDD.countApprox", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#countApprox(timeout:Long,confidence:Double):org.apache.spark.partial.PartialResult[org.apache.spark.partial.BoundedDouble]", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.rdd.RDD.count", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#count():Long", "kind" : "def"}, {"label" : "treeAggregate", "tail" : "(zeroValue: U)(seqOp: (U, (VertexId, VD)) ⇒ U, combOp: (U, U) ⇒ U, depth: Int)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.treeAggregate", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#treeAggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U,depth:Int)(implicitevidence$32:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "aggregate", "tail" : "(zeroValue: U)(seqOp: (U, (VertexId, VD)) ⇒ U, combOp: (U, U) ⇒ U)(arg0: ClassTag[U]): U", "member" : "org.apache.spark.rdd.RDD.aggregate", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#aggregate[U](zeroValue:U)(seqOp:(U,T)=>U,combOp:(U,U)=>U)(implicitevidence$31:scala.reflect.ClassTag[U]):U", "kind" : "def"}, {"label" : "fold", "tail" : "(zeroValue: (VertexId, VD))(op: ((VertexId, VD), (VertexId, VD)) ⇒ (VertexId, VD)): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.fold", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#fold(zeroValue:T)(op:(T,T)=>T):T", "kind" : "def"}, {"label" : "treeReduce", "tail" : "(f: ((VertexId, VD), (VertexId, VD)) ⇒ (VertexId, VD), depth: Int): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.treeReduce", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#treeReduce(f:(T,T)=>T,depth:Int):T", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: ((VertexId, VD), (VertexId, VD)) ⇒ (VertexId, VD)): (VertexId, VD)", "member" : "org.apache.spark.rdd.RDD.reduce", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#reduce(f:(T,T)=>T):T", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(VertexId, VD)], p: Partitioner)(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],p:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(VertexId, VD)], numPartitions: Int): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#subtract(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "subtract", "tail" : "(other: RDD[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.subtract", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#subtract(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[(VertexId, VD), U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#collect[U](f:PartialFunction[T,U])(implicitevidence$30:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "toLocalIterator", "tail" : "(): Iterator[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.toLocalIterator", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#toLocalIterator:Iterator[T]", "kind" : "def"}, {"label" : "collect", "tail" : "(): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.collect", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#collect():Array[T]", "kind" : "def"}, {"label" : "foreachPartition", "tail" : "(f: (Iterator[(VertexId, VD)]) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreachPartition", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#foreachPartition(f:Iterator[T]=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: ((VertexId, VD)) ⇒ Unit): Unit", "member" : "org.apache.spark.rdd.RDD.foreach", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#foreach(f:T=>Unit):Unit", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D])(f: (Iterator[(VertexId, VD)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D])(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$26:scala.reflect.ClassTag[B],implicitevidence$27:scala.reflect.ClassTag[C],implicitevidence$28:scala.reflect.ClassTag[D],implicitevidence$29:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], rdd4: RDD[D], preservesPartitioning: Boolean)(f: (Iterator[(VertexId, VD)], Iterator[B], Iterator[C], Iterator[D]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[D], arg3: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zipPartitions[B,C,D,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],rdd4:org.apache.spark.rdd.RDD[D],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C],Iterator[D])=>Iterator[V])(implicitevidence$22:scala.reflect.ClassTag[B],implicitevidence$23:scala.reflect.ClassTag[C],implicitevidence$24:scala.reflect.ClassTag[D],implicitevidence$25:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C])(f: (Iterator[(VertexId, VD)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C])(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$19:scala.reflect.ClassTag[B],implicitevidence$20:scala.reflect.ClassTag[C],implicitevidence$21:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], rdd3: RDD[C], preservesPartitioning: Boolean)(f: (Iterator[(VertexId, VD)], Iterator[B], Iterator[C]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[C], arg2: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zipPartitions[B,C,V](rdd2:org.apache.spark.rdd.RDD[B],rdd3:org.apache.spark.rdd.RDD[C],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B],Iterator[C])=>Iterator[V])(implicitevidence$16:scala.reflect.ClassTag[B],implicitevidence$17:scala.reflect.ClassTag[C],implicitevidence$18:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B])(f: (Iterator[(VertexId, VD)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B])(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$14:scala.reflect.ClassTag[B],implicitevidence$15:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zipPartitions", "tail" : "(rdd2: RDD[B], preservesPartitioning: Boolean)(f: (Iterator[(VertexId, VD)], Iterator[B]) ⇒ Iterator[V])(arg0: ClassTag[B], arg1: ClassTag[V]): RDD[V]", "member" : "org.apache.spark.rdd.RDD.zipPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zipPartitions[B,V](rdd2:org.apache.spark.rdd.RDD[B],preservesPartitioning:Boolean)(f:(Iterator[T],Iterator[B])=>Iterator[V])(implicitevidence$12:scala.reflect.ClassTag[B],implicitevidence$13:scala.reflect.ClassTag[V]):org.apache.spark.rdd.RDD[V]", "kind" : "def"}, {"label" : "zip", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((VertexId, VD), U)]", "member" : "org.apache.spark.rdd.RDD.zip", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#zip[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$11:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "mapPartitionsWithIndex", "tail" : "(f: (Int, Iterator[(VertexId, VD)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitionsWithIndex", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#mapPartitionsWithIndex[U](f:(Int,Iterator[T])=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$9:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "mapPartitions", "tail" : "(f: (Iterator[(VertexId, VD)]) ⇒ Iterator[U], preservesPartitioning: Boolean)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.mapPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#mapPartitions[U](f:Iterator[T]=>Iterator[U],preservesPartitioning:Boolean)(implicitevidence$6:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: Seq[String], env: Map[String, String], printPipeContext: ((String) ⇒ Unit) ⇒ Unit, printRDDElement: ((VertexId, VD), (String) ⇒ Unit) ⇒ Unit, separateWorkingDir: Boolean, bufferSize: Int, encoding: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#pipe(command:Seq[String],env:scala.collection.Map[String,String],printPipeContext:(String=>Unit)=>Unit,printRDDElement:(T,String=>Unit)=>Unit,separateWorkingDir:Boolean,bufferSize:Int,encoding:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String, env: Map[String, String]): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#pipe(command:String,env:scala.collection.Map[String,String]):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "pipe", "tail" : "(command: String): RDD[String]", "member" : "org.apache.spark.rdd.RDD.pipe", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#pipe(command:String):org.apache.spark.rdd.RDD[String]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((VertexId, VD)) ⇒ K, p: Partitioner)(kt: ClassTag[K], ord: Ordering[K]): RDD[(K, Iterable[(VertexId, VD)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#groupBy[K](f:T=>K,p:org.apache.spark.Partitioner)(implicitkt:scala.reflect.ClassTag[K],implicitord:Ordering[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((VertexId, VD)) ⇒ K, numPartitions: Int)(kt: ClassTag[K]): RDD[(K, Iterable[(VertexId, VD)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#groupBy[K](f:T=>K,numPartitions:Int)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(f: ((VertexId, VD)) ⇒ K)(kt: ClassTag[K]): RDD[(K, Iterable[(VertexId, VD)])]", "member" : "org.apache.spark.rdd.RDD.groupBy", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#groupBy[K](f:T=>K)(implicitkt:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[(K,Iterable[T])]", "kind" : "def"}, {"label" : "cartesian", "tail" : "(other: RDD[U])(arg0: ClassTag[U]): RDD[((VertexId, VD), U)]", "member" : "org.apache.spark.rdd.RDD.cartesian", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#cartesian[U](other:org.apache.spark.rdd.RDD[U])(implicitevidence$5:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[(T,U)]", "kind" : "def"}, {"label" : "glom", "tail" : "(): RDD[Array[(VertexId, VD)]]", "member" : "org.apache.spark.rdd.RDD.glom", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#glom():org.apache.spark.rdd.RDD[Array[T]]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(VertexId, VD)], numPartitions: Int): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],numPartitions:Int):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(VertexId, VD)], partitioner: Partitioner)(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#intersection(other:org.apache.spark.rdd.RDD[T],partitioner:org.apache.spark.Partitioner)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "intersection", "tail" : "(other: RDD[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.intersection", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#intersection(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "sortBy", "tail" : "(f: ((VertexId, VD)) ⇒ K, ascending: Boolean, numPartitions: Int)(ord: Ordering[K], ctag: ClassTag[K]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.sortBy", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#sortBy[K](f:T=>K,ascending:Boolean,numPartitions:Int)(implicitord:Ordering[K],implicitctag:scala.reflect.ClassTag[K]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "++", "tail" : "(other: RDD[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.++", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#++(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: RDD[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.union", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#union(other:org.apache.spark.rdd.RDD[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "takeSample", "tail" : "(withReplacement: Boolean, num: Int, seed: Long): Array[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.takeSample", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#takeSample(withReplacement:Boolean,num:Int,seed:Long):Array[T]", "kind" : "def"}, {"label" : "randomSplit", "tail" : "(weights: Array[Double], seed: Long): Array[RDD[(VertexId, VD)]]", "member" : "org.apache.spark.rdd.RDD.randomSplit", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#randomSplit(weights:Array[Double],seed:Long):Array[org.apache.spark.rdd.RDD[T]]", "kind" : "def"}, {"label" : "sample", "tail" : "(withReplacement: Boolean, fraction: Double, seed: Long): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.sample", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#sample(withReplacement:Boolean,fraction:Double,seed:Long):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "coalesce", "tail" : "(numPartitions: Int, shuffle: Boolean, partitionCoalescer: Option[PartitionCoalescer])(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.coalesce", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#coalesce(numPartitions:Int,shuffle:Boolean,partitionCoalescer:Option[org.apache.spark.rdd.PartitionCoalescer])(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "repartition", "tail" : "(numPartitions: Int)(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.repartition", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#repartition(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#distinct():org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(numPartitions: Int)(ord: Ordering[(VertexId, VD)]): RDD[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.distinct", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#distinct(numPartitions:Int)(implicitord:Ordering[T]):org.apache.spark.rdd.RDD[T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((VertexId, VD)) ⇒ TraversableOnce[U])(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.flatMap", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#flatMap[U](f:T=>TraversableOnce[U])(implicitevidence$4:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((VertexId, VD)) ⇒ U)(arg0: ClassTag[U]): RDD[U]", "member" : "org.apache.spark.rdd.RDD.map", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#map[U](f:T=>U)(implicitevidence$3:scala.reflect.ClassTag[U]):org.apache.spark.rdd.RDD[U]", "kind" : "def"}, {"label" : "iterator", "tail" : "(split: Partition, context: TaskContext): Iterator[(VertexId, VD)]", "member" : "org.apache.spark.rdd.RDD.iterator", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#iterator(split:org.apache.spark.Partition,context:org.apache.spark.TaskContext):Iterator[T]", "kind" : "final def"}, {"label" : "preferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.preferredLocations", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#preferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "final def"}, {"label" : "getNumPartitions", "tail" : "(): Int", "member" : "org.apache.spark.rdd.RDD.getNumPartitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getNumPartitions:Int", "kind" : "final def"}, {"label" : "partitions", "tail" : "(): Array[Partition]", "member" : "org.apache.spark.rdd.RDD.partitions", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#partitions:Array[org.apache.spark.Partition]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.dependencies", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#dependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "final def"}, {"label" : "getStorageLevel", "tail" : "(): StorageLevel", "member" : "org.apache.spark.rdd.RDD.getStorageLevel", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getStorageLevel:org.apache.spark.storage.StorageLevel", "kind" : "def"}, {"label" : "unpersist", "tail" : "(blocking: Boolean): VertexRDD.this.type", "member" : "org.apache.spark.rdd.RDD.unpersist", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#unpersist(blocking:Boolean):RDD.this.type", "kind" : "def"}, {"label" : "cache", "tail" : "(): VertexRDD.this.type", "member" : "org.apache.spark.rdd.RDD.cache", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#cache():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(): VertexRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#persist():RDD.this.type", "kind" : "def"}, {"label" : "persist", "tail" : "(newLevel: StorageLevel): VertexRDD.this.type", "member" : "org.apache.spark.rdd.RDD.persist", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#persist(newLevel:org.apache.spark.storage.StorageLevel):RDD.this.type", "kind" : "def"}, {"label" : "setName", "tail" : "(_name: String): VertexRDD.this.type", "member" : "org.apache.spark.rdd.RDD.setName", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#setName(_name:String):RDD.this.type", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.rdd.RDD.name", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#name:String", "kind" : "var"}, {"label" : "id", "tail" : ": Int", "member" : "org.apache.spark.rdd.RDD.id", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#id:Int", "kind" : "val"}, {"label" : "sparkContext", "tail" : "(): SparkContext", "member" : "org.apache.spark.rdd.RDD.sparkContext", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#sparkContext:org.apache.spark.SparkContext", "kind" : "def"}, {"label" : "updatedPartitioner", "tail" : ": Partitioner", "member" : "org.apache.spark.rdd.RDD.updatedPartitioner", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#updatedPartitioner:org.apache.spark.Partitioner", "kind" : "var"}, {"label" : "partitioner", "tail" : ": Option[Partitioner]", "member" : "org.apache.spark.rdd.RDD.partitioner", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#partitioner:Option[org.apache.spark.Partitioner]", "kind" : "val"}, {"label" : "getPreferredLocations", "tail" : "(split: Partition): Seq[String]", "member" : "org.apache.spark.rdd.RDD.getPreferredLocations", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getPreferredLocations(split:org.apache.spark.Partition):Seq[String]", "kind" : "def"}, {"label" : "getDependencies", "tail" : "(): Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.getDependencies", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getDependencies:Seq[org.apache.spark.Dependency[_]]", "kind" : "def"}, {"label" : "deps", "tail" : ": Seq[Dependency[_]]", "member" : "org.apache.spark.rdd.RDD.deps", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#deps:Seq[org.apache.spark.Dependency[_]]", "kind" : "var"}, {"label" : "_sc", "tail" : ": SparkContext", "member" : "org.apache.spark.rdd.RDD._sc", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#_sc:org.apache.spark.SparkContext", "kind" : "var"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: ⇒ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withEdges", "tail" : "(edges: EdgeRDD[_]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.withEdges", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#withEdges(edges:org.apache.spark.graphx.EdgeRDD[_]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "abstract def"}, {"label" : "reverseRoutingTables", "tail" : "(): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.reverseRoutingTables", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#reverseRoutingTables():org.apache.spark.graphx.VertexRDD[VD]", "kind" : "abstract def"}, {"label" : "aggregateUsingIndex", "tail" : "(messages: RDD[(VertexId, VD2)], reduceFunc: (VD2, VD2) ⇒ VD2)(arg0: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.VertexRDD.aggregateUsingIndex", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#aggregateUsingIndex[VD2](messages:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD2)],reduceFunc:(VD2,VD2)=>VD2)(implicitevidence$12:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "abstract def"}, {"label" : "innerJoin", "tail" : "(other: RDD[(VertexId, U)])(f: (VertexId, VD, U) ⇒ VD2)(arg0: ClassTag[U], arg1: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.VertexRDD.innerJoin", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#innerJoin[U,VD2](other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,U)])(f:(org.apache.spark.graphx.VertexId,VD,U)=>VD2)(implicitevidence$10:scala.reflect.ClassTag[U],implicitevidence$11:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "abstract def"}, {"label" : "innerZipJoin", "tail" : "(other: VertexRDD[U])(f: (VertexId, VD, U) ⇒ VD2)(arg0: ClassTag[U], arg1: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.VertexRDD.innerZipJoin", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#innerZipJoin[U,VD2](other:org.apache.spark.graphx.VertexRDD[U])(f:(org.apache.spark.graphx.VertexId,VD,U)=>VD2)(implicitevidence$8:scala.reflect.ClassTag[U],implicitevidence$9:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "abstract def"}, {"label" : "leftJoin", "tail" : "(other: RDD[(VertexId, VD2)])(f: (VertexId, VD, Option[VD2]) ⇒ VD3)(arg0: ClassTag[VD2], arg1: ClassTag[VD3]): VertexRDD[VD3]", "member" : "org.apache.spark.graphx.VertexRDD.leftJoin", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#leftJoin[VD2,VD3](other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD2)])(f:(org.apache.spark.graphx.VertexId,VD,Option[VD2])=>VD3)(implicitevidence$6:scala.reflect.ClassTag[VD2],implicitevidence$7:scala.reflect.ClassTag[VD3]):org.apache.spark.graphx.VertexRDD[VD3]", "kind" : "abstract def"}, {"label" : "leftZipJoin", "tail" : "(other: VertexRDD[VD2])(f: (VertexId, VD, Option[VD2]) ⇒ VD3)(arg0: ClassTag[VD2], arg1: ClassTag[VD3]): VertexRDD[VD3]", "member" : "org.apache.spark.graphx.VertexRDD.leftZipJoin", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#leftZipJoin[VD2,VD3](other:org.apache.spark.graphx.VertexRDD[VD2])(f:(org.apache.spark.graphx.VertexId,VD,Option[VD2])=>VD3)(implicitevidence$4:scala.reflect.ClassTag[VD2],implicitevidence$5:scala.reflect.ClassTag[VD3]):org.apache.spark.graphx.VertexRDD[VD3]", "kind" : "abstract def"}, {"label" : "diff", "tail" : "(other: VertexRDD[VD]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.diff", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#diff(other:org.apache.spark.graphx.VertexRDD[VD]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "abstract def"}, {"label" : "diff", "tail" : "(other: RDD[(VertexId, VD)]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.diff", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#diff(other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "abstract def"}, {"label" : "minus", "tail" : "(other: VertexRDD[VD]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.minus", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#minus(other:org.apache.spark.graphx.VertexRDD[VD]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "abstract def"}, {"label" : "minus", "tail" : "(other: RDD[(VertexId, VD)]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.minus", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#minus(other:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "abstract def"}, {"label" : "mapValues", "tail" : "(f: (VertexId, VD) ⇒ VD2)(arg0: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.VertexRDD.mapValues", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#mapValues[VD2](f:(org.apache.spark.graphx.VertexId,VD)=>VD2)(implicitevidence$3:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "abstract def"}, {"label" : "mapValues", "tail" : "(f: (VD) ⇒ VD2)(arg0: ClassTag[VD2]): VertexRDD[VD2]", "member" : "org.apache.spark.graphx.VertexRDD.mapValues", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#mapValues[VD2](f:VD=>VD2)(implicitevidence$2:scala.reflect.ClassTag[VD2]):org.apache.spark.graphx.VertexRDD[VD2]", "kind" : "abstract def"}, {"label" : "reindex", "tail" : "(): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.reindex", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#reindex():org.apache.spark.graphx.VertexRDD[VD]", "kind" : "abstract def"}, {"label" : "vdTag", "tail" : "(): ClassTag[VD]", "member" : "org.apache.spark.graphx.VertexRDD.vdTag", "link" : "org\/apache\/spark\/graphx\/VertexRDD.html#vdTag:scala.reflect.ClassTag[VD]", "kind" : "implicit abstract def"}], "members_object" : [{"label" : "fromEdges", "tail" : "(edges: EdgeRDD[_], numPartitions: Int, defaultVal: VD)(arg0: ClassTag[VD]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.fromEdges", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#fromEdges[VD](edges:org.apache.spark.graphx.EdgeRDD[_],numPartitions:Int,defaultVal:VD)(implicitevidence$17:scala.reflect.ClassTag[VD]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "apply", "tail" : "(vertices: RDD[(VertexId, VD)], edges: EdgeRDD[_], defaultVal: VD, mergeFunc: (VD, VD) ⇒ VD)(arg0: ClassTag[VD]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.apply", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#apply[VD](vertices:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)],edges:org.apache.spark.graphx.EdgeRDD[_],defaultVal:VD,mergeFunc:(VD,VD)=>VD)(implicitevidence$16:scala.reflect.ClassTag[VD]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "apply", "tail" : "(vertices: RDD[(VertexId, VD)], edges: EdgeRDD[_], defaultVal: VD)(arg0: ClassTag[VD]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.apply", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#apply[VD](vertices:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)],edges:org.apache.spark.graphx.EdgeRDD[_],defaultVal:VD)(implicitevidence$15:scala.reflect.ClassTag[VD]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "apply", "tail" : "(vertices: RDD[(VertexId, VD)])(arg0: ClassTag[VD]): VertexRDD[VD]", "member" : "org.apache.spark.graphx.VertexRDD.apply", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#apply[VD](vertices:org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId,VD)])(implicitevidence$14:scala.reflect.ClassTag[VD]):org.apache.spark.graphx.VertexRDD[VD]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/graphx\/VertexRDD$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/graphx\/VertexRDD.html", "kind" : "class"}], "org" : []};