Index.PACKAGES = {"org.apache.spark.util" : [], "org.apache.spark.util.sketch" : [{"name" : "org.apache.spark.util.sketch.BloomFilter", "shortDescription" : "A Bloom filter is a space-efficient probabilistic data structure that offers an approximatecontainment test with one-sided error: if it claims that an item is contained in it, thismight be in error, but if it claims that an item is not contained in it, then this isdefinitely true.", "members_class" : [{"member" : "org.apache.spark.util.sketch.BloomFilter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "writeTo", "tail" : "(out: OutputStream): Unit", "member" : "org.apache.spark.util.sketch.BloomFilter.writeTo", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#writeTo(out:java.io.OutputStream):Unit", "kind" : "abstract def"}, {"label" : "mightContainBinary", "tail" : "(item: Array[Byte]): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.mightContainBinary", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#mightContainBinary(item:Array[Byte]):Boolean", "kind" : "abstract def"}, {"label" : "mightContainLong", "tail" : "(item: Long): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.mightContainLong", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#mightContainLong(item:Long):Boolean", "kind" : "abstract def"}, {"label" : "mightContainString", "tail" : "(item: String): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.mightContainString", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#mightContainString(item:String):Boolean", "kind" : "abstract def"}, {"label" : "mightContain", "tail" : "(item: Any): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.mightContain", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#mightContain(item:Any):Boolean", "kind" : "abstract def"}, {"label" : "intersectInPlace", "tail" : "(other: BloomFilter): BloomFilter", "member" : "org.apache.spark.util.sketch.BloomFilter.intersectInPlace", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#intersectInPlace(other:org.apache.spark.util.sketch.BloomFilter):org.apache.spark.util.sketch.BloomFilter", "kind" : "abstract def"}, {"label" : "mergeInPlace", "tail" : "(other: BloomFilter): BloomFilter", "member" : "org.apache.spark.util.sketch.BloomFilter.mergeInPlace", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#mergeInPlace(other:org.apache.spark.util.sketch.BloomFilter):org.apache.spark.util.sketch.BloomFilter", "kind" : "abstract def"}, {"label" : "isCompatible", "tail" : "(other: BloomFilter): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.isCompatible", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#isCompatible(other:org.apache.spark.util.sketch.BloomFilter):Boolean", "kind" : "abstract def"}, {"label" : "putBinary", "tail" : "(item: Array[Byte]): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.putBinary", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#putBinary(item:Array[Byte]):Boolean", "kind" : "abstract def"}, {"label" : "putLong", "tail" : "(item: Long): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.putLong", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#putLong(item:Long):Boolean", "kind" : "abstract def"}, {"label" : "putString", "tail" : "(item: String): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.putString", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#putString(item:String):Boolean", "kind" : "abstract def"}, {"label" : "put", "tail" : "(item: Any): Boolean", "member" : "org.apache.spark.util.sketch.BloomFilter.put", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#put(item:Any):Boolean", "kind" : "abstract def"}, {"label" : "bitSize", "tail" : "(): Long", "member" : "org.apache.spark.util.sketch.BloomFilter.bitSize", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#bitSize():Long", "kind" : "abstract def"}, {"label" : "expectedFpp", "tail" : "(): Double", "member" : "org.apache.spark.util.sketch.BloomFilter.expectedFpp", "link" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html#expectedFpp():Double", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/util\/sketch\/BloomFilter.html", "kind" : "class"}, {"name" : "org.apache.spark.util.sketch.CountMinSketch", "shortDescription" : "A Count-min sketch is a probabilistic data structure used for cardinality estimation usingsub-linear space.", "members_class" : [{"member" : "org.apache.spark.util.sketch.CountMinSketch#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toByteArray", "tail" : "(): Array[Byte]", "member" : "org.apache.spark.util.sketch.CountMinSketch.toByteArray", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#toByteArray():Array[Byte]", "kind" : "abstract def"}, {"label" : "writeTo", "tail" : "(out: OutputStream): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.writeTo", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#writeTo(out:java.io.OutputStream):Unit", "kind" : "abstract def"}, {"label" : "mergeInPlace", "tail" : "(other: CountMinSketch): CountMinSketch", "member" : "org.apache.spark.util.sketch.CountMinSketch.mergeInPlace", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#mergeInPlace(other:org.apache.spark.util.sketch.CountMinSketch):org.apache.spark.util.sketch.CountMinSketch", "kind" : "abstract def"}, {"label" : "estimateCount", "tail" : "(item: Any): Long", "member" : "org.apache.spark.util.sketch.CountMinSketch.estimateCount", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#estimateCount(item:Any):Long", "kind" : "abstract def"}, {"label" : "addBinary", "tail" : "(item: Array[Byte], count: Long): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.addBinary", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#addBinary(item:Array[Byte],count:Long):Unit", "kind" : "abstract def"}, {"label" : "addBinary", "tail" : "(item: Array[Byte]): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.addBinary", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#addBinary(item:Array[Byte]):Unit", "kind" : "abstract def"}, {"label" : "addString", "tail" : "(item: String, count: Long): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.addString", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#addString(item:String,count:Long):Unit", "kind" : "abstract def"}, {"label" : "addString", "tail" : "(item: String): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.addString", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#addString(item:String):Unit", "kind" : "abstract def"}, {"label" : "addLong", "tail" : "(item: Long, count: Long): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.addLong", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#addLong(item:Long,count:Long):Unit", "kind" : "abstract def"}, {"label" : "addLong", "tail" : "(item: Long): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.addLong", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#addLong(item:Long):Unit", "kind" : "abstract def"}, {"label" : "add", "tail" : "(item: Any, count: Long): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.add", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#add(item:Any,count:Long):Unit", "kind" : "abstract def"}, {"label" : "add", "tail" : "(item: Any): Unit", "member" : "org.apache.spark.util.sketch.CountMinSketch.add", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#add(item:Any):Unit", "kind" : "abstract def"}, {"label" : "totalCount", "tail" : "(): Long", "member" : "org.apache.spark.util.sketch.CountMinSketch.totalCount", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#totalCount():Long", "kind" : "abstract def"}, {"label" : "width", "tail" : "(): Int", "member" : "org.apache.spark.util.sketch.CountMinSketch.width", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#width():Int", "kind" : "abstract def"}, {"label" : "depth", "tail" : "(): Int", "member" : "org.apache.spark.util.sketch.CountMinSketch.depth", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#depth():Int", "kind" : "abstract def"}, {"label" : "confidence", "tail" : "(): Double", "member" : "org.apache.spark.util.sketch.CountMinSketch.confidence", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#confidence():Double", "kind" : "abstract def"}, {"label" : "relativeError", "tail" : "(): Double", "member" : "org.apache.spark.util.sketch.CountMinSketch.relativeError", "link" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html#relativeError():Double", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/util\/sketch\/CountMinSketch.html", "kind" : "class"}, {"name" : "org.apache.spark.util.sketch.IncompatibleMergeException", "shortDescription" : "", "members_class" : [{"member" : "org.apache.spark.util.sketch.IncompatibleMergeException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/util\/sketch\/IncompatibleMergeException.html", "kind" : "class"}], "org.apache.spark" : [], "org.apache" : [], "org" : []};