Index.PACKAGES = {"org.apache.spark.streaming" : [], "org.apache.spark" : [], "org.apache" : [], "org.apache.spark.streaming.kafka010" : [{"name" : "org.apache.spark.streaming.kafka010.CanCommitOffsets", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "commitAsync", "tail" : "(offsetRanges: Array[OffsetRange], callback: OffsetCommitCallback): Unit", "member" : "org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#commitAsync(offsetRanges:Array[org.apache.spark.streaming.kafka010.OffsetRange],callback:org.apache.kafka.clients.consumer.OffsetCommitCallback):Unit", "kind" : "abstract def"}, {"label" : "commitAsync", "tail" : "(offsetRanges: Array[OffsetRange]): Unit", "member" : "org.apache.spark.streaming.kafka010.CanCommitOffsets.commitAsync", "link" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html#commitAsync(offsetRanges:Array[org.apache.spark.streaming.kafka010.OffsetRange]):Unit", "kind" : "abstract def"}], "shortDescription" : "Represents any object that can commit a collection of OffsetRanges.", "trait" : "org\/apache\/spark\/streaming\/kafka010\/CanCommitOffsets.html", "kind" : "trait"}, {"name" : "org.apache.spark.streaming.kafka010.ConsumerStrategies", "shortDescription" : "Object for obtaining instances of ConsumerStrategy", "object" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html", "members_object" : [{"label" : "Assign", "tail" : "(topicPartitions: Collection[TopicPartition], kafkaParams: Map[String, AnyRef]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.Assign", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#Assign[K,V](topicPartitions:java.util.Collection[org.apache.kafka.common.TopicPartition],kafkaParams:java.util.Map[String,Object]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "Assign", "tail" : "(topicPartitions: Collection[TopicPartition], kafkaParams: Map[String, AnyRef], offsets: Map[TopicPartition, Long]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.Assign", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#Assign[K,V](topicPartitions:java.util.Collection[org.apache.kafka.common.TopicPartition],kafkaParams:java.util.Map[String,Object],offsets:java.util.Map[org.apache.kafka.common.TopicPartition,Long]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "Assign", "tail" : "(topicPartitions: Iterable[TopicPartition], kafkaParams: Map[String, AnyRef]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.Assign", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#Assign[K,V](topicPartitions:Iterable[org.apache.kafka.common.TopicPartition],kafkaParams:scala.collection.Map[String,Object]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "Assign", "tail" : "(topicPartitions: Iterable[TopicPartition], kafkaParams: Map[String, AnyRef], offsets: Map[TopicPartition, Long]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.Assign", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#Assign[K,V](topicPartitions:Iterable[org.apache.kafka.common.TopicPartition],kafkaParams:scala.collection.Map[String,Object],offsets:scala.collection.Map[org.apache.kafka.common.TopicPartition,Long]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "SubscribePattern", "tail" : "(pattern: Pattern, kafkaParams: Map[String, AnyRef]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.SubscribePattern", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#SubscribePattern[K,V](pattern:java.util.regex.Pattern,kafkaParams:java.util.Map[String,Object]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "SubscribePattern", "tail" : "(pattern: Pattern, kafkaParams: Map[String, AnyRef], offsets: Map[TopicPartition, Long]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.SubscribePattern", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#SubscribePattern[K,V](pattern:java.util.regex.Pattern,kafkaParams:java.util.Map[String,Object],offsets:java.util.Map[org.apache.kafka.common.TopicPartition,Long]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "SubscribePattern", "tail" : "(pattern: Pattern, kafkaParams: Map[String, AnyRef]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.SubscribePattern", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#SubscribePattern[K,V](pattern:java.util.regex.Pattern,kafkaParams:scala.collection.Map[String,Object]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "SubscribePattern", "tail" : "(pattern: Pattern, kafkaParams: Map[String, AnyRef], offsets: Map[TopicPartition, Long]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.SubscribePattern", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#SubscribePattern[K,V](pattern:java.util.regex.Pattern,kafkaParams:scala.collection.Map[String,Object],offsets:scala.collection.Map[org.apache.kafka.common.TopicPartition,Long]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "Subscribe", "tail" : "(topics: Collection[String], kafkaParams: Map[String, AnyRef]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#Subscribe[K,V](topics:java.util.Collection[String],kafkaParams:java.util.Map[String,Object]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "Subscribe", "tail" : "(topics: Collection[String], kafkaParams: Map[String, AnyRef], offsets: Map[TopicPartition, Long]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#Subscribe[K,V](topics:java.util.Collection[String],kafkaParams:java.util.Map[String,Object],offsets:java.util.Map[org.apache.kafka.common.TopicPartition,Long]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "Subscribe", "tail" : "(topics: Iterable[String], kafkaParams: Map[String, AnyRef]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#Subscribe[K,V](topics:Iterable[String],kafkaParams:scala.collection.Map[String,Object]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "Subscribe", "tail" : "(topics: Iterable[String], kafkaParams: Map[String, AnyRef], offsets: Map[TopicPartition, Long]): ConsumerStrategy[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#Subscribe[K,V](topics:Iterable[String],kafkaParams:scala.collection.Map[String,Object],offsets:scala.collection.Map[org.apache.kafka.common.TopicPartition,Long]):org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategies$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.streaming.kafka010.ConsumerStrategy", "shortDescription" : "Choice of how to create and configure underlying Kafka Consumers on driver and executors.", "members_class" : [{"label" : "setAuthenticationConfigIfNeeded", "tail" : "(kafkaParams: Map[String, AnyRef]): Map[String, AnyRef]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategy.setAuthenticationConfigIfNeeded", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#setAuthenticationConfigIfNeeded(kafkaParams:java.util.Map[String,Object]):java.util.Map[String,Object]", "kind" : "def"}, {"member" : "org.apache.spark.streaming.kafka010.ConsumerStrategy#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onStart", "tail" : "(currentOffsets: Map[TopicPartition, Long]): Consumer[K, V]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategy.onStart", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#onStart(currentOffsets:java.util.Map[org.apache.kafka.common.TopicPartition,Long]):org.apache.kafka.clients.consumer.Consumer[K,V]", "kind" : "abstract def"}, {"label" : "executorKafkaParams", "tail" : "(): Map[String, AnyRef]", "member" : "org.apache.spark.streaming.kafka010.ConsumerStrategy.executorKafkaParams", "link" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html#executorKafkaParams:java.util.Map[String,Object]", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/streaming\/kafka010\/ConsumerStrategy.html", "kind" : "class"}, {"name" : "org.apache.spark.streaming.kafka010.HasOffsetRanges", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "offsetRanges", "tail" : "(): Array[OffsetRange]", "member" : "org.apache.spark.streaming.kafka010.HasOffsetRanges.offsetRanges", "link" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html#offsetRanges:Array[org.apache.spark.streaming.kafka010.OffsetRange]", "kind" : "abstract def"}], "shortDescription" : "Represents any object that has a collection of OffsetRanges.", "trait" : "org\/apache\/spark\/streaming\/kafka010\/HasOffsetRanges.html", "kind" : "trait"}, {"name" : "org.apache.spark.streaming.kafka010.KafkaUtils", "shortDescription" : "object for constructing Kafka streams and RDDs", "object" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html", "members_object" : [{"label" : "createDirectStream", "tail" : "(jssc: JavaStreamingContext, locationStrategy: LocationStrategy, consumerStrategy: ConsumerStrategy[K, V], perPartitionConfig: PerPartitionConfig): JavaInputDStream[ConsumerRecord[K, V]]", "member" : "org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#createDirectStream[K,V](jssc:org.apache.spark.streaming.api.java.JavaStreamingContext,locationStrategy:org.apache.spark.streaming.kafka010.LocationStrategy,consumerStrategy:org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V],perPartitionConfig:org.apache.spark.streaming.kafka010.PerPartitionConfig):org.apache.spark.streaming.api.java.JavaInputDStream[org.apache.kafka.clients.consumer.ConsumerRecord[K,V]]", "kind" : "def"}, {"label" : "createDirectStream", "tail" : "(jssc: JavaStreamingContext, locationStrategy: LocationStrategy, consumerStrategy: ConsumerStrategy[K, V]): JavaInputDStream[ConsumerRecord[K, V]]", "member" : "org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#createDirectStream[K,V](jssc:org.apache.spark.streaming.api.java.JavaStreamingContext,locationStrategy:org.apache.spark.streaming.kafka010.LocationStrategy,consumerStrategy:org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]):org.apache.spark.streaming.api.java.JavaInputDStream[org.apache.kafka.clients.consumer.ConsumerRecord[K,V]]", "kind" : "def"}, {"label" : "createDirectStream", "tail" : "(ssc: StreamingContext, locationStrategy: LocationStrategy, consumerStrategy: ConsumerStrategy[K, V], perPartitionConfig: PerPartitionConfig): InputDStream[ConsumerRecord[K, V]]", "member" : "org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#createDirectStream[K,V](ssc:org.apache.spark.streaming.StreamingContext,locationStrategy:org.apache.spark.streaming.kafka010.LocationStrategy,consumerStrategy:org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V],perPartitionConfig:org.apache.spark.streaming.kafka010.PerPartitionConfig):org.apache.spark.streaming.dstream.InputDStream[org.apache.kafka.clients.consumer.ConsumerRecord[K,V]]", "kind" : "def"}, {"label" : "createDirectStream", "tail" : "(ssc: StreamingContext, locationStrategy: LocationStrategy, consumerStrategy: ConsumerStrategy[K, V]): InputDStream[ConsumerRecord[K, V]]", "member" : "org.apache.spark.streaming.kafka010.KafkaUtils.createDirectStream", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#createDirectStream[K,V](ssc:org.apache.spark.streaming.StreamingContext,locationStrategy:org.apache.spark.streaming.kafka010.LocationStrategy,consumerStrategy:org.apache.spark.streaming.kafka010.ConsumerStrategy[K,V]):org.apache.spark.streaming.dstream.InputDStream[org.apache.kafka.clients.consumer.ConsumerRecord[K,V]]", "kind" : "def"}, {"label" : "createRDD", "tail" : "(jsc: JavaSparkContext, kafkaParams: Map[String, AnyRef], offsetRanges: Array[OffsetRange], locationStrategy: LocationStrategy): JavaRDD[ConsumerRecord[K, V]]", "member" : "org.apache.spark.streaming.kafka010.KafkaUtils.createRDD", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#createRDD[K,V](jsc:org.apache.spark.api.java.JavaSparkContext,kafkaParams:java.util.Map[String,Object],offsetRanges:Array[org.apache.spark.streaming.kafka010.OffsetRange],locationStrategy:org.apache.spark.streaming.kafka010.LocationStrategy):org.apache.spark.api.java.JavaRDD[org.apache.kafka.clients.consumer.ConsumerRecord[K,V]]", "kind" : "def"}, {"label" : "createRDD", "tail" : "(sc: SparkContext, kafkaParams: Map[String, AnyRef], offsetRanges: Array[OffsetRange], locationStrategy: LocationStrategy): RDD[ConsumerRecord[K, V]]", "member" : "org.apache.spark.streaming.kafka010.KafkaUtils.createRDD", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#createRDD[K,V](sc:org.apache.spark.SparkContext,kafkaParams:java.util.Map[String,Object],offsetRanges:Array[org.apache.spark.streaming.kafka010.OffsetRange],locationStrategy:org.apache.spark.streaming.kafka010.LocationStrategy):org.apache.spark.rdd.RDD[org.apache.kafka.clients.consumer.ConsumerRecord[K,V]]", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean, silent: Boolean): Boolean", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#initializeLogIfNecessary(isInterpreter:Boolean,silent:Boolean):Boolean", "kind" : "def"}, {"label" : "initializeLogIfNecessary", "tail" : "(isInterpreter: Boolean): Unit", "member" : "org.apache.spark.internal.Logging.initializeLogIfNecessary", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#initializeLogIfNecessary(isInterpreter:Boolean):Unit", "kind" : "def"}, {"label" : "isTraceEnabled", "tail" : "(): Boolean", "member" : "org.apache.spark.internal.Logging.isTraceEnabled", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#isTraceEnabled():Boolean", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: â‡’ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logError(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: â‡’ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logWarning(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: â‡’ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logTrace(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: â‡’ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logDebug(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: â‡’ String, throwable: Throwable): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logInfo(msg:=>String,throwable:Throwable):Unit", "kind" : "def"}, {"label" : "logError", "tail" : "(msg: â‡’ String): Unit", "member" : "org.apache.spark.internal.Logging.logError", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logError(msg:=>String):Unit", "kind" : "def"}, {"label" : "logWarning", "tail" : "(msg: â‡’ String): Unit", "member" : "org.apache.spark.internal.Logging.logWarning", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logWarning(msg:=>String):Unit", "kind" : "def"}, {"label" : "logTrace", "tail" : "(msg: â‡’ String): Unit", "member" : "org.apache.spark.internal.Logging.logTrace", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logTrace(msg:=>String):Unit", "kind" : "def"}, {"label" : "logDebug", "tail" : "(msg: â‡’ String): Unit", "member" : "org.apache.spark.internal.Logging.logDebug", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logDebug(msg:=>String):Unit", "kind" : "def"}, {"label" : "logInfo", "tail" : "(msg: â‡’ String): Unit", "member" : "org.apache.spark.internal.Logging.logInfo", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logInfo(msg:=>String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(): Logger", "member" : "org.apache.spark.internal.Logging.log", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#log:org.slf4j.Logger", "kind" : "def"}, {"label" : "logName", "tail" : "(): String", "member" : "org.apache.spark.internal.Logging.logName", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#logName:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/KafkaUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.streaming.kafka010.LocationStrategies", "shortDescription" : "Object to obtain instances of LocationStrategy", "object" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html", "members_object" : [{"label" : "PreferFixed", "tail" : "(hostMap: Map[TopicPartition, String]): LocationStrategy", "member" : "org.apache.spark.streaming.kafka010.LocationStrategies.PreferFixed", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#PreferFixed(hostMap:java.util.Map[org.apache.kafka.common.TopicPartition,String]):org.apache.spark.streaming.kafka010.LocationStrategy", "kind" : "def"}, {"label" : "PreferFixed", "tail" : "(hostMap: Map[TopicPartition, String]): LocationStrategy", "member" : "org.apache.spark.streaming.kafka010.LocationStrategies.PreferFixed", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#PreferFixed(hostMap:scala.collection.Map[org.apache.kafka.common.TopicPartition,String]):org.apache.spark.streaming.kafka010.LocationStrategy", "kind" : "def"}, {"label" : "PreferConsistent", "tail" : "(): LocationStrategy", "member" : "org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#PreferConsistent:org.apache.spark.streaming.kafka010.LocationStrategy", "kind" : "def"}, {"label" : "PreferBrokers", "tail" : "(): LocationStrategy", "member" : "org.apache.spark.streaming.kafka010.LocationStrategies.PreferBrokers", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#PreferBrokers:org.apache.spark.streaming.kafka010.LocationStrategy", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategies$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.streaming.kafka010.LocationStrategy", "shortDescription" : "Choice of how to schedule consumers for a given TopicPartition on an executor.", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/streaming\/kafka010\/LocationStrategy.html", "kind" : "class"}, {"name" : "org.apache.spark.streaming.kafka010.OffsetRange", "shortDescription" : "Represents a range of offsets from a single Kafka TopicPartition.", "object" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(): Long", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.count", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#count():Long", "kind" : "def"}, {"label" : "topicPartition", "tail" : "(): TopicPartition", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.topicPartition", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#topicPartition():org.apache.kafka.common.TopicPartition", "kind" : "def"}, {"label" : "untilOffset", "tail" : ": Long", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.untilOffset", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#untilOffset:Long", "kind" : "val"}, {"label" : "fromOffset", "tail" : ": Long", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.fromOffset", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#fromOffset:Long", "kind" : "val"}, {"label" : "partition", "tail" : ": Int", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.partition", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#partition:Int", "kind" : "val"}, {"label" : "topic", "tail" : ": String", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.topic", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#topic:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(topicPartition: TopicPartition, fromOffset: Long, untilOffset: Long): OffsetRange", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.apply", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#apply(topicPartition:org.apache.kafka.common.TopicPartition,fromOffset:Long,untilOffset:Long):org.apache.spark.streaming.kafka010.OffsetRange", "kind" : "def"}, {"label" : "apply", "tail" : "(topic: String, partition: Int, fromOffset: Long, untilOffset: Long): OffsetRange", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.apply", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#apply(topic:String,partition:Int,fromOffset:Long,untilOffset:Long):org.apache.spark.streaming.kafka010.OffsetRange", "kind" : "def"}, {"label" : "create", "tail" : "(topicPartition: TopicPartition, fromOffset: Long, untilOffset: Long): OffsetRange", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.create", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#create(topicPartition:org.apache.kafka.common.TopicPartition,fromOffset:Long,untilOffset:Long):org.apache.spark.streaming.kafka010.OffsetRange", "kind" : "def"}, {"label" : "create", "tail" : "(topic: String, partition: Int, fromOffset: Long, untilOffset: Long): OffsetRange", "member" : "org.apache.spark.streaming.kafka010.OffsetRange.create", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#create(topic:String,partition:Int,fromOffset:Long,untilOffset:Long):org.apache.spark.streaming.kafka010.OffsetRange", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/streaming\/kafka010\/OffsetRange.html", "kind" : "class"}, {"name" : "org.apache.spark.streaming.kafka010.PerPartitionConfig", "shortDescription" : "Interface for user-supplied configurations that can't otherwise be set via Spark properties,because they need tweaking on a per-partition basis,", "members_class" : [{"label" : "minRatePerPartition", "tail" : "(topicPartition: TopicPartition): Long", "member" : "org.apache.spark.streaming.kafka010.PerPartitionConfig.minRatePerPartition", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#minRatePerPartition(topicPartition:org.apache.kafka.common.TopicPartition):Long", "kind" : "def"}, {"member" : "org.apache.spark.streaming.kafka010.PerPartitionConfig#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "maxRatePerPartition", "tail" : "(topicPartition: TopicPartition): Long", "member" : "org.apache.spark.streaming.kafka010.PerPartitionConfig.maxRatePerPartition", "link" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html#maxRatePerPartition(topicPartition:org.apache.kafka.common.TopicPartition):Long", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/streaming\/kafka010\/PerPartitionConfig.html", "kind" : "class"}], "org" : []};